import { Host, h } from "@stencil/core";
import { hasSlot } from "../../utils/helper";
/**
 * @slot default - Card content
 * @slot heading - Slot for custom card heading
 * @slot pre-heading - Slot for content above the card heading
 * @slot media - Slot for media markup for media card
 * @slot footer - Slot for card footer markup
 */
export class GoCard {
    constructor() {
        this.heading = undefined;
        this.subHeading = undefined;
        this.mediaPosition = 'top';
        this.href = undefined;
        this.target = undefined;
        this.flat = false;
        this.border = false;
    }
    componentWillLoad() {
        this.hasCustomHeading = hasSlot(this.el, 'heading');
        this.hasMedia = hasSlot(this.el, 'media');
        this.hasPreHeading = hasSlot(this.el, 'pre-heading');
        this.hasFooter = hasSlot(this.el, 'footer');
    }
    render() {
        const { hasMedia, mediaPosition, hasCustomHeading, heading, subHeading, hasPreHeading, hasFooter, href, target, flat, border, } = this;
        return (h(Host, { key: 'd6b827cefb8d09129ab32122ced68a115233c458', class: { [`media ${mediaPosition}`]: hasMedia, 'has-link': !!href, flat, border } }, hasMedia && (h("div", { class: "card-media" }, h("slot", { name: "media" }))), h("section", { key: '5871f3ecfa1e11a118e301343343da2b6c75e5b0', class: "card-inner" }, hasCustomHeading || heading || subHeading ? (h("div", { class: "card-heading-section" }, hasPreHeading ? h("slot", { name: "pre-heading" }) : null, h("slot", { name: "heading" }, heading ? (h("h2", { class: "card-heading" }, href ? (h("go-link", { href: href, target: target ? target : null, "expand-clickable-area": true }, heading)) : (heading))) : null, subHeading ? h("h3", { class: "card-subheading" }, subHeading) : null))) : null, h("div", { key: '1cf30b00981775b265fde21e9dfcea24e9ae796a', class: "card-content" }, h("slot", { key: 'f42ea7ea41002a042120ec0a13f20ccf7b4de577' })), hasFooter ? (h("div", { class: "card-footer" }, h("slot", { name: "footer" }))) : null)));
    }
    static get is() { return "go-card"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-card.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-card.css"]
        };
    }
    static get properties() {
        return {
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Heading of the card"
                },
                "attribute": "heading",
                "reflect": false
            },
            "subHeading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Sub heading of the card"
                },
                "attribute": "sub-heading",
                "reflect": false
            },
            "mediaPosition": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "| 'top'\n    | 'left'\n    | 'right'\n    | 'bottom'\n    | 'start' // responsive top left\n    | 'end'",
                    "resolved": "\"bottom\" | \"end\" | \"left\" | \"right\" | \"start\" | \"top\"",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Position of featured media in the card"
                },
                "attribute": "media-position",
                "reflect": false,
                "defaultValue": "'top'"
            },
            "href": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "For cards that link to destinations, one card can only link to one destination.\nNote: The link (`a` tag) will be applied to the heading, so if you don't have a `card-heading` prop, you will need to manually add the `a` tag in one of the slots provided."
                },
                "attribute": "href",
                "reflect": false
            },
            "target": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'_blank' | '_self' | '_parent' | '_top'",
                    "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "when href is present, `target` attribute to be applied to the card link"
                },
                "attribute": "target",
                "reflect": false
            },
            "flat": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Flat card without box-shadow"
                },
                "attribute": "flat",
                "reflect": false,
                "defaultValue": "false"
            },
            "border": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Show border on card"
                },
                "attribute": "border",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-card.js.map
