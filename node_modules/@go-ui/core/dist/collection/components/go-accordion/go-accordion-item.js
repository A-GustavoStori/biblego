import { Host, h } from "@stencil/core";
import { hasSlot } from "../../utils/helper";
import { uniqueId } from "lodash-es";
export class GoAccordionItem {
    constructor() {
        this.heading = null;
        this.headingTag = 'h3';
        this.autoHeight = true;
        this.active = false;
        this.hasHeadingSlot = true;
        this.hasArrowSlot = true;
    }
    componentWillLoad() {
        this.hasHeadingSlot = hasSlot(this.el, 'heading');
        this.hasArrowSlot = hasSlot(this.el, 'arrow');
        this.panelId = uniqueId('go-accordion-item-panel-');
        this.headerId = uniqueId('go-accordion-item-header-');
        this.parentGroup = this.el.closest('go-accordion');
    }
    componentDidLoad() {
        if (this.autoHeight) {
            this.panelEl.style.setProperty('--body-max-height', this.panelEl.scrollHeight + 2 + 'px');
        }
        this.onTransitionEnd();
        this.panelEl.addEventListener('transitionstart', () => {
            this.onTransitionStart();
        });
        this.panelEl.addEventListener('transitionend', () => {
            this.onTransitionEnd();
        });
    }
    handleNavigation(key) {
        if (key === 'ArrowDown') {
            if (this.el.nextElementSibling) {
                this.el.nextElementSibling.focusOnControl();
            }
        }
        if (key === 'ArrowUp') {
            if (this.el.previousElementSibling) {
                this.el.previousElementSibling.focusOnControl();
            }
        }
        if (key === 'Home') {
            this.parentGroup.children[0].focusOnControl();
        }
        if (key === 'End') {
            this.parentGroup.children[this.parentGroup.children.length - 1].focusOnControl();
        }
    }
    onTransitionEnd() {
        if (this.active) {
            this.panelEl.style.overflow = 'auto';
            this.opened.emit();
        }
        else {
            this.panelEl.style.overflow = 'hidden';
            this.panelEl.style.visibility = 'hidden';
            this.closed.emit();
        }
    }
    onTransitionStart() {
        if (this.active) {
            this.panelEl.style.visibility = 'visible';
            this.opening.emit();
        }
        else {
            this.closing.emit();
        }
    }
    /**
     * Toggle open state of accordion item
     */
    async toggle() {
        if (this.active) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * Closes the accordion item
     */
    async close() {
        this.active = false;
    }
    /**
     * Opens the accordion item.
     */
    async open() {
        this.active = true;
    }
    /**
     * Focus on header control
     */
    async focusOnControl() {
        this.el.querySelector('.heading-control').focus();
    }
    render() {
        const { active, autoHeight, headingTag: HeadingTag, panelId, headerId } = this;
        return (h(Host, { key: 'db8835f77b47c63a9051cb25d362212f99c979d6', class: { active, autoHeight } }, h(HeadingTag, { key: '5d91fd9a07e6a9e40a99db791893b2e715c87c8a', class: "heading" }, h("button", { key: 'c847b8111ad0dc4fd75c46f4052db39a9824a702', id: headerId, class: "heading-control", role: "button", onClick: () => this.toggle(), onKeyDown: (e) => this.handleNavigation(e.key), "aria-expanded": active ? 'true' : 'false', "aria-controls": panelId }, this.hasHeadingSlot ? h("slot", { name: "heading" }) : this.heading, h("span", { key: '17349f5250abcf10b9224a769aee6c47b3165e06', class: "arrow" }, this.hasArrowSlot ? (h("slot", { name: "arrow" })) : (h("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24", "aria-hidden": "true", focusable: "false" }, h("path", { d: "m6 9 6 6 6-6" })))))), h("div", { key: '0e760334919eddb587b32ac1032cfa7b081e43fd', class: "panel-wrapper", role: "region", id: panelId, "aria-labelledby": headerId, ref: (el) => (this.panelEl = el) }, h("div", { key: '34b8ec7e058876ae8c56843ffc5f297eb8d27c7d', class: "panel" }, h("slot", { key: 'ca9cd9b386a52105a460e0e285e1ac88050d2557' })))));
    }
    static get is() { return "go-accordion-item"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-accordion-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-accordion-item.css"]
        };
    }
    static get properties() {
        return {
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Heading text.\nThis can be overwritten by `heading` slot"
                },
                "attribute": "heading",
                "reflect": false,
                "defaultValue": "null"
            },
            "headingTag": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The HTML tag to be applied to the heading text.\nThis can be overwritten by `heading` slot"
                },
                "attribute": "heading-tag",
                "reflect": false,
                "defaultValue": "'h3'"
            },
            "autoHeight": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If expanded height should be automatically calculated. If true, the `--go-accordion-item-body-max-height` CSS variable will be set automatically to the content height"
                },
                "attribute": "auto-height",
                "reflect": false,
                "defaultValue": "true"
            },
            "active": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If the accordion item should be opened by default"
                },
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "hasHeadingSlot": {},
            "hasArrowSlot": {}
        };
    }
    static get events() {
        return [{
                "method": "opened",
                "name": "opened",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when accordion item has opened"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "opening",
                "name": "opening",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when accordion item started opening"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "closed",
                "name": "closed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when accordion item has closed"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "closing",
                "name": "closing",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when accordion item started closing"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "toggle": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Toggle open state of accordion item",
                    "tags": []
                }
            },
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Closes the accordion item",
                    "tags": []
                }
            },
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Opens the accordion item.",
                    "tags": []
                }
            },
            "focusOnControl": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus on header control",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-accordion-item.js.map
