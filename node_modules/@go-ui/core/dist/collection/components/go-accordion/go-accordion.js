import { Host, h } from "@stencil/core";
import { selectDirectChildren } from "../../utils/helper";
/**
 *
 */
export class GoAccordion {
    constructor() {
        this.multiple = false;
    }
    componentWillLoad() {
        this.items = Array.from(this.el.children);
    }
    componentDidLoad() {
        // if there's any active accordion item, show them by default and close the rest.
        if (!this.multiple) {
            this.activeItem = selectDirectChildren(this.el, 'go-accordion-item[active]')[0];
            if (this.activeItem) {
                this.activeItem.open();
            }
            this.closeNonActive();
        }
    }
    openHandler(e) {
        e.stopPropagation();
        const eventTarget = e.target;
        if (!this.multiple) {
            this.activeItem = eventTarget;
            this.closeNonActive();
        }
    }
    closeNonActive() {
        this.items.forEach((item) => {
            if (!item.isSameNode(this.activeItem)) {
                item.close();
            }
        });
    }
    render() {
        return (h(Host, { key: '3ac7b78f920fe5f4ec3e9c9374a2fe9eb554d168' }, h("slot", { key: '3eeee3015929d1e851905a0f4ef6d75cb726191b' })));
    }
    static get is() { return "go-accordion"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-accordion.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-accordion.css"]
        };
    }
    static get properties() {
        return {
            "multiple": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If true, multiple `<go-accordion-item>`s can be opened at the same time"
                },
                "attribute": "multiple",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "opened",
                "method": "openHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=go-accordion.js.map
