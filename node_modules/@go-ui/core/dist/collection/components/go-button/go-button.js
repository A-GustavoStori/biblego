import { h, Host } from "@stencil/core";
import { $attrs, warning } from "../../utils/helper";
/**
 * @slot default - Button text
 * @slot prefix - Use this slot to prepend content to the button.
 * @slot suffix - Use this slot to append content to the button.
 */
export class GoButton {
    constructor() {
        this.nativeEl = null;
        this.type = 'button';
        this.disabled = null;
        this.variant = 'neutral';
        this.block = undefined;
        this.outline = false;
        this.outlineFill = false;
        this.flat = false;
        this.round = false;
        this.icon = false;
        this.stack = false;
        this.compact = false;
        this.href = undefined;
        this.loading = false;
        this.loadingAnouncement = 'Loading';
        this.blockClasses = undefined;
        this.inheritedAttributes = {};
    }
    componentWillLoad() {
        // a11y check
        if (this.icon) {
            if (!this.el.hasAttribute('aria-label') && !this.el.hasAttribute('aria-labelledby')) {
                warning(`go-button with icon must have either aria-label or aria-labelledby attribute`, this.el);
            }
        }
        if (this.block) {
            this.handleBlockChange(this.block);
        }
        this.updateInnerButtonAttributes();
    }
    updateInnerButtonAttributes() {
        this.inheritedAttributes = Object.assign({}, $attrs.bind(this)());
    }
    handleBlockChange(block) {
        this.blockClasses = typeof block !== 'undefined' ? `block-${block}` : '';
    }
    render() {
        const { type, disabled, variant, blockClasses, outline, outlineFill, inheritedAttributes, href, loading, loadingAnouncement, } = this;
        const Tag = href ? 'a' : 'button';
        const rootClasses = `${variant} ${blockClasses}`;
        return (h(Host, { key: 'd576c9b1b247d00a45ba31398026f58fba47a1c7', class: {
                [rootClasses]: true,
                outline,
                'outline outline-fill': outlineFill,
            } }, h(Tag, Object.assign({ key: '6483cc7a4f95a7d5747e60c2041a40d85276b470', ref: (el) => {
                this.nativeEl = el;
            }, href: href ? href : null, type: href ? null : type, "aria-disabled": disabled ? 'true' : null, disabled: disabled ? 'true' : null, class: "inner-button", "aria-busy": loading ? 'true' : null }, inheritedAttributes), h("go-spinner", { key: 'a42682d6643e9c729bd813d151d00c5e2147c924', loading: loading, loadingAnnouncement: loadingAnouncement }), h("slot", { key: 'd680216f9af9576e5ac1d092249defbbabc1aa79', name: "prefix" }), h("span", { key: '6d2a89fb1c3eb0bc0d4ae8b1ce615435507587f1', class: "btn-text" }, h("slot", { key: 'ccec91661523e0e7eb53ac68cb242cf240e9d7e1' })), h("slot", { key: 'b89c2277b3c99ad9f8d9614ec0ae603ff2411edd', name: "suffix" }))));
    }
    static get is() { return "go-button"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-button.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-button.css"]
        };
    }
    static get properties() {
        return {
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'submit' | 'reset' | 'button'",
                    "resolved": "\"button\" | \"reset\" | \"submit\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Html type of the button"
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'button'"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If this button is disabled"
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "null"
            },
            "variant": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ColorVariants | 'text'",
                    "resolved": "\"critical\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"text\"",
                    "references": {
                        "ColorVariants": {
                            "location": "import",
                            "path": "../../interfaces",
                            "id": "src/interfaces/index.ts::ColorVariants"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Button variants"
                },
                "attribute": "variant",
                "reflect": true,
                "defaultValue": "'neutral'"
            },
            "block": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Breakpoints",
                    "resolved": "\"all\" | \"desktop\" | \"large\" | \"mobile\" | \"tablet\"",
                    "references": {
                        "Breakpoints": {
                            "location": "import",
                            "path": "../../interfaces",
                            "id": "src/interfaces/index.ts::Breakpoints"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If set, the button will take up the full width of its parent\nIf block=\"{breakpoint}\" is set, the button will take up the full width for the specified breakpoint. e.g. a `block=\"mobile\"` button will display full width on mobile devices.\nIf block=\"all\", the button will take full width on all devices."
                },
                "attribute": "block",
                "reflect": true
            },
            "outline": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "see",
                            "text": " `variant` property"
                        }],
                    "text": "If `outline` is true, the button will have a border based on selected variant"
                },
                "attribute": "outline",
                "reflect": true,
                "defaultValue": "false"
            },
            "outlineFill": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Outline style with filled background"
                },
                "attribute": "outline-fill",
                "reflect": true,
                "defaultValue": "false"
            },
            "flat": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant"
                },
                "attribute": "flat",
                "reflect": true,
                "defaultValue": "false"
            },
            "round": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If button should have pill-shaped corners"
                },
                "attribute": "round",
                "reflect": true,
                "defaultValue": "false"
            },
            "icon": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Circle shaped icon only button that has min size of 40px for touch devices"
                },
                "attribute": "icon",
                "reflect": true,
                "defaultValue": "false"
            },
            "stack": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Stack elements inside the button"
                },
                "attribute": "stack",
                "reflect": true,
                "defaultValue": "false"
            },
            "compact": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Reduce inner gaps and outer paddings"
                },
                "attribute": "compact",
                "reflect": true,
                "defaultValue": "false"
            },
            "href": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If the button has an href, it will be rendered as an anchor tag"
                },
                "attribute": "href",
                "reflect": false
            },
            "loading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If the button is loading"
                },
                "attribute": "loading",
                "reflect": false,
                "defaultValue": "false"
            },
            "loadingAnouncement": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Screen reader announcement for loading state"
                },
                "attribute": "loading-anouncement",
                "reflect": false,
                "defaultValue": "'Loading'"
            }
        };
    }
    static get states() {
        return {
            "blockClasses": {},
            "inheritedAttributes": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "block",
                "methodName": "handleBlockChange"
            }];
    }
}
//# sourceMappingURL=go-button.js.map
