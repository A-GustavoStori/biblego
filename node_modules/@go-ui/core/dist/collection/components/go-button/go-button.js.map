{"version":3,"file":"go-button.js","sourceRoot":"","sources":["../../../src/components/go-button/go-button.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Prop, Element, Host, Watch, State } from '@stencil/core';\nimport { Breakpoints, ColorVariants } from '../../interfaces';\nimport { $attrs, warning } from '../../utils/helper';\n\n/**\n * @slot default - Button text\n * @slot prefix - Use this slot to prepend content to the button.\n * @slot suffix - Use this slot to append content to the button.\n */\n@Component({\n  tag: 'go-button',\n  styleUrl: 'go-button.scss',\n  shadow: false,\n})\nexport class GoButton {\n  @Element() el: HTMLElement;\n\n  /**\n   * Html type of the button\n   */\n  @Prop() type: 'submit' | 'reset' | 'button' = 'button';\n\n  /**\n   * If this button is disabled\n   */\n  @Prop({ reflect: true }) disabled?: boolean = null;\n\n  /**\n   * Button variants\n   */\n  @Prop({ reflect: true }) variant?: ColorVariants | 'text' = 'neutral';\n\n  /**\n   * If set, the button will take up the full width of its parent\n   * If block=\"{breakpoint}\" is set, the button will take up the full width for the specified breakpoint. e.g. a `block=\"mobile\"` button will display full width on mobile devices.\n   * If block=\"all\", the button will take full width on all devices.\n   */\n  @Prop({ reflect: true }) block?: Breakpoints;\n\n  /**\n   * If `outline` is true, the button will have a border based on selected variant\n   * @see `variant` property\n   */\n  @Prop({ reflect: true }) outline?: boolean = false;\n\n  /**\n   * Outline style with filled background\n   */\n  @Prop({ reflect: true }) outlineFill?: boolean = false;\n\n  /**\n   * If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant\n   */\n  @Prop({ reflect: true }) flat?: boolean = false;\n\n  /**\n   * If button should have pill-shaped corners\n   */\n  @Prop({ reflect: true }) round?: boolean = false;\n\n  /**\n   * Circle shaped icon only button that has min size of 40px for touch devices\n   */\n  @Prop({ reflect: true }) icon?: boolean = false;\n\n  /**\n   * Stack elements inside the button\n   */\n  @Prop({ reflect: true }) stack?: boolean = false;\n\n  /**\n   * Reduce inner gaps and outer paddings\n   */\n  @Prop({ reflect: true }) compact?: boolean = false;\n\n  /**\n   * If the button has an href, it will be rendered as an anchor tag\n   */\n  @Prop() href?: string;\n\n  /**\n   * If the button is loading\n   */\n  @Prop() loading: boolean = false;\n\n  /**\n   * Screen reader announcement for loading state\n   */\n  @Prop() loadingAnouncement?: string = 'Loading';\n\n  @State() blockClasses: string;\n\n  @State() inheritedAttributes = {} as any;\n\n  public nativeEl: HTMLElement = null;\n\n  componentWillLoad() {\n    // a11y check\n    if (this.icon) {\n      if (!this.el.hasAttribute('aria-label') && !this.el.hasAttribute('aria-labelledby')) {\n        warning(`go-button with icon must have either aria-label or aria-labelledby attribute`, this.el);\n      }\n    }\n\n    if (this.block) {\n      this.handleBlockChange(this.block);\n    }\n    this.updateInnerButtonAttributes();\n  }\n  updateInnerButtonAttributes() {\n    this.inheritedAttributes = {\n      ...$attrs.bind(this)(),\n    };\n  }\n\n  @Watch('block')\n  handleBlockChange(block: Breakpoints) {\n    this.blockClasses = typeof block !== 'undefined' ? `block-${block}` : '';\n  }\n\n  render() {\n    const {\n      type,\n      disabled,\n      variant,\n      blockClasses,\n      outline,\n      outlineFill,\n      inheritedAttributes,\n      href,\n      loading,\n      loadingAnouncement,\n    } = this;\n    const Tag = href ? 'a' : 'button';\n    const rootClasses = `${variant} ${blockClasses}`;\n    return (\n      <Host\n        class={{\n          [rootClasses]: true,\n          outline,\n          'outline outline-fill': outlineFill,\n        }}>\n        <Tag\n          ref={(el) => {\n            this.nativeEl = el;\n          }}\n          href={href ? href : null}\n          type={href ? null : type}\n          aria-disabled={disabled ? 'true' : null}\n          disabled={disabled ? 'true' : null}\n          class=\"inner-button\"\n          aria-busy={loading ? 'true' : null}\n          {...inheritedAttributes}>\n          <go-spinner loading={loading} loadingAnnouncement={loadingAnouncement}></go-spinner>\n          <slot name=\"prefix\"></slot>\n          <span class=\"btn-text\">\n            <slot></slot>\n          </span>\n          <slot name=\"suffix\"></slot>\n        </Tag>\n      </Host>\n    );\n  }\n}\n"]}