import { Host, h } from "@stencil/core";
import { disableBodyScroll, enableBodyScroll } from "body-scroll-lock";
import { inheritAttributes } from "../../utils/helper";
import { trapFocus } from "../../utils";
export class GoOverlay {
    constructor() {
        // Store attributes inherited from the host element
        this.inheritedAttrs = {};
        this.active = false;
        this.persistent = false;
    }
    componentWillLoad() {
        this.inheritedAttrs = inheritAttributes(this.el, ['class', 'style'], false);
        // move this.el to the end of the body
        const body = document.querySelector('body');
        body.appendChild(this.el);
    }
    componentDidLoad() {
        // close overlay on click outside
        if (!this.persistent) {
            this.el.addEventListener('click', (e) => {
                if (this.active) {
                    if (e.target === this.bgEl) {
                        e.preventDefault();
                        this.close();
                    }
                }
            });
        }
    }
    async close() {
        var _a;
        this.closeEvent.emit();
        enableBodyScroll(this.el);
        this.active = false;
        (_a = this.originator) === null || _a === void 0 ? void 0 : _a.focus();
        this.el.style.visibility = 'hidden';
    }
    async open() {
        this.originator = document.activeElement;
        this.openEvent.emit();
        disableBodyScroll(this.el);
        this.el.style.visibility = 'visible';
        this.active = true;
        // close overlay on escape
        if (!this.persistent) {
            document.addEventListener('keydown', (e) => {
                if (this.active) {
                    if (e.code === 'Escape') {
                        this.close();
                    }
                }
            });
        }
        trapFocus(this.el);
    }
    watchActiveHandler(newValue) {
        if (newValue) {
            this.open();
            return;
        }
        this.close();
    }
    render() {
        const { active, inheritedAttrs } = this;
        return (h(Host, Object.assign({ key: '40487b7dc4613247374351d9717a839b57134fee', class: { active } }, inheritedAttrs), h("div", { key: 'd987d6c1d03f40bde84eb192f45c994cf0ff0231', class: "overlay-bg", ref: (el) => (this.bgEl = el) }), h("div", { key: '101a5b3e63036d99086a31a44e8ab2b86282839d', class: "overlay-content" }, h("slot", { key: 'ca4041cc9384f00650321c3364e69b30bb946e95' }))));
    }
    static get is() { return "go-overlay"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-overlay.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-overlay.css"]
        };
    }
    static get properties() {
        return {
            "active": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            },
            "persistent": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key."
                },
                "attribute": "persistent",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "openEvent",
                "name": "overlayOpen",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the overlay is opened"
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "closeEvent",
                "name": "overlayClose",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the overlay is closed"
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        },
                        "KeyboardEvent": {
                            "location": "global",
                            "id": "global::KeyboardEvent"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "active",
                "methodName": "watchActiveHandler"
            }];
    }
}
//# sourceMappingURL=go-overlay.js.map
