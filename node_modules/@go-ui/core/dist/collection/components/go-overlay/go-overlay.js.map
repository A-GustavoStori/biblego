{"version":3,"file":"go-overlay.js","sourceRoot":"","sources":["../../../src/components/go-overlay/go-overlay.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Element, Prop, Method, Event, EventEmitter, Watch } from '@stencil/core';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\nimport { inheritAttributes } from '../../utils/helper';\nimport { trapFocus } from '../../utils';\n\n@Component({\n  tag: 'go-overlay',\n  styleUrl: 'go-overlay.scss',\n  shadow: false,\n})\nexport class GoOverlay {\n  @Element() el: HTMLElement;\n\n  @Prop({ reflect: true, mutable: true }) active: boolean = false;\n\n  /**\n   * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.\n   */\n  @Prop() persistent: boolean = false;\n\n  // keep track of the element that triggered the overlay\n  originator: HTMLElement;\n\n  // for detecting click outside\n  bgEl: HTMLElement;\n\n  // Store attributes inherited from the host element\n  private inheritedAttrs = {};\n  componentWillLoad() {\n    this.inheritedAttrs = inheritAttributes(this.el, ['class', 'style'], false);\n    // move this.el to the end of the body\n    const body = document.querySelector('body');\n    body.appendChild(this.el);\n  }\n\n  componentDidLoad() {\n    // close overlay on click outside\n    if (!this.persistent) {\n      this.el.addEventListener('click', (e: MouseEvent) => {\n        if (this.active) {\n          if (e.target === this.bgEl) {\n            e.preventDefault();\n            this.close();\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Emitted when the overlay is opened\n   */\n  @Event({\n    eventName: 'overlayOpen',\n    cancelable: true,\n    bubbles: true,\n  })\n  openEvent: EventEmitter<void>;\n\n  /**\n   * Emitted when the overlay is closed\n   */\n  @Event({\n    eventName: 'overlayClose',\n    cancelable: true,\n    bubbles: true,\n  })\n  closeEvent: EventEmitter<void>;\n\n  @Method()\n  async close() {\n    this.closeEvent.emit();\n    enableBodyScroll(this.el);\n    this.active = false;\n    this.originator?.focus();\n    this.el.style.visibility = 'hidden';\n  }\n\n  @Method()\n  async open() {\n    this.originator = document.activeElement as HTMLElement;\n    this.openEvent.emit();\n    disableBodyScroll(this.el);\n    this.el.style.visibility = 'visible';\n    this.active = true;\n    // close overlay on escape\n    if (!this.persistent) {\n      document.addEventListener('keydown', (e: KeyboardEvent) => {\n        if (this.active) {\n          if (e.code === 'Escape') {\n            this.close();\n          }\n        }\n      });\n    }\n\n    trapFocus(this.el);\n  }\n\n  @Watch('active')\n  watchActiveHandler(newValue: boolean): void {\n    if (newValue) {\n      this.open();\n      return;\n    }\n    this.close();\n  }\n\n  render() {\n    const { active, inheritedAttrs } = this;\n    return (\n      <Host class={{ active }} {...inheritedAttrs}>\n        <div class=\"overlay-bg\" ref={(el) => (this.bgEl = el)}></div>\n        <div class=\"overlay-content\">\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}