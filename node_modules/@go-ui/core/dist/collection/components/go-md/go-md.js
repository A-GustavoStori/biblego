import { Host, h } from "@stencil/core";
import MarkdownIt from "markdown-it";
import DOMPurify from "dompurify";
import JSON5 from "json5";
import { goUiPlugin } from "../../utils/go-ui-md-plugin";
export class GoMd {
    constructor() {
        this.inline = false;
        this.content = undefined;
        this.src = undefined;
        this.mdOptions = undefined;
        this.sanitise = false;
        this.useGoUi = false;
    }
    createMdInstance() {
        const { mdOptions, useGoUi } = this;
        let options = null;
        if (typeof mdOptions === 'string') {
            try {
                options = JSON5.parse(mdOptions);
            }
            catch (e) {
                console.error('Could not parse md-options, using default.', e);
            }
        }
        if (useGoUi) {
            options = {
                linkify: true,
            };
        }
        this.md = new MarkdownIt(options);
        // emit initialise event
        this.init.emit(this.md);
    }
    async initialiseRenderer() {
        if (!this.md) {
            this.createMdInstance();
        }
        if (this.useGoUi) {
            this.md.use(goUiPlugin);
        }
    }
    /**
     * Get the rendered HTML
     * @returns output html
     */
    async getRenderedContent(input) {
        if (!input) {
            return '';
        }
        await this.initialiseRenderer();
        let output = '';
        // get html output
        if (this.inline) {
            output = this.md.renderInline(input);
        }
        else {
            output = this.md.render(input);
        }
        // sanitise if needed
        if (this.sanitise) {
            output = DOMPurify.sanitize(output);
        }
        return output;
    }
    async renderSrc() {
        // try fetching remote markdown content from this.src
        const response = await fetch(this.src);
        if (response.ok) {
            const data = await response.text();
            this.content = data;
        }
    }
    async renderContent() {
        this.el.innerHTML = await this.getRenderedContent(this.content);
        this.rendered.emit(this.md);
    }
    async componentWillLoad() {
        await this.initialiseRenderer();
        if (this.src) {
            await this.renderSrc();
            return;
        }
        this.renderContent();
    }
    async handleSrcChange() {
        await this.renderSrc();
    }
    async handleContentChange() {
        this.renderContent();
    }
    async handleMdOptionsChange() {
        this.createMdInstance();
    }
    render() {
        return (h(Host, { key: '30593d0b0d9324a746c9357360816d8b0ffc982f' }, h("slot", { key: 'e2e396b73b6aaec2f7b478204b8338d63bb9692d' })));
    }
    static get is() { return "go-md"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-md.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-md.css"]
        };
    }
    static get properties() {
        return {
            "inline": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Render inline markdown"
                },
                "attribute": "inline",
                "reflect": false,
                "defaultValue": "false"
            },
            "content": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Markdown content to be rendered"
                },
                "attribute": "content",
                "reflect": false
            },
            "src": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "url to load remote markdown content\nif `src` is set, content in the `content` prop will be overwritten"
                },
                "attribute": "src",
                "reflect": false
            },
            "mdOptions": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Options | string",
                    "resolved": "Options | string",
                    "references": {
                        "Options": {
                            "location": "import",
                            "path": "markdown-it",
                            "id": "../../node_modules/.pnpm/@types+markdown-it@12.2.3/node_modules/@types/markdown-it/index.d.ts::Options"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "[markdown-it](https://github.com/markdown-it/markdown-it) options\n**Note**: if `use-go-ui` is set to true, these options will be overwritten"
                },
                "attribute": "md-options",
                "reflect": false
            },
            "sanitise": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If set to true, `go-md` will use [DOMPurify](https://nodei.co/npm/dompurify/) to sanitise the output HTML before inserting it into the DOM"
                },
                "attribute": "sanitise",
                "reflect": false,
                "defaultValue": "false"
            },
            "useGoUi": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Use go-ui markdown renderer:\n- Only `typographer` is enabled in markdown-it options\n\n- linkify with [`go-link`](https://go-ui.com/docs/components/go-link)\n- [container](https://github.com/markdown-it/markdown-it-container) banners with [`go-banner`](https://go-ui.com/docs/components/go-banner)"
                },
                "attribute": "use-go-ui",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "init",
                "name": "init",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "rendered",
                "name": "rendered",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "src",
                "methodName": "handleSrcChange"
            }, {
                "propName": "content",
                "methodName": "handleContentChange"
            }, {
                "propName": "mdOptions",
                "methodName": "handleMdOptionsChange"
            }];
    }
}
//# sourceMappingURL=go-md.js.map
