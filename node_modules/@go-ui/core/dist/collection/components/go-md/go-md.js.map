{"version":3,"file":"go-md.js","sourceRoot":"","sources":["../../../src/components/go-md/go-md.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Element, Prop, Watch, Event, EventEmitter } from '@stencil/core';\nimport MarkdownIt, { Options } from 'markdown-it';\nimport DOMPurify from 'dompurify';\nimport JSON5 from 'json5';\nimport { goUiPlugin } from '../../utils/go-ui-md-plugin';\n@Component({\n  tag: 'go-md',\n  styleUrl: 'go-md.scss',\n  shadow: false,\n})\nexport class GoMd {\n  @Element() el: HTMLElement;\n\n  /**\n   * Render inline markdown\n   */\n  @Prop() inline?: boolean = false;\n\n  /**\n   * Markdown content to be rendered\n   */\n  @Prop({ mutable: true }) content: string;\n\n  /**\n   * url to load remote markdown content\n   * if `src` is set, content in the `content` prop will be overwritten\n   */\n  @Prop() src: string;\n\n  /**\n   * [markdown-it](https://github.com/markdown-it/markdown-it) options\n   * **Note**: if `use-go-ui` is set to true, these options will be overwritten\n   */\n  @Prop() mdOptions?: Options | string;\n\n  /**\n   * If set to true, `go-md` will use [DOMPurify](https://nodei.co/npm/dompurify/) to sanitise the output HTML before inserting it into the DOM\n   */\n  @Prop() sanitise?: boolean = false;\n\n  /**\n   * Use go-ui markdown renderer:\n   * - Only `typographer` is enabled in markdown-it options\n   *\n   * - linkify with [`go-link`](https://go-ui.com/docs/components/go-link)\n   * - [container](https://github.com/markdown-it/markdown-it-container) banners with [`go-banner`](https://go-ui.com/docs/components/go-banner)\n   */\n  @Prop() useGoUi?: boolean = false;\n\n  @Event() init: EventEmitter;\n\n  @Event() rendered: EventEmitter;\n\n  private md: MarkdownIt;\n\n  private createMdInstance(): void {\n    const { mdOptions, useGoUi } = this;\n    let options: Options = null;\n    if (typeof mdOptions === 'string') {\n      try {\n        options = JSON5.parse(mdOptions);\n      } catch (e) {\n        console.error('Could not parse md-options, using default.', e);\n      }\n    }\n\n    if (useGoUi) {\n      options = {\n        linkify: true,\n      };\n    }\n\n    this.md = new MarkdownIt(options);\n\n    // emit initialise event\n    this.init.emit(this.md);\n  }\n\n  private async initialiseRenderer() {\n    if (!this.md) {\n      this.createMdInstance();\n    }\n    if (this.useGoUi) {\n      this.md.use(goUiPlugin);\n    }\n  }\n\n  /**\n   * Get the rendered HTML\n   * @returns output html\n   */\n  async getRenderedContent(input?: string): Promise<string> {\n    if (!input) {\n      return '';\n    }\n    await this.initialiseRenderer();\n\n    let output = '';\n\n    // get html output\n    if (this.inline) {\n      output = this.md.renderInline(input);\n    } else {\n      output = this.md.render(input);\n    }\n    // sanitise if needed\n    if (this.sanitise) {\n      output = DOMPurify.sanitize(output);\n    }\n\n    return output;\n  }\n\n  async renderSrc() {\n    // try fetching remote markdown content from this.src\n    const response = await fetch(this.src);\n    if (response.ok) {\n      const data = await response.text();\n      this.content = data;\n    }\n  }\n\n  async renderContent() {\n    this.el.innerHTML = await this.getRenderedContent(this.content);\n    this.rendered.emit(this.md);\n  }\n\n  async componentWillLoad() {\n    await this.initialiseRenderer();\n    if (this.src) {\n      await this.renderSrc();\n      return;\n    }\n    this.renderContent();\n  }\n\n  @Watch('src')\n  async handleSrcChange() {\n    await this.renderSrc();\n  }\n\n  @Watch('content')\n  async handleContentChange() {\n    this.renderContent();\n  }\n\n  @Watch('mdOptions')\n  async handleMdOptionsChange() {\n    this.createMdInstance();\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"]}