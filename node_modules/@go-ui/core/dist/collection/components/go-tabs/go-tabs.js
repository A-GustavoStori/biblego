import { Host, h } from "@stencil/core";
import { uniqueId } from "lodash-es";
import { moveEl } from "../../utils/index";
export class GoTabs {
    constructor() {
        this.activeIndex = -1;
        this.tabs = [];
        this.panels = [];
        this.tabGroupLabel = undefined;
        this.vertical = false;
        this.auto = false;
        this.justify = 'normal';
        this.fill = false;
        this.tabChildren = [];
        this.activeTabRect = undefined;
    }
    componentWillLoad() {
        this.initialiseTabChildren();
    }
    initIconSlot(goTab, slotName) {
        const iconEl = goTab.querySelector(`[slot="${slotName}"]`);
        if (!iconEl) {
            return;
        }
        let iconSlot = null;
        iconSlot = document.createElement('span');
        iconSlot.setAttribute('aria-hidden', 'true'); // icons are decorative only
        iconSlot.classList.add(`go-tab-${slotName}`);
        iconEl.removeAttribute('slot');
        moveEl(iconEl, iconSlot);
        return iconSlot;
    }
    initialiseTabChildren() {
        const children = Array.from(this.el.querySelectorAll('go-tab'));
        if (children.length === 0) {
            return;
        }
        this.tabChildren = children.map((goTab) => {
            if (!goTab.tabId) {
                const tId = uniqueId('tab-');
                goTab.tabId = tId;
            }
            if (!goTab.panelId) {
                const pId = goTab.tabId + '-panel';
                goTab.panelId = pId;
            }
            const iconSlot = this.initIconSlot(goTab, 'icon');
            const iconActiveSlot = this.initIconSlot(goTab, 'icon-active');
            const { tabId, panelId, label, active, iconPosition, iconOnly } = goTab;
            return {
                tabId,
                panelId,
                label,
                active,
                iconPosition,
                iconOnly,
                iconSlot,
                iconActiveSlot,
            };
        });
        this.panels = children;
        // if no active tab set, activate first tab
        const activeIndex = this.tabChildren.findIndex((tab) => tab.active);
        if (activeIndex === -1) {
            this.tabChildren = this.tabChildren.map((tab, i) => (Object.assign(Object.assign({}, tab), { active: i === 0 })));
            this.panels[0].active = true;
        }
    }
    activateTab(event) {
        var _a;
        const { index, tabEl } = event.detail;
        this.panels.forEach((panel, i) => {
            if (i === index) {
                panel.setActive(true);
            }
            else {
                panel.setActive(false);
            }
        });
        this.tabActivated.emit({
            index,
            tabEl,
            panelEl: (_a = this.panels[index]) !== null && _a !== void 0 ? _a : null,
        });
    }
    render() {
        const { tabChildren, tabGroupLabel, vertical, auto, fill, justify } = this;
        return (h(Host, { key: 'e69e67af320678701b952e4a3f6cd35205ee650c', class: { vertical } }, h("go-tablist", { key: '0d0562c981057a2d43a3cad45642e99bb0c082d2', items: tabChildren, label: tabGroupLabel, auto: auto, fill: fill, vertical: vertical, justify: justify, onActivated: (e) => this.activateTab(e) }), h("slot", { key: '2d2d6814888e37a4686429d3404447b43b33b890' })));
    }
    static get is() { return "go-tabs"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-tabs.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-tabs.css"]
        };
    }
    static get properties() {
        return {
            "tabGroupLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Provides a label that describes the purpose of the set of tabs."
                },
                "attribute": "tab-group-label",
                "reflect": false
            },
            "vertical": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Set tabs orientation to vertical"
                },
                "attribute": "vertical",
                "reflect": false,
                "defaultValue": "false"
            },
            "auto": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "By default, tabs require user interaction (by clicking or pressing the `Enter` or `Space` key) to be activated.\nif `auto` is true, tabs are automatically activated when they receive focus."
                },
                "attribute": "auto",
                "reflect": false,
                "defaultValue": "false"
            },
            "justify": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "JustifyOption",
                    "resolved": "\"around\" | \"between\" | \"center\" | \"end\" | \"evenly\" | \"normal\" | \"start\" | \"stretch\"",
                    "references": {
                        "JustifyOption": {
                            "location": "import",
                            "path": "./tabs.type",
                            "id": "src/components/go-tabs/tabs.type.ts::JustifyOption"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Applies justify-content property to tablist (horizontal only)\nie. `justify=\"between\"` applies `justify-content: space-between`"
                },
                "attribute": "justify",
                "reflect": false,
                "defaultValue": "'normal'"
            },
            "fill": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "fill available space (horizontal only)"
                },
                "attribute": "fill",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "tabChildren": {},
            "activeTabRect": {}
        };
    }
    static get events() {
        return [{
                "method": "tabActivated",
                "name": "tabactivated",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "param",
                            "text": "ActivatedTab , tabEl, panelEl}"
                        }],
                    "text": "Tab activated event"
                },
                "complexType": {
                    "original": "ActiveTabWithPanel",
                    "resolved": "ActiveTabWithPanel",
                    "references": {
                        "ActiveTabWithPanel": {
                            "location": "import",
                            "path": "./tabs.type",
                            "id": "src/components/go-tabs/tabs.type.ts::ActiveTabWithPanel"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-tabs.js.map
