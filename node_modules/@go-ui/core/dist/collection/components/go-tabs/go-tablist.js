import { h, Host } from "@stencil/core";
import { JUSTIFY_VALUES_MAP } from "./tabs.const";
export class GoTablist {
    constructor() {
        this.activeIndex = -1;
        this.tabEls = [];
        // Add or subtract depending on key pressed
        this.direction = {
            ArrowUp: -1,
            ArrowLeft: -1,
            ArrowDown: 1,
            ArrowRight: 1,
        };
        this.vertical = false;
        this.label = undefined;
        this.auto = false;
        this.bottom = false;
        this.fill = false;
        this.items = undefined;
        this.justify = 'normal';
        this.activeTabRect = undefined;
        this.tabsState = undefined;
    }
    componentWillLoad() {
        this.loadItemsState();
    }
    loadItemsState() {
        var _a;
        if (!((_a = this.items) === null || _a === void 0 ? void 0 : _a.length)) {
            return;
        }
        this.tabsState = [...this.items];
    }
    componentDidLoad() {
        var _a;
        if (!((_a = this.tabsState) === null || _a === void 0 ? void 0 : _a.length)) {
            return;
        }
        // load rect for indicator
        this.activeIndex = this.tabsState.findIndex((tab) => tab.active);
        requestAnimationFrame(() => {
            this.activeTabRect = this.tabEls[this.activeIndex].getBoundingClientRect();
            this.tabsState.forEach((tab, i) => {
                // add icon container
                if (!tab.iconSlot && !tab.iconActiveSlot) {
                    return;
                }
                const iconContainer = document.createElement('span');
                iconContainer.classList.add('go-tab-icon-slot');
                if (tab.iconSlot)
                    iconContainer.append(tab.iconSlot);
                if (tab.iconActiveSlot)
                    iconContainer.append(tab.iconActiveSlot);
                if (tab.iconPosition === 'before') {
                    this.tabEls[i].prepend(iconContainer);
                }
                if (tab.iconPosition === 'after') {
                    this.tabEls[i].append(iconContainer);
                }
            });
        });
    }
    deactivateTabs() {
        this.tabsState = this.tabsState.map((tab) => {
            return Object.assign(Object.assign({}, tab), { active: false });
        });
    }
    // Activates any given tab panel
    async activateTab(tabEl, setFocus = true, isOnload = false) {
        // if tab is already active, do nothing
        if (tabEl.getAttribute('aria-selected') === 'true' && isOnload) {
            // emit event
            this.activated.emit({
                index: this.activeIndex,
                tabEl,
            });
            return;
        }
        this.deactivateTabs();
        const tabId = tabEl.getAttribute('id');
        this.tabsState = this.tabsState.map((tab, i) => {
            if (tab.tabId === tabId) {
                this.activeIndex = i;
                return Object.assign(Object.assign({}, tab), { active: true });
            }
            return tab;
        });
        // Set focus when required
        if (setFocus) {
            tabEl.focus();
        }
        // emit event
        this.activated.emit({
            index: this.activeIndex,
            tabEl,
        });
        requestAnimationFrame(() => {
            this.activeTabRect = tabEl.getBoundingClientRect();
        });
    }
    // When a tab is clicked, activateTab is fired to activate it
    onTabClick(i) {
        this.activateTab(this.tabEls[i]);
    }
    // Focus on the first tab
    focusFirstTab() {
        this.tabEls[0].focus();
    }
    // Focus on the last tab
    focusLastTab() {
        this.tabEls[this.tabEls.length - 1].focus();
    }
    activateFirstTab() {
        this.activateTab(this.tabEls[0]);
    }
    activateLastTab() {
        this.activateTab(this.tabEls[this.tabEls.length - 1]);
    }
    /**********************************
     * Keyboard support
     ***********************************/
    onKeydown(event) {
        const key = event.code;
        switch (key) {
            case 'End':
                event.preventDefault();
                // Activate last tab
                if (!this.auto) {
                    this.focusLastTab();
                }
                else {
                    this.activateLastTab();
                }
                break;
            case 'Home':
                event.preventDefault();
                // Activate first tab
                if (!this.auto) {
                    this.focusFirstTab();
                }
                else {
                    this.activateFirstTab();
                }
                break;
            // Up and down are in keydown
            // because we need to prevent page scroll >:)
            case 'ArrowUp':
            case 'ArrowDown':
                if (this.vertical) {
                    event.preventDefault();
                    this.switchTabOnArrowPress(event);
                }
                break;
            case 'ArrowLeft':
            case 'ArrowRight':
                event.preventDefault();
                this.switchTabOnArrowPress(event);
                break;
        }
    }
    // Either focus the next, previous, first, or last tab
    // depending on key pressed
    switchTabOnArrowPress(event) {
        var pressed = event.code;
        const currentIndex = this.tabEls.findIndex((tab) => event.target.isSameNode(tab));
        if (this.direction[pressed] && currentIndex !== -1) {
            const targetIndex = currentIndex + this.direction[pressed];
            if (this.tabEls[targetIndex]) {
                if (!this.auto) {
                    this.tabEls[targetIndex].focus();
                    return;
                }
                this.activateTab(this.tabEls[targetIndex]);
                return;
            }
            // target index out of range
            if (pressed === 'ArrowLeft' || pressed === 'ArrowUp') {
                if (!this.auto) {
                    this.focusLastTab();
                    return;
                }
                this.activateLastTab();
                return;
            }
            if (pressed === 'ArrowRight' || pressed == 'ArrowDown') {
                if (!this.auto) {
                    this.focusFirstTab();
                    return;
                }
                this.activateFirstTab();
                return;
            }
        }
    }
    render() {
        const { label, tabsState, vertical, tablistEl, activeTabRect, justify, fill } = this;
        const tablistScrollLeft = (tablistEl === null || tablistEl === void 0 ? void 0 : tablistEl.scrollLeft) || 0;
        const tablistScrollTop = (tablistEl === null || tablistEl === void 0 ? void 0 : tablistEl.scrollTop) || 0;
        const tablistRect = tablistEl === null || tablistEl === void 0 ? void 0 : tablistEl.getBoundingClientRect();
        const activeOffsetLeft = tablistScrollLeft - (tablistRect === null || tablistRect === void 0 ? void 0 : tablistRect.left) || 0;
        const activeOffsetTop = tablistScrollTop - (tablistRect === null || tablistRect === void 0 ? void 0 : tablistRect.top) || 0;
        return (h(Host, { key: 'a0cf0f48424e888c2acd327f0fe8cba77ec2edc4', class: { vertical, fill }, style: vertical
                ? {
                    '--tabs-active-indicator-top': `${(activeTabRect === null || activeTabRect === void 0 ? void 0 : activeTabRect.top) + activeOffsetTop || 0}px`,
                    '--tabs-active-indicator-height': `${(activeTabRect === null || activeTabRect === void 0 ? void 0 : activeTabRect.height) || 0}px`,
                }
                : {
                    '--tabs-active-indicator-left': `${(activeTabRect === null || activeTabRect === void 0 ? void 0 : activeTabRect.left) + activeOffsetLeft || 0}px`,
                    '--tabs-active-indicator-width': `${(activeTabRect === null || activeTabRect === void 0 ? void 0 : activeTabRect.width) || 0}px`,
                } }, h("div", { key: '23489fad7ad487664e3d6c6068b4d6fc52406a58', role: "tablist", ref: (el) => (this.tablistEl = el), "aria-label": label, "aria-orientation": vertical ? 'vertical' : undefined, style: { 'justify-content': JUSTIFY_VALUES_MAP[justify] } }, tabsState
            ? tabsState.map((tab, index) => {
                return (h("button", { type: "button", role: "tab", "aria-selected": tab.active ? 'true' : 'false', tabindex: tab.active ? undefined : '-1', "aria-controls": tab.panelId, id: tab.tabId, onClick: () => this.onTabClick(index), onKeyDown: (e) => this.onKeydown(e), key: index, class: {
                        'active': tab.active,
                        'has-active-icon': !!tab.iconActiveSlot,
                    }, ref: (el) => this.tabEls.push(el) }, h("span", { class: { 'visually-hidden': tab.iconOnly } }, tab.label)));
            })
            : null, h("div", { key: '81edcc863b34a65ee84f2bd4372d872f818a2973', class: "tabs-active-indicator-track", "aria-hidden": "true" }, h("div", { key: 'b4712cd3de03b8dd16b9360ac47ba2461f46a818', class: "tabs-active-indicator" })))));
    }
    static get is() { return "go-tablist"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-tablist.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-tablist.css"]
        };
    }
    static get properties() {
        return {
            "vertical": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Set tabs orientation to vertical"
                },
                "attribute": "vertical",
                "reflect": false,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Provides a label that describes the purpose of the set of tabs."
                },
                "attribute": "label",
                "reflect": false
            },
            "auto": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "By default, tabs require user interaction (by clicking or pressing the `Enter` or `Space` key) to be activated.\nif `auto` is true, tabs are automatically activated when they receive focus."
                },
                "attribute": "auto",
                "reflect": false,
                "defaultValue": "false"
            },
            "bottom": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Fix tabs control to the bottom of screen"
                },
                "attribute": "bottom",
                "reflect": false,
                "defaultValue": "false"
            },
            "fill": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "fill available width\nnot applicable for vertical tabs"
                },
                "attribute": "fill",
                "reflect": false,
                "defaultValue": "false"
            },
            "items": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "TabItem[]",
                    "resolved": "TabItem[]",
                    "references": {
                        "TabItem": {
                            "location": "import",
                            "path": "./tabs.type",
                            "id": "src/components/go-tabs/tabs.type.ts::TabItem"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "tab items array"
                }
            },
            "justify": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "JustifyOption",
                    "resolved": "\"around\" | \"between\" | \"center\" | \"end\" | \"evenly\" | \"normal\" | \"start\" | \"stretch\"",
                    "references": {
                        "JustifyOption": {
                            "location": "import",
                            "path": "./tabs.type",
                            "id": "src/components/go-tabs/tabs.type.ts::JustifyOption"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "applies justify-content property to tablist\nie. `justify=\"between\"` applies `justify-content: space-between`"
                },
                "attribute": "justify",
                "reflect": false,
                "defaultValue": "'normal'"
            }
        };
    }
    static get states() {
        return {
            "activeTabRect": {},
            "tabsState": {}
        };
    }
    static get events() {
        return [{
                "method": "activated",
                "name": "activated",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "param",
                            "text": "ActiveTab , tabEl} currently active tab"
                        }],
                    "text": "Tab activated event"
                },
                "complexType": {
                    "original": "ActiveTab",
                    "resolved": "ActiveTab",
                    "references": {
                        "ActiveTab": {
                            "location": "import",
                            "path": "./tabs.type",
                            "id": "src/components/go-tabs/tabs.type.ts::ActiveTab"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "activateTab": {
                "complexType": {
                    "signature": "(tabEl: HTMLElement, setFocus?: boolean, isOnload?: boolean) => Promise<void>",
                    "parameters": [{
                            "name": "tabEl",
                            "type": "HTMLElement",
                            "docs": ""
                        }, {
                            "name": "setFocus",
                            "type": "boolean",
                            "docs": ""
                        }, {
                            "name": "isOnload",
                            "type": "boolean",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "items",
                "methodName": "loadItemsState"
            }];
    }
}
//# sourceMappingURL=go-tablist.js.map
