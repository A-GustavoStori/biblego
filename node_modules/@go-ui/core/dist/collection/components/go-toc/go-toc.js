import { Host, h } from "@stencil/core";
import { uniqueId } from "lodash-es";
export class GoToc {
    constructor() {
        this.labelId = uniqueId('go-toc-heading-');
        this.label = 'On this page';
        this.selector = 'h2';
        this.labelClass = '';
        this.tocItems = undefined;
    }
    componentWillLoad() {
        this.init();
    }
    /**
     * Query the DOM and generate TOC
     * If content in scope is dynamically loaded, it may not be available when this toc component loads.
     * call this `init` method and have the toc regenerate the links
     * @returns void
     */
    async init() {
        const items = document.querySelectorAll(this.selector);
        if (!items.length) {
            // warning('TOC selector (' + this.selector + ') yield no result.');
            return;
        }
        this.setupItems(items);
    }
    /**
     * Initialise the TOC items from the given list of elements
     * If the element doesn't have a `id` attribute, generate an unique id and set it to the element
     * Finally set the tocItems state with url and label
     */
    setupItems(items) {
        const tocItems = [];
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (!item.id) {
                item.id = `toc-item-${i}`;
            }
            item.setAttribute('tabindex', '-1');
            tocItems.push({
                url: `#${item.id}`,
                label: item.textContent,
            });
        }
        this.tocItems = tocItems;
    }
    render() {
        const { labelId, labelClass } = this;
        return (h(Host, { key: 'ea4b815b9d480027efae49951404a086690e3865' }, this.tocItems && this.tocItems.length ? (h("div", { class: "go-toc" }, h("nav", { "aria-labelledby": labelId }, h("div", { class: "go-toc-line", "aria-hidden": "true" }), h("div", { id: labelId }, h("slot", { name: "label" }, h("span", { class: `go-toc-title h5 ${labelClass}` }, this.label))), h("ul", { class: "go-toc-list" }, this.tocItems.map(({ label, url }) => (h("li", { class: "go-toc-item" }, h("go-nav-link", { item: { label, url } })))))))) : null));
    }
    static get is() { return "go-toc"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-toc.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-toc.css"]
        };
    }
    static get properties() {
        return {
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Label for the TOC"
                },
                "attribute": "label",
                "reflect": false,
                "defaultValue": "'On this page'"
            },
            "selector": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Selector for the TOC items"
                },
                "attribute": "selector",
                "reflect": false,
                "defaultValue": "'h2'"
            },
            "labelClass": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Custom classes to be applied to the label"
                },
                "attribute": "label-class",
                "reflect": false,
                "defaultValue": "''"
            }
        };
    }
    static get states() {
        return {
            "tocItems": {}
        };
    }
    static get methods() {
        return {
            "init": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Query the DOM and generate TOC\nIf content in scope is dynamically loaded, it may not be available when this toc component loads.\ncall this `init` method and have the toc regenerate the links",
                    "tags": [{
                            "name": "returns",
                            "text": "void"
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-toc.js.map
