import { h } from "@stencil/core";
import { uniqueId } from "lodash-es";
export class GoDropdownMenu {
    constructor() {
        this.focusedMenuItemIndex = 0;
        this.focusLastOnNextOpen = false;
        this.triggerSelector = undefined;
        this.isActive = false;
        this.width = undefined;
        this.menuId = undefined;
        this.persistent = false;
    }
    /**
     * open menu
     * @param focusFirst if auto focus on first item
     */
    async open() {
        if (!this.dropdownEl.isActive) {
            // open menu and focus on first item
            this.dropdownEl.open();
        }
    }
    async close(focusBackToTrigger = false) {
        this.dropdownEl.close(focusBackToTrigger);
    }
    componentWillLoad() {
        this.triggerEl = document.querySelector(this.triggerSelector);
        if (!this.menuId) {
            this.menuId = uniqueId('go-dropdown-menu-');
        }
        this.setTriggerRoles();
        this.addTriggerEventListeners();
    }
    componentDidLoad() {
        this.addMenuItemEventListeners();
    }
    setTriggerRoles() {
        this.triggerEl.setAttribute('aria-controls', this.menuId);
    }
    addTriggerEventListeners() {
        this.triggerEl.addEventListener('click', () => {
            if (this.isActive) {
                this.close();
            }
            else {
                this.open();
            }
        });
        this.triggerEl.addEventListener('keydown', (e) => {
            if (!this.dropdownEl) {
                return;
            }
            const key = e.key;
            if (key === 'ArrowUp') {
                this.focusLastOnNextOpen = true;
                this.open();
            }
            if (key === 'ArrowDown') {
                this.open();
            }
        });
    }
    addMenuItemEventListeners() {
        if (!this.menuItemEls) {
            this.menuItemEls = Array.from(this.menuEl.querySelectorAll('go-dropdown-item'));
        }
        if (!this.menuItemEls.length) {
            // no `go-dropdown-item` found
            return;
        }
        // up down arrow keys move focus between menu items
        this.menuItemEls.forEach((item) => {
            item.addEventListener('keydown', (e) => {
                if (e.key === 'Tab') {
                    this.close();
                }
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    this.focusedMenuItemIndex += 1;
                    if (this.focusedMenuItemIndex > this.menuItemEls.length - 1) {
                        this.focusedMenuItemIndex = 0;
                    }
                    this.focusMenuItem();
                }
                if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    this.focusedMenuItemIndex -= 1;
                    if (this.focusedMenuItemIndex < 0) {
                        this.focusedMenuItemIndex = this.menuItemEls.length - 1;
                    }
                    this.focusMenuItem();
                }
            });
        });
    }
    focusMenuItem() {
        this.menuItemEls.forEach((dropdownItem, i) => {
            if (i === this.focusedMenuItemIndex) {
                dropdownItem.focusInControl();
            }
            else {
                dropdownItem.focusOutControl();
            }
        });
    }
    handleDropdownOpened() {
        this.isActive = true;
        if (this.focusLastOnNextOpen) {
            this.focusedMenuItemIndex = this.menuItemEls.length - 1;
            this.focusLastOnNextOpen = false;
        }
        else {
            this.focusedMenuItemIndex = 0;
        }
        this.focusMenuItem();
    }
    handleDropdownClosed() {
        this.isActive = false;
    }
    handleItemSelected() {
        if (!this.persistent) {
            this.close();
        }
    }
    render() {
        const { triggerSelector, isActive, width, menuId } = this;
        const dropdownProps = {
            triggerSelector,
            isActive,
            width,
        };
        return (h("go-dropdown", Object.assign({ key: '10c25f5db589edffe3f4b92dfdbf88f41123f761', ref: (el) => {
                this.dropdownEl = el;
            }, noTriggerClickHandler: true, onOpened: () => this.handleDropdownOpened(), onClosed: () => this.handleDropdownClosed() }, dropdownProps), h("slot", { key: '90a88209517d7408e48aa283b666f5a158b508b5', name: "prefix" }), h("div", { key: 'b4ae2290f95f499281f4ec13386f1b34c12560cb', role: "menu", class: "dropdown-menu-inner", id: menuId, ref: (el) => {
                this.menuEl = el;
            } }, h("slot", { key: '2f94ef98bbfc7bed961444f033331525327d2f9a' })), h("slot", { key: 'f6fbf3cb42f70d7c785e8f1f4078eea78444c19a', name: "suffix" })));
    }
    static get is() { return "go-dropdown-menu"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-dropdown-menu.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-dropdown-menu.css"]
        };
    }
    static get properties() {
        return {
            "triggerSelector": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "see",
                            "text": "[go-dropdown](go-dropdown#props)"
                        }],
                    "text": ""
                },
                "attribute": "trigger-selector",
                "reflect": false
            },
            "isActive": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "keep track of active state"
                },
                "attribute": "is-active",
                "reflect": true,
                "defaultValue": "false"
            },
            "width": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "customise width of dropdown menu"
                },
                "attribute": "width",
                "reflect": false
            },
            "menuId": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for menu"
                },
                "attribute": "menu-id",
                "reflect": false
            },
            "persistent": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If persistent, the dropdown will not close by itself on interaction with elements inside the menu."
                },
                "attribute": "persistent",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get methods() {
        return {
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "open menu",
                    "tags": [{
                            "name": "param",
                            "text": "focusFirst if auto focus on first item"
                        }]
                }
            },
            "close": {
                "complexType": {
                    "signature": "(focusBackToTrigger?: boolean) => Promise<void>",
                    "parameters": [{
                            "name": "focusBackToTrigger",
                            "type": "boolean",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "selected",
                "method": "handleItemSelected",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=go-dropdown-menu.js.map
