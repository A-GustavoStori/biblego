{"version":3,"file":"go-dropdown-item.js","sourceRoot":"","sources":["../../../src/components/go-dropdown-menu/go-dropdown-item.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAgB,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAMhG,MAAM,OAAO,cAAc;;qBAMA,MAAM;wBAKe,KAAK;wBAU/B,KAAK;;IAGzB,KAAK,CAAC,cAAc;;QAClB,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC9B,CAAC;IAGD,KAAK,CAAC,eAAe;QACnB,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;IAC/B,CAAC;IAID,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAEjC,OAAO,CACL,+DACE,IAAI,EAAC,QAAQ,EACb,IAAI,EAAC,UAAU,EACf,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAC/B,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,mBACnB,IAAI,CAAC,QAAQ,EAC5B,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;gBACb,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAClB,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,OAAO;gBACT,CAAC;gBACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC9B,CAAC,EACD,KAAK,EAAE,EAAE,iBAAiB,EAAE,KAAK,EAAE;YACnC,8DAAa,CACN,CACV,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Event, EventEmitter, Element, Method, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'go-dropdown-item',\n  styleUrl: 'go-dropdown-item.scss',\n})\nexport class GoDropdownItem {\n  @Element() el: HTMLElement;\n\n  /**\n   * customise width of the dropdown item\n   */\n  @Prop() width?: string = '100%';\n\n  /**\n   * if this item is disabled, according to the [menu pattern] https://www.w3.org/WAI/ARIA/apg/patterns/menu/#issue-container-generatedID-17 disabled menu item should be focusable but cannot be activated\n   */\n  @Prop({ reflect: true }) disabled?: boolean = false;\n\n  /**\n   * Emitted when a menu item is selected\n   */\n  @Event({\n    bubbles: true,\n  })\n  selected: EventEmitter<HTMLElement>;\n\n  @State() hasFocus = false;\n\n  @Method()\n  async focusInControl() {\n    this.controlEl?.focus();\n    this.controlEl.tabIndex = 0;\n  }\n\n  @Method()\n  async focusOutControl() {\n    this.controlEl.tabIndex = -1;\n  }\n\n  controlEl: HTMLElement;\n\n  render() {\n    const { width, hasFocus } = this;\n\n    return (\n      <button\n        type=\"button\"\n        role=\"menuitem\"\n        tabindex={hasFocus ? '0' : '-1'}\n        ref={(el) => (this.controlEl = el)}\n        aria-disabled={this.disabled}\n        onClick={(e) => {\n          if (this.disabled) {\n            e.preventDefault();\n            return;\n          }\n          this.selected.emit(this.el);\n        }}\n        style={{ '--dd-item-width': width }}>\n        <slot></slot>\n      </button>\n    );\n  }\n}\n"]}