import { h } from "@stencil/core";
export class GoDropdownItem {
    constructor() {
        this.width = '100%';
        this.disabled = false;
        this.hasFocus = false;
    }
    async focusInControl() {
        var _a;
        (_a = this.controlEl) === null || _a === void 0 ? void 0 : _a.focus();
        this.controlEl.tabIndex = 0;
    }
    async focusOutControl() {
        this.controlEl.tabIndex = -1;
    }
    render() {
        const { width, hasFocus } = this;
        return (h("button", { key: '1f144f9e896738f1a8f3d48df9dc155741e2a891', type: "button", role: "menuitem", tabindex: hasFocus ? '0' : '-1', ref: (el) => (this.controlEl = el), "aria-disabled": this.disabled, onClick: (e) => {
                if (this.disabled) {
                    e.preventDefault();
                    return;
                }
                this.selected.emit(this.el);
            }, style: { '--dd-item-width': width } }, h("slot", { key: 'e3428e870c92fdc430b3ca4a4da617de15391920' })));
    }
    static get is() { return "go-dropdown-item"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-dropdown-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-dropdown-item.css"]
        };
    }
    static get properties() {
        return {
            "width": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "customise width of the dropdown item"
                },
                "attribute": "width",
                "reflect": false,
                "defaultValue": "'100%'"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "if this item is disabled, according to the [menu pattern] https://www.w3.org/WAI/ARIA/apg/patterns/menu/#issue-container-generatedID-17 disabled menu item should be focusable but cannot be activated"
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "hasFocus": {}
        };
    }
    static get events() {
        return [{
                "method": "selected",
                "name": "selected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when a menu item is selected"
                },
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "focusInControl": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "focusOutControl": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-dropdown-item.js.map
