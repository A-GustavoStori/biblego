import { h } from "@stencil/core";
import { inheritAttributes } from "../../utils/helper";
// 1. check cross domain and add target="_blank" + rel="noopener noreferrer"
// 2. check target="_blank" and add visual + screen reader queues
export class GoLink {
    constructor() {
        // Store attributes inherited from the host element
        this.attrs = {};
        this.href = undefined;
        this.target = undefined;
        this.expandClickableArea = false;
        this.isExternal = false;
        this.isNewTab = false;
    }
    componentWillLoad() {
        this.checkExternal();
        this.attrs = inheritAttributes(this.el, ['href', 'target', 'expand-clickable-area']);
    }
    checkNewTab() {
        this.isNewTab = this.target === '_blank';
    }
    checkExternal() {
        if (!this.href) {
            return;
        }
        this.isExternal = this.isExternalURL(this.href);
        if (this.isExternal) {
            this.isNewTab = true;
        }
    }
    isExternalURL(url) {
        if (url.startsWith('#')) {
            return false;
        }
        const tmp = document.createElement('a');
        tmp.href = url;
        const isExternal = tmp.host !== window.location.host;
        tmp.remove();
        return isExternal;
    }
    render() {
        const { href, target, attrs, isExternal, isNewTab, expandClickableArea } = this;
        let classes = ['go-link'];
        if (attrs['class']) {
            classes.push(attrs['class']);
        }
        if (expandClickableArea) {
            classes.push('expand');
        }
        let linkAttrs = Object.assign(Object.assign({}, attrs), { href, class: classes.join(' '), target: isExternal || isNewTab ? '_blank' : target });
        return (h("a", Object.assign({ key: '518827946136783415ce3df61775299b55c0651c' }, linkAttrs), h("slot", { key: 'd4ced2692a1ab8d69646a6ab5396353b914ee15b' }), isExternal || isNewTab
            ? [
                h("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", "aria-hidden": "true", class: "external-link-icon" }, h("path", { d: "M0 0h24v24H0z", fill: "none" }), h("path", { d: "M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z" })),
                h("span", { class: "visually-hidden" }, "Opens in new a tab or window"),
            ]
            : null));
    }
    static get is() { return "go-link"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-link.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-link.css"]
        };
    }
    static get properties() {
        return {
            "href": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The `href` of the link."
                },
                "attribute": "href",
                "reflect": false
            },
            "target": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'_blank' | '_self' | '_parent' | '_top'",
                    "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The `target` of the link."
                },
                "attribute": "target",
                "reflect": false
            },
            "expandClickableArea": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "expand-clickable-area",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "isExternal": {},
            "isNewTab": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "target",
                "methodName": "checkNewTab"
            }, {
                "propName": "href",
                "methodName": "checkExternal"
            }];
    }
}
//# sourceMappingURL=go-link.js.map
