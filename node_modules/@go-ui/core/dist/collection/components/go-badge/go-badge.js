import { Host, h } from "@stencil/core";
export class GoBadge {
    constructor() {
        this.count = undefined;
        this.min = 0;
        this.max = 99;
        this.label = undefined;
        this.dotOnly = false;
    }
    render() {
        const { count, min, max, label, dotOnly } = this;
        let displayCount = `${count}`;
        if (count < min) {
            return h("slot", null);
        }
        if (count > max) {
            displayCount = `${max}+`;
        }
        return (h(Host, null, h("slot", null), h("div", { class: { 'badge-count': true, 'dot-only': dotOnly } }, label ? h("span", { class: "visually-hidden" }, label) : null, count && !dotOnly ? h("span", { "aria-hidden": "true" }, displayCount) : null)));
    }
    static get is() { return "go-badge"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-badge.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-badge.css"]
        };
    }
    static get properties() {
        return {
            "count": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Number to be displayed on the badge"
                },
                "attribute": "count",
                "reflect": false
            },
            "min": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "minimum number displayable on the badge, if count is less than min, the badge will not be displayed"
                },
                "attribute": "min",
                "reflect": false,
                "defaultValue": "0"
            },
            "max": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "maximum number displayable on the badge, if count is greater than max, `{max}+` is displayed"
                },
                "attribute": "max",
                "reflect": false,
                "defaultValue": "99"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Provide a meaningful label for the badge"
                },
                "attribute": "label",
                "reflect": false
            },
            "dotOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If true, the badge will be displayed only as a dot, no number will be shown"
                },
                "attribute": "dot-only",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-badge.js.map
