{"version":3,"file":"go-to-top.js","sourceRoot":"","sources":["../../../src/components/go-to-top/go-to-top.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACzE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,WAAW,CAAC;AAM/C,MAAM,OAAO,OAAO;;sBAMO,GAAG;sBAkBV,KAAK;;IAfvB,iBAAiB;QACf,wDAAwD;QACxD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED,gBAAgB;QACd,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;QAC7C,CAAC,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;IAID,MAAM;QACJ,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QACxB,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAE,EAAE,MAAM,EAAE;YACrB,kEAAW,OAAO,EAAC,SAAS,EAAC,IAAI,QAAC,IAAI,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAC,eAAe,EAAC,IAAI,EAAC,QAAQ,EAAC,IAAI,QAAC,KAAK,2BAAiB,uBAAuB;gBAC9I,4DACE,KAAK,EAAC,4BAA4B,EAClC,IAAI,EAAC,MAAM,EACX,MAAM,EAAC,cAAc,oBACN,OAAO,qBACN,OAAO,kBACV,GAAG,EAChB,OAAO,EAAC,WAAW;oBACnB,6DAAM,CAAC,EAAC,gBAAgB,GAAG,CACvB,CACI;YACZ,mEAAY,EAAE,EAAC,uBAAuB,EAAC,SAAS,EAAC,MAAM,gBAAY,eAAe,kBAErE,CACR,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Element, State, Prop } from '@stencil/core';\nimport { uniqueId, debounce } from 'lodash-es';\n@Component({\n  tag: 'go-to-top',\n  styleUrl: 'go-to-top.scss',\n  shadow: false,\n})\nexport class GoToTop {\n  @Element() el: HTMLElement;\n\n  /**\n   * how far from the top of the page the button should be shown (in px)\n   */\n  @Prop() offset: number = 200;\n  private targetId: string;\n\n  componentWillLoad() {\n    // get body id or generate a new one if it doesn't exist\n    this.targetId = document.body.getAttribute('id');\n    if (!this.targetId) {\n      this.targetId = uniqueId('body-');\n      document.body.setAttribute('id', this.targetId);\n    }\n  }\n\n  componentDidLoad() {\n    window.onscroll = debounce(() => {\n      this.active = window.scrollY > this.offset;\n    }, 200);\n  }\n\n  @State() active = false;\n\n  render() {\n    const { active } = this;\n    return (\n      <Host class={{ active }}>\n        <go-button variant=\"primary\" flat href={`#${this.targetId}`} id=\"go-to-top-btn\" type=\"button\" icon round aria-labelledby=\"go-to-top-btn-tooltip\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            viewBox=\"0 0 24 24\">\n            <path d=\"m18 15-6-6-6 6\" />\n          </svg>\n        </go-button>\n        <go-tooltip id=\"go-to-top-btn-tooltip\" placement=\"left\" trigger-id=\"go-to-top-btn\">\n          Back to top\n        </go-tooltip>\n      </Host>\n    );\n  }\n}\n"]}