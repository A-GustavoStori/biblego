import { Host, h } from "@stencil/core";
import { uniqueId, debounce } from "lodash-es";
import { computePosition, offset, flip, autoUpdate } from "@floating-ui/dom";
import { onClickOutside } from "../../utils";
export class GoDropdown {
    constructor() {
        this.triggerSelector = undefined;
        this.isActive = false;
        this.width = 'auto';
        this.noTriggerClickHandler = false;
        this.fullWidth = false;
        this.disabled = false;
    }
    /**
     * opens dropdown
     */
    async open() {
        if (this.disabled) {
            return;
        }
        this.originEl = document.activeElement;
        this.isActive = true;
        this.opened.emit();
    }
    /**
     * closes dropdown
     */
    async close(focusBackToTrigger = false) {
        this.isActive = false;
        this.closed.emit();
        if (this.originEl && focusBackToTrigger) {
            this.originEl.focus();
        }
    }
    /**
     * toggles dropdown
     */
    async toggle() {
        if (this.isActive) {
            this.close();
        }
        else {
            this.open();
        }
    }
    componentWillLoad() {
        // if id attribute is not provided, generate a unique id for the dropdown
        if (!this.el.id) {
            this.el.id = uniqueId('go-dropdown-');
        }
        this.triggerEl = document.querySelector(`${this.triggerSelector}`);
    }
    async componentDidLoad() {
        if (!this.triggerEl) {
            return;
        }
        await this.init();
        // press esc to close dropdown
        this.escapeHandler = (e) => {
            if (e.code === 'Escape') {
                this.close();
            }
        };
        this.focusOutHandler = (e) => {
            if (this.triggerEl.contains(e.relatedTarget)) {
                return;
            }
            if (e.relatedTarget && !this.el.contains(e.relatedTarget)) {
                this.close();
            }
        };
        document.addEventListener('keydown', this.escapeHandler);
        // focus outside to close dropdown
        this.el.addEventListener('focusout', this.focusOutHandler);
    }
    disconnectedCallback() {
        if (this.escapeHandler) {
            document.removeEventListener('keydown', this.escapeHandler);
        }
        if (this.focusOutHandler) {
            this.el.removeEventListener('focusout', this.focusOutHandler);
        }
        if (this.clickOutsideCleanUp) {
            this.clickOutsideCleanUp();
        }
        if (this.cleanupAutoUpdate) {
            this.cleanupAutoUpdate();
        }
    }
    async init() {
        this.triggerEl.setAttribute('aria-haspopup', 'true');
        this.setTriggerExpanded(this.isActive);
        // add click event listener
        if (!this.noTriggerClickHandler) {
            this.triggerEl.addEventListener('click', () => this.toggle());
        }
        this.clickOutsideCleanUp = onClickOutside(this.el, (e) => {
            if (!this.triggerEl.contains(e.target) && this.isActive) {
                this.close();
            }
        });
        /**
         * Calculate position of dropdown
         */
        const middleware = [offset(4), flip()];
        this.cleanupAutoUpdate = autoUpdate(this.triggerEl, this.el, debounce(() => {
            computePosition(this.triggerEl, this.el, {
                strategy: 'fixed',
                placement: 'bottom-start',
                middleware,
            }).then(({ x, y, middlewareData }) => {
                var _a, _b;
                Object.assign(this.el.style, {
                    left: `${x}px`,
                    top: `${y}px`,
                });
                if (((_b = (_a = middlewareData.flip) === null || _a === void 0 ? void 0 : _a.overflows) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                    this.el.classList.add('flip');
                }
                else {
                    this.el.classList.remove('flip');
                }
            });
        }, 50));
    }
    setTriggerExpanded(expanded) {
        this.triggerEl.setAttribute('aria-expanded', String(expanded));
    }
    handleActiveChange(isActive) {
        this.setTriggerExpanded(isActive);
        if (isActive) {
            this.el.style.display = 'block';
            // focusFirstWithin(this.el);
        }
        else {
            this.el.addEventListener('transitionend', () => {
                this.el.style.display = 'none';
            }, { once: true });
            this.triggerEl.focus();
        }
    }
    render() {
        let { isActive, width, fullWidth } = this;
        return (h(Host, { key: '174d6d272f5936aec0445bd40168e6f929adc093', class: { 'is-active': isActive, 'full-width': fullWidth }, "aria-hidden": isActive ? 'false' : 'true', style: { '--dropdown-width': width } }, h("div", { key: '1fd09ef5f152240d046dafdb14ca90cf9d39479d', class: "dropdown-content" }, h("slot", { key: 'c5d8cbee34c6724319ee63bddb84fc8d075f97d4' }))));
    }
    static get is() { return "go-dropdown"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-dropdown.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-dropdown.css"]
        };
    }
    static get properties() {
        return {
            "triggerSelector": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Query selector string for the trigger element."
                },
                "attribute": "trigger-selector",
                "reflect": false
            },
            "isActive": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "keep track of active state"
                },
                "attribute": "is-active",
                "reflect": true,
                "defaultValue": "false"
            },
            "width": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Width of the dropdown, any CSS width values can be used."
                },
                "attribute": "width",
                "reflect": false,
                "defaultValue": "'auto'"
            },
            "noTriggerClickHandler": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If set, trigger click event will need to be handled manually."
                },
                "attribute": "no-trigger-click-handler",
                "reflect": false,
                "defaultValue": "false"
            },
            "fullWidth": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If set, dropdown will take full width of its parent."
                },
                "attribute": "full-width",
                "reflect": false,
                "defaultValue": "false"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "if set, dropdown cannot be opened"
                },
                "attribute": "disabled",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "opened",
                "name": "opened",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when dropdown is opened"
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "closed",
                "name": "closed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when dropdown is opened"
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "opens dropdown",
                    "tags": []
                }
            },
            "close": {
                "complexType": {
                    "signature": "(focusBackToTrigger?: boolean) => Promise<void>",
                    "parameters": [{
                            "name": "focusBackToTrigger",
                            "type": "boolean",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "closes dropdown",
                    "tags": []
                }
            },
            "toggle": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "toggles dropdown",
                    "tags": []
                }
            },
            "init": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "Node": {
                            "location": "global",
                            "id": "global::Node"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "isActive",
                "methodName": "handleActiveChange"
            }];
    }
}
//# sourceMappingURL=go-dropdown.js.map
