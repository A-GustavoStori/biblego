import { Host, h } from "@stencil/core";
import { parseJsonProp } from "../../utils";
export class GoBreadcrumb {
    constructor() {
        this.label = 'Breadcrumbs';
        this.items = undefined;
        this.hideCurrent = false;
        this.navItems = [];
    }
    async watchItems(newItems) {
        this.navItems = this.getItems(newItems);
    }
    componentWillLoad() {
        this.navItems = this.getItems(this.items);
    }
    getItems(items) {
        const navItems = parseJsonProp(items);
        if (!this.hideCurrent) {
            return navItems;
        }
        return navItems.filter((item, i) => item.url || i !== navItems.length - 1);
    }
    render() {
        const { label, navItems, hideCurrent } = this;
        if (!(navItems === null || navItems === void 0 ? void 0 : navItems.length)) {
            return null;
        }
        return (h(Host, null, h("nav", { "aria-label": label }, h("ol", null, navItems.map((item, i) => {
            const isLast = i === navItems.length - 1;
            const isCurrentPageALink = isLast && item.url && !hideCurrent;
            return (h("li", null, h("go-nav-link", { item: item, "aria-current": isCurrentPageALink ? 'page' : null }), i < navItems.length - 1 ? (h("svg", { class: "breadcrumb-separator", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "m9 18 6-6-6-6" }))) : null));
        })))));
    }
    static get is() { return "go-breadcrumbs"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-breadcrumbs.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-breadcrumbs.css"]
        };
    }
    static get properties() {
        return {
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The label for the navigation landmark. This is used by assistive technologies to identify the landmark."
                },
                "attribute": "label",
                "reflect": false,
                "defaultValue": "'Breadcrumbs'"
            },
            "items": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "INavItem[] | string",
                    "resolved": "INavItem[] | string",
                    "references": {
                        "INavItem": {
                            "location": "import",
                            "path": "../../interfaces",
                            "id": "src/interfaces/index.ts::INavItem"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "list of navigation items to be displayed"
                },
                "attribute": "items",
                "reflect": false
            },
            "hideCurrent": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Hide current page (last item without url) from the breadcrumbs"
                },
                "attribute": "hide-current",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "navItems": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "items",
                "methodName": "watchItems"
            }];
    }
}
//# sourceMappingURL=go-breadcrumbs.js.map
