import { Build } from "@stencil/core";
export class GoDarkMode {
    constructor() {
        this.attribute = 'data-theme';
    }
    async componentWillLoad() {
        // get user preference
        const theme = await this.getUserPreference();
        this.setTheme(theme);
        // add event listener
        if (Build.isBrowser) {
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', async (e) => {
                await this.setTheme(e.matches ? 'dark' : 'light');
            });
        }
    }
    /**
     * get preferred theme,
     * 1. Check user settings:
     *    - check if localstorage has user-theme key
     *    - if so, check if value is either light or dark,
     *    - if so, return value
     *    - if value is neither light or dark, continue to next step
     * 2. Check system preference:
     *    - check if prefers-color-scheme is dark, if so, return dark
     * 3. default to light
     */
    async getUserPreference() {
        const userTheme = localStorage.getItem('user-theme');
        if (userTheme === 'light' || userTheme === 'dark') {
            return userTheme;
        }
        // Check system preference
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
        }
        // Default to light
        return 'light';
    }
    /**
     * set the current theme and change the html attribute
     * @param theme theme to set
     */
    async setTheme(theme) {
        localStorage.setItem('user-theme', theme);
        this.changeEvent.emit({ theme });
        document.documentElement.setAttribute(this.attribute, theme);
    }
    static get is() { return "go-dark-mode"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-dark-mode.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-dark-mode.css"]
        };
    }
    static get properties() {
        return {
            "attribute": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Attribute name on html element that will be used to store theme"
                },
                "attribute": "attribute",
                "reflect": false,
                "defaultValue": "'data-theme'"
            }
        };
    }
    static get events() {
        return [{
                "method": "changeEvent",
                "name": "themechange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "{ theme: Theme }",
                    "resolved": "{ theme: Theme; }",
                    "references": {
                        "Theme": {
                            "location": "local",
                            "path": "/home/runner/work/go-ui/go-ui/packages/core/src/components/go-dark-mode/go-dark-mode.tsx",
                            "id": "src/components/go-dark-mode/go-dark-mode.tsx::Theme"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "getUserPreference": {
                "complexType": {
                    "signature": "() => Promise<Theme>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "Theme": {
                            "location": "local",
                            "path": "/home/runner/work/go-ui/go-ui/packages/core/src/components/go-dark-mode/go-dark-mode.tsx",
                            "id": "src/components/go-dark-mode/go-dark-mode.tsx::Theme"
                        }
                    },
                    "return": "Promise<Theme>"
                },
                "docs": {
                    "text": "get preferred theme,\n1. Check user settings:\n   - check if localstorage has user-theme key\n   - if so, check if value is either light or dark,\n   - if so, return value\n   - if value is neither light or dark, continue to next step\n2. Check system preference:\n   - check if prefers-color-scheme is dark, if so, return dark\n3. default to light",
                    "tags": []
                }
            },
            "setTheme": {
                "complexType": {
                    "signature": "(theme: Theme) => Promise<void>",
                    "parameters": [{
                            "name": "theme",
                            "type": "\"light\" | \"dark\"",
                            "docs": "theme to set"
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "Theme": {
                            "location": "local",
                            "path": "/home/runner/work/go-ui/go-ui/packages/core/src/components/go-dark-mode/go-dark-mode.tsx",
                            "id": "src/components/go-dark-mode/go-dark-mode.tsx::Theme"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "set the current theme and change the html attribute",
                    "tags": [{
                            "name": "param",
                            "text": "theme theme to set"
                        }]
                }
            }
        };
    }
}
//# sourceMappingURL=go-dark-mode.js.map
