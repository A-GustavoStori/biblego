{"version":3,"file":"go-switch.js","sourceRoot":"","sources":["../../../../src/components/form/go-switch/go-switch.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Element, Prop } from '@stencil/core';\nimport { inheritAttributes } from '../../../utils/helper';\nimport { uniqueId, kebabCase } from 'lodash-es';\nimport { CheckboxProps } from '../../../interfaces/form';\n\n@Component({\n  tag: 'go-switch',\n  styleUrl: 'go-switch.scss',\n  shadow: false,\n})\nexport class GoSwitch implements CheckboxProps {\n  @Prop({ mutable: true })\n  checked?: boolean;\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  label: string;\n\n  @Prop()\n  disabled?: boolean;\n\n  @Prop()\n  value: any;\n\n  @Element() el: HTMLElement;\n\n  /**\n   * Display label on top of switch\n   */\n  @Prop() stack = false;\n\n  /**\n   * make this field full width\n   */\n  @Prop() fullWidth = false;\n\n  /**\n   * show on/off text in switch toggle\n   */\n  @Prop() showOnOff = false;\n\n  /**\n   * show on/off text next to the switch toggle\n   */\n  @Prop() showOnOffOutside = false;\n\n  /**\n   * \"on\" label to show when `showOnOff*` is set to true\n   */\n  @Prop() activeLabel: string = 'On';\n\n  /**\n   * \"off\" label to show when `showOnOff*` is set to true\n   */\n  @Prop() inactiveLabel: string = 'Off';\n\n  inputEl: HTMLInputElement;\n\n  handleChange(e) {\n    this.checked = e.target.checked;\n  }\n\n  // Store attributes inherited from the host element\n  private attrs = {} as any;\n  componentWillLoad() {\n    const propNames = Object.keys(this['__proto__']);\n    const attributeNames = propNames.map((name) => kebabCase(name));\n    this.attrs = inheritAttributes(this.el, ['class', 'style', ...attributeNames]);\n  }\n\n  render() {\n    const {\n      checked,\n      name,\n      label,\n      disabled,\n      value,\n      attrs,\n      stack,\n      fullWidth,\n      showOnOff,\n      showOnOffOutside,\n      activeLabel,\n      inactiveLabel,\n    } = this;\n    const inputId = attrs?.id ? attrs.id : uniqueId('go-switch-');\n    return (\n      <Host class={{ stack, 'full-width': fullWidth }}>\n        <label htmlFor={inputId}>{label}</label>\n        <div class=\"switch-container\">\n          <input\n            ref={(el) => (this.inputEl = el)}\n            type=\"checkbox\"\n            role=\"switch\"\n            id={inputId}\n            name={name}\n            disabled={disabled}\n            checked={checked}\n            value={value}\n            {...attrs}\n            onChange={(e) => this.handleChange(e)}\n          />\n          <div class=\"switch-group\">\n            <span class=\"switch-track\">\n              <span class=\"switch-handle\"></span>\n              {showOnOff ? (\n                <span class=\"switch-text\" aria-hidden=\"true\">\n                  {checked ? activeLabel : inactiveLabel}\n                </span>\n              ) : null}\n            </span>\n            {showOnOffOutside ? (\n              <span class=\"text-size-0\" aria-hidden=\"true\">\n                {checked ? activeLabel : inactiveLabel}\n              </span>\n            ) : null}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}