import { h } from "@stencil/core";
import { uniqueId } from "lodash-es";
import "@duetds/date-picker";
import { fieldSlotNames, loadFieldProps, loadFieldSlots, parseJsonProp } from "../../../utils";
import dayjs from "dayjs";
import customParseFormat from "dayjs/plugin/customParseFormat";
import { getDefaultDateAdapter, getDefaultLocalization } from "./utils";
const ISO_DATE_FORMAT = 'YYYY-MM-DD';
export class GoDatepicker {
    constructor() {
        this.prefixer = 'go-datepicker-';
        this.hasNamedSlot = {};
        this.controlId = uniqueId(this.prefixer);
        this.labelId = undefined;
        this.prefixId = undefined;
        this.suffixId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.readonly = undefined;
        this.value = undefined;
        this.hintFormat = true;
        this.placeholder = '';
        this.options = undefined;
        this.format = ISO_DATE_FORMAT;
        this.parsedOptions = undefined;
    }
    loadOptions() {
        var _a, _b, _c, _d;
        this.parsedOptions = parseJsonProp(this.options);
        const dateFormat = this.format;
        this.parsedOptions = Object.assign(Object.assign({}, this.parsedOptions), { localization: (_b = (_a = this.parsedOptions) === null || _a === void 0 ? void 0 : _a.localization) !== null && _b !== void 0 ? _b : getDefaultLocalization(this.placeholder), dateAdapter: (_d = (_c = this.parsedOptions) === null || _c === void 0 ? void 0 : _c.dateAdapter) !== null && _d !== void 0 ? _d : getDefaultDateAdapter(dayjs, dateFormat) });
    }
    componentWillLoad() {
        dayjs.extend(customParseFormat);
        this.loadOptions();
        this.hasNamedSlot = loadFieldSlots(this.el);
    }
    componentDidLoad() {
        this.datepickerInputEl = this.el.querySelector('.duet-date__input');
        this.passThroughReadonly(this.readonly);
        this.removeDuetInputName();
    }
    toISO(value) {
        return dayjs(value, this.format).format(ISO_DATE_FORMAT);
    }
    handleDuetChange(e) {
        const { valueAsDate } = e.detail;
        if (!valueAsDate) {
            return;
        }
        this.setValueIfValid(valueAsDate);
    }
    /**
     * on datepicker blur check
     * at this point
     * the duet input field might have invalid values based on user input,
     * this.value will have the last valid ISO date string
     * we need to set the input value to that string
     * or empty string if no valid value available
     */
    handleDuetBlur() {
        const inputEl = this.el.querySelector('.duet-date__input');
        if (inputEl) {
            if (inputEl.value === '') {
                // user cleared out input value
                this.value = '';
                return;
            }
            inputEl.value = this.value || '';
        }
    }
    setValueIfValid(date) {
        const dateObj = dayjs(date);
        if (!dateObj.isValid()) {
            return;
        }
        this.value = dateObj.format(this.format);
        this.goChange.emit({ value: this.value });
    }
    watchReadonlyProp(readonly) {
        this.passThroughReadonly(readonly);
    }
    passThroughReadonly(readonly) {
        if (!this.datepickerInputEl) {
            return;
        }
        if (readonly) {
            this.datepickerInputEl.setAttribute('readonly', 'true');
        }
        else {
            this.datepickerInputEl.removeAttribute('readonly');
        }
    }
    /**
     * removes duet hidden input in form data
     * go-field is used to do this
     * duet hidden input doesn't store formatted date
     */
    removeDuetInputName() {
        if (!this.datepickerInputEl) {
            return;
        }
        this.datepickerInputEl.removeAttribute('name');
        const duetHiddenInput = this.datepickerEl.querySelector(`input[type="hidden"][name="${this.name}-duet-hidden"]`);
        if (duetHiddenInput) {
            duetHiddenInput.removeAttribute('name');
        }
    }
    render() {
        var _a;
        const { controlId: id, value, name, disabled, parsedOptions } = this;
        const fieldProps = loadFieldProps(this);
        const hint = `${(_a = this.hint) !== null && _a !== void 0 ? _a : ''}${this.hintFormat ? ` ${this.format}` : ''}`;
        return (h("go-field", Object.assign({ key: '07fd0388a79160b52948eb1ba60e1f88a9e8502a' }, fieldProps, { hint: hint, hiddenInputName: name, hiddenInputValue: value }), fieldSlotNames.map((slotName) => {
            if (this.hasNamedSlot[slotName]) {
                return (h("template", { slot: slotName }, h("slot", { name: slotName })));
            }
        }), h("duet-date-picker", Object.assign({ key: 'd9d627f274a31ea6ebef3a9998646c9b2db8755e', ref: (el) => (this.datepickerEl = el), class: "control", identifier: id, value: this.toISO(value), name: `${name}-duet-hidden`, disabled: disabled, onDuetBlur: () => this.handleDuetBlur(), onDuetChange: (e) => this.handleDuetChange(e) }, parsedOptions))));
    }
    static get is() { return "go-datepicker"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-datepicker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-datepicker.css"]
        };
    }
    static get properties() {
        return {
            "labelId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for label"
                },
                "attribute": "label-id",
                "reflect": false
            },
            "prefixId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for prefix"
                },
                "attribute": "prefix-id",
                "reflect": false
            },
            "suffixId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for suffix"
                },
                "attribute": "suffix-id",
                "reflect": false
            },
            "hintId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for hint message"
                },
                "attribute": "hint-id",
                "reflect": false
            },
            "errorId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for error"
                },
                "attribute": "error-id",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Name of the input field"
                },
                "attribute": "name",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Label of the input field"
                },
                "attribute": "label",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If the input is disabled"
                },
                "attribute": "disabled",
                "reflect": false
            },
            "hint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Hint message for the input"
                },
                "attribute": "hint",
                "reflect": false
            },
            "error": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "string | boolean",
                    "resolved": "boolean | string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Error state of input, text provided will be shown as error message"
                },
                "attribute": "error",
                "reflect": false
            },
            "readonly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If this input is read-only"
                },
                "attribute": "readonly",
                "reflect": false
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Value of the input field"
                },
                "attribute": "value",
                "reflect": false
            },
            "hintFormat": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "add date format into hint message"
                },
                "attribute": "hint-format",
                "reflect": false,
                "defaultValue": "true"
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Placeholder text"
                },
                "attribute": "placeholder",
                "reflect": false,
                "defaultValue": "''"
            },
            "options": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | Partial<DuetDatePickerProps>",
                    "resolved": "string | { name?: string; identifier?: string; disabled?: boolean; role?: string; direction?: DuetDatePickerDirection; required?: boolean; value?: string; min?: string; max?: string; firstDayOfWeek?: DaysOfWeek; localization?: DuetLocalizedText; dateAdapter?: DuetDateAdapter; isDateDisabled?: DateDisabledPredicate; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "DuetDatePickerProps": {
                            "location": "import",
                            "path": "./duet-date-picker",
                            "id": "src/components/form/go-datepicker/duet-date-picker.ts::DuetDatePickerProps"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Duet Date Picker options\nhttps://www.npmjs.com/package/@duetds/date-picker#properties"
                },
                "attribute": "options",
                "reflect": false
            },
            "format": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Specify the expected date format\nSupported formats: https://day.js.org/docs/en/parse/string-format#list-of-all-available-parsing-tokens"
                },
                "attribute": "format",
                "reflect": false,
                "defaultValue": "ISO_DATE_FORMAT"
            }
        };
    }
    static get states() {
        return {
            "parsedOptions": {}
        };
    }
    static get events() {
        return [{
                "method": "goChange",
                "name": "gochange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "GoChangeEventDetail<string>",
                    "resolved": "GoChangeEventDetail<string>",
                    "references": {
                        "GoChangeEventDetail": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::GoChangeEventDetail"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "options",
                "methodName": "loadOptions"
            }, {
                "propName": "readonly",
                "methodName": "watchReadonlyProp"
            }];
    }
}
//# sourceMappingURL=go-datepicker.js.map
