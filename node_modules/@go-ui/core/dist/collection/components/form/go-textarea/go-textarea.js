import { h } from "@stencil/core";
import { uniqueId } from "lodash-es";
import { fieldSlotNames, inheritNonFieldAttrs, loadFieldProps, loadFieldSlots } from "../../../utils";
export class GoTextarea {
    constructor() {
        this.hasNamedSlot = {};
        this.prefixer = 'go-textarea-';
        this.controlId = uniqueId(this.prefixer);
        this.labelId = undefined;
        this.prefixId = undefined;
        this.suffixId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.readonly = undefined;
        this.value = undefined;
        this.autoGrow = false;
        this.attrs = undefined;
    }
    componentWillLoad() {
        this.attrs = inheritNonFieldAttrs(this, ['auto-grow']);
        this.hasNamedSlot = loadFieldSlots(this.el);
    }
    updateControlHeight() {
        if (this.autoGrow && this.controlEl) {
            this.controlEl.style.height = 'auto';
            this.controlEl.style.height = this.controlEl.scrollHeight + 'px';
        }
    }
    render() {
        var _a;
        const { value, controlId: id, attrs } = this;
        const fieldProps = loadFieldProps(this);
        return (h("go-field", Object.assign({ key: 'a04ebbeccfa9eb07b5dc7f13d98de6ecc9e9d38e' }, fieldProps), fieldSlotNames.map((slotName) => {
            if (this.hasNamedSlot[slotName]) {
                return (h("template", { slot: slotName }, h("slot", { name: slotName })));
            }
        }), h("textarea", Object.assign({ key: '5a7eac852d6f10bc5f36d1c45126efa5bd1d0c07' }, fieldProps, attrs, { ref: (el) => (this.controlEl = el), id: id, class: "control", rows: 5, onInput: (e) => (this.value = e.target.value) }), value), attrs.maxlength && attrs.maxlength > 0 ? (h("span", { class: "textarea-count" }, (_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0, "/", attrs.maxlength, h("span", { class: "visually-hidden", "aria-live": "assertive", role: "alert" }, (value === null || value === void 0 ? void 0 : value.length) === Number(attrs.maxlength)
            ? `Limit reached, you can only enter ${attrs.maxlength} characters in this field.`
            : ''))) : null));
    }
    static get is() { return "go-textarea"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-textarea.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-textarea.css"]
        };
    }
    static get properties() {
        return {
            "labelId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for label"
                },
                "attribute": "label-id",
                "reflect": false
            },
            "prefixId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for prefix"
                },
                "attribute": "prefix-id",
                "reflect": false
            },
            "suffixId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for suffix"
                },
                "attribute": "suffix-id",
                "reflect": false
            },
            "hintId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for hint message"
                },
                "attribute": "hint-id",
                "reflect": false
            },
            "errorId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for error"
                },
                "attribute": "error-id",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Name of the input field"
                },
                "attribute": "name",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Label of the input field"
                },
                "attribute": "label",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If the input is disabled"
                },
                "attribute": "disabled",
                "reflect": false
            },
            "hint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Hint message for the input"
                },
                "attribute": "hint",
                "reflect": false
            },
            "error": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "boolean | string",
                    "resolved": "boolean | string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Error state of input, text provided will be shown as error message"
                },
                "attribute": "error",
                "reflect": false
            },
            "readonly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If this input is read-only"
                },
                "attribute": "readonly",
                "reflect": false
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Value of the input field"
                },
                "attribute": "value",
                "reflect": false
            },
            "autoGrow": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If set, grow textarea based on its content"
                },
                "attribute": "auto-grow",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "attrs": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "value",
                "methodName": "updateControlHeight"
            }];
    }
}
//# sourceMappingURL=go-textarea.js.map
