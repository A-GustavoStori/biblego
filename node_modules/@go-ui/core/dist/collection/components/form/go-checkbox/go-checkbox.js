import { Host, h } from "@stencil/core";
import { hasSlot, initIdProps } from "../../../utils";
export class GoCheckbox {
    constructor() {
        this.checked = undefined;
        this.indeterminate = undefined;
        this.name = undefined;
        this.disabled = undefined;
        this.value = undefined;
        this.label = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.hasError = false;
    }
    updateErrorState() {
        this.hasError = typeof this.error !== 'undefined';
    }
    handleChange(e) {
        this.checked = e.target.checked;
    }
    componentWillLoad() {
        this.hasHintSlot = hasSlot(this.el, 'hint');
        initIdProps(this, this.el, ['hint', 'error', 'control'], 'go-checkbox-');
        this.updateErrorState();
    }
    render() {
        const { label, error, controlId, hint, hintId, hasHintSlot, checked, indeterminate, name, disabled, value, hasError, errorId, } = this;
        const describedByIds = [];
        if (hasHintSlot || hint) {
            describedByIds.push(hintId);
        }
        if (hasError) {
            describedByIds.push(errorId);
        }
        const props = {
            id: controlId,
            checked,
            indeterminate,
            name,
            disabled,
            value,
        };
        return (h(Host, { key: 'b87c6c435899a9f87eaefa9609a5abd29acf1dd9', class: {
                error: hasError,
                disabled: !!disabled,
                indeterminate: !!indeterminate,
            } }, h("div", { key: 'a41ce882a414b675265b8aee482eab553c840622', class: "control-wrapper" }, h("div", { key: '3618ffcd6af422a222b07cd5d276b726c2f001bd', class: "box" }, h("input", Object.assign({ key: '8ea710ee7957ce8112416e0e4308edd0b611c573', class: "hidden-control", type: "checkbox" }, props, { "aria-invalid": String(hasError), "aria-describedby": describedByIds.join(' '), onChange: (e) => this.handleChange(e) })), h("svg", { key: 'd20b9aec0cdc299e07b5b7cc0d9ceca1e261e960', xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", viewBox: "0 0 24 24", class: "mark minus" }, h("path", { key: '62bd58c79683e2e4175c60f5f28606f3abd79e7e', d: "M5 12h14" })), h("svg", { key: '23549e1bb92c58f6d10dd7d6bc3d40e6e3896b79', xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", viewBox: "0 0 24 24", class: "mark tick" }, h("path", { key: 'fbba4f96c0f81fd921932fd81a0b47f99abac9fb', d: "M20 6 9 17l-5-5" }))), h("div", { key: '1c92e97e04d7429b8d5f1d0cfc5be7c62b14221d', class: "text" }, h("label", { key: 'ad1d64906487108c02211c0776bf3fc10fe68f23', htmlFor: controlId }, label), hasHintSlot || hint ? (h("div", { class: "hint", id: hintId }, h("slot", { name: "hint" }, hint))) : null)), hasError ? (h("div", { class: "error-msg", id: errorId }, error)) : null));
    }
    static get is() { return "go-checkbox"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-checkbox.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-checkbox.css"]
        };
    }
    static get properties() {
        return {
            "checked": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "checked",
                "reflect": false
            },
            "indeterminate": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "indeterminate",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Name of the input field"
                },
                "attribute": "name",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If the input is disabled"
                },
                "attribute": "disabled",
                "reflect": false
            },
            "value": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Value of the input field"
                },
                "attribute": "value",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Label of the input field"
                },
                "attribute": "label",
                "reflect": false
            },
            "hint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Hint message for the input"
                },
                "attribute": "hint",
                "reflect": false
            },
            "error": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Error state of input, text provided will be shown as error message"
                },
                "attribute": "error",
                "reflect": true
            },
            "hintId": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for hint message"
                },
                "attribute": "hint-id",
                "reflect": false
            },
            "errorId": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "DOM id for error"
                },
                "attribute": "error-id",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "hasError": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "error",
                "methodName": "updateErrorState"
            }];
    }
}
//# sourceMappingURL=go-checkbox.js.map
