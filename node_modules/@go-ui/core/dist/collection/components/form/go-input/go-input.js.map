{"version":3,"file":"go-input.js","sourceRoot":"","sources":["../../../../src/components/form/go-input/go-input.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAEnE,OAAO,EAAE,QAAQ,EAAE,MAAM,WAAW,CAAC;AACrC,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,oBAAoB,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAKtG,MAAM,OAAO,OAAO;;QAgElB,aAAQ,GAAG,WAAW,CAAC;QACvB,iBAAY,GAA+B,EAAE,CAAC;QAC9C,cAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;;;;;IAEpC,iBAAiB;QACf,IAAI,CAAC,KAAK,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACzC,MAAM,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,CACL,iFAAc,UAAU;YACrB,cAAc,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC/B,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;oBAChC,OAAO,CACL,gBAAU,IAAI,EAAE,QAAQ;wBACtB,YAAM,IAAI,EAAE,QAAQ,GAAS,CACpB,CACZ,CAAC;gBACJ,CAAC;YACH,CAAC,CAAC;YACF,8EACM,UAAU,EACV,KAAK,IACT,KAAK,EAAC,SAAS,EACf,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,EAClC,EAAE,EAAE,SAAS,EACb,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,IACnE,CACO,CACZ,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Element, Prop, State } from '@stencil/core';\nimport { InputProps } from '../../../interfaces';\nimport { uniqueId } from 'lodash-es';\nimport { loadFieldProps, fieldSlotNames, inheritNonFieldAttrs, loadFieldSlots } from '../../../utils';\n@Component({\n  tag: 'go-input',\n  shadow: false,\n})\nexport class GoInput implements InputProps {\n  @Element() el: HTMLElement;\n\n  /**\n   * DOM id for label\n   */\n  @Prop() labelId?: string;\n\n  /**\n   * DOM id for prefix\n   */\n  @Prop() prefixId?: string;\n\n  /**\n   * DOM id for suffix\n   */\n  @Prop() suffixId?: string;\n  /**\n   * DOM id for hint message\n   */\n  @Prop() hintId?: string;\n\n  /**\n   * DOM id for error\n   */\n  @Prop() errorId?: string;\n\n  /**\n   * Name of the input field\n   */\n  @Prop() name: string;\n\n  /**\n   * Label of the input field\n   */\n  @Prop() label: string;\n\n  /**\n   * If the input is disabled\n   */\n  @Prop() disabled?: boolean;\n  /**\n   * Hint message for the input\n   */\n  @Prop() hint?: string;\n  /**\n   * Error state of input, text provided will be shown as error message\n   */\n  @Prop() error?: boolean | string;\n  /**\n   * If this input is read-only\n   */\n  @Prop() readonly?: boolean;\n\n  /**\n   * Value of the input field\n   */\n  @Prop({ mutable: true }) value?: string;\n\n  /**\n   * keep track of non-field attrs\n   */\n  @State() attrs: any;\n\n  prefixer = 'go-input-';\n  hasNamedSlot: { [key: string]: boolean } = {};\n  controlId = uniqueId(this.prefixer);\n  controlEl: HTMLElement;\n  componentWillLoad() {\n    this.attrs = inheritNonFieldAttrs(this);\n    this.hasNamedSlot = loadFieldSlots(this.el);\n  }\n\n  render() {\n    const { controlId, value, attrs } = this;\n    const fieldProps = loadFieldProps(this);\n    return (\n      <go-field {...fieldProps}>\n        {fieldSlotNames.map((slotName) => {\n          if (this.hasNamedSlot[slotName]) {\n            return (\n              <template slot={slotName}>\n                <slot name={slotName}></slot>\n              </template>\n            );\n          }\n        })}\n        <input\n          {...fieldProps}\n          {...attrs}\n          class=\"control\"\n          ref={(el) => (this.controlEl = el)}\n          id={controlId}\n          value={value}\n          onInput={(e) => (this.value = (e.target as HTMLInputElement).value)}\n        />\n      </go-field>\n    );\n  }\n}\n"]}