import { Host, h } from "@stencil/core";
import { uniqueId, debounce } from "lodash-es";
import { computePosition, flip, shift, arrow, offset, autoUpdate, inline } from "@floating-ui/dom";
export class GoTooltip {
    constructor() {
        this.debouncedDetermineMouseOut = debounce(this.determineMouseOut, 150);
        this.triggerId = undefined;
        this.arrow = false;
        this.inline = false;
        this.placement = 'top';
        this.isActive = false;
    }
    componentWillLoad() {
        // if id attribute is not provided, generate a unique id for the tooltip
        if (!this.el.id) {
            this.el.id = uniqueId('go-tooltip-');
        }
        this.triggerEl = document.querySelector(`#${this.triggerId}`);
    }
    componentDidLoad() {
        if (!this.triggerEl) {
            return;
        }
        this.triggerEl.setAttribute('aria-describedby', this.el.id);
        // add event handlers to triggerEl
        this.triggerEl.addEventListener('mouseenter', () => this.show());
        document.addEventListener('mousemove', (e) => this.debouncedDetermineMouseOut(e));
        this.triggerEl.addEventListener('focusin', () => this.show());
        this.triggerEl.addEventListener('focusout', () => this.hide());
        this.arrowEl = this.el.querySelector('.tooltip-tail');
        this.initialiseTooltip(this.triggerEl, this.el, this.arrowEl);
        // keep watching for changes to the tooltip position
        this.cleanUpAutoUpdate = autoUpdate(this.triggerEl, this.el, debounce(() => this.initialiseTooltip(this.triggerEl, this.el, this.arrowEl), 300), { animationFrame: true });
        // press esc to hide tooltip
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hide();
            }
        });
    }
    initialiseTooltip(triggerEl, tooltipEl, arrowEl) {
        let middleware = [offset(8), flip(), shift()];
        if (this.arrow) {
            middleware.push(arrow({ element: arrowEl }));
        }
        if (this.inline) {
            middleware.push(inline());
        }
        computePosition(triggerEl, tooltipEl, {
            strategy: 'fixed',
            placement: this.placement,
            middleware,
        }).then(({ x, y, placement, middlewareData }) => {
            Object.assign(this.el.style, {
                left: `${x}px`,
                top: `${y}px`,
            });
            if (this.arrow) {
                // Accessing the data
                const { x: arrowX, y: arrowY } = middlewareData.arrow;
                const staticSide = {
                    top: 'bottom',
                    right: 'left',
                    bottom: 'top',
                    left: 'right',
                }[placement.split('-')[0]];
                Object.assign(arrowEl.style, {
                    left: arrowX != null ? `${arrowX}px` : '',
                    top: arrowY != null ? `${arrowY}px` : '',
                    right: '',
                    bottom: '',
                    [staticSide]: '-3px',
                });
            }
        });
    }
    /**
     * show tooltip
     */
    async show() {
        this.isActive = true;
    }
    /**
     * hide tooltip
     */
    async hide() {
        this.isActive = false;
    }
    determineMouseOut(e) {
        if (!this.isActive) {
            return;
        }
        // check if mouse is outside of the tooltip and the trigger element
        const { x, y } = e;
        const { left, top, right, bottom } = this.el.getBoundingClientRect();
        const { left: triggerLeft, top: triggerTop, right: triggerRight, bottom: triggerBottom } = this.triggerEl.getBoundingClientRect();
        const isOutside = x < left || x > right || y < top || y > bottom;
        const isOutsideTrigger = x < triggerLeft || x > triggerRight || y < triggerTop || y > triggerBottom;
        if (isOutside && isOutsideTrigger) {
            this.hide();
        }
    }
    disconnectedCallback() {
        this.cleanUpAutoUpdate && this.cleanUpAutoUpdate();
    }
    render() {
        const { isActive, arrow } = this;
        return (h(Host, { key: '55eb8e0d96d24c7da560e58ddc984dc581582ae5', role: "tooltip", class: { 'is-active': isActive }, "aria-hidden": isActive ? 'false' : 'true' }, h("slot", { key: 'da4bb428731cdc538d96045060af5ba303e91cc3' }), arrow ? h("div", { class: "tooltip-tail" }) : null));
    }
    static get is() { return "go-tooltip"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-tooltip.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-tooltip.css"]
        };
    }
    static get properties() {
        return {
            "triggerId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Query selector string for the trigger element"
                },
                "attribute": "trigger-id",
                "reflect": false
            },
            "arrow": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Add arrow to the tooltip"
                },
                "attribute": "arrow",
                "reflect": false,
                "defaultValue": "false"
            },
            "inline": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Improve positioning for inline trigger elements that span over multiple lines.\nReference: https://floating-ui.com/docs/inline"
                },
                "attribute": "inline",
                "reflect": false,
                "defaultValue": "false"
            },
            "placement": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'top' | 'bottom' | 'left' | 'right'",
                    "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "placement of tooltip relative to the trigger element"
                },
                "attribute": "placement",
                "reflect": false,
                "defaultValue": "'top'"
            }
        };
    }
    static get states() {
        return {
            "isActive": {}
        };
    }
    static get methods() {
        return {
            "show": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "show tooltip",
                    "tags": []
                }
            },
            "hide": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "hide tooltip",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-tooltip.js.map
