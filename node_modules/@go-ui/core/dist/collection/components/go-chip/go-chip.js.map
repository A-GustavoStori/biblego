{"version":3,"file":"go-chip.js","sourceRoot":"","sources":["../../../src/components/go-chip/go-chip.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAEvF,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAO7C,MAAM,OAAO,MAAM;;QA0CT,cAAS,GAAG,KAAK,CAAC;QAElB,cAAS,GAAG,KAAK,CAAC;uBAtCuB,SAAS;uBAMb,KAAK;yBAKpB,KAAK;2BAKH,KAAK;;IAYrC,kBAAkB;QAChB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAED,sBAAsB;QACpB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAMD,iBAAiB;QACf,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;QAC9D,MAAM,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;QACzC,OAAO,CACL,EAAC,IAAI,qDACH,KAAK,EAAE;gBACL,WAAW;gBACX,SAAS;aACV;YACD,EAAC,GAAG,qDAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAC,WAAW,EAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,SAAS;gBACvH,SAAS,CAAC,CAAC,CAAC,CACX,YAAM,KAAK,EAAC,QAAQ;oBAClB,YAAM,IAAI,EAAC,QAAQ,GAAQ,CACtB,CACR,CAAC,CAAC,CAAC,IAAI;gBACR,6DAAM,KAAK,EAAC,OAAO;oBACjB,8DAAa,CACR;gBACN,SAAS,CAAC,CAAC,CAAC,CACX,YAAM,KAAK,EAAC,QAAQ;oBAClB,YAAM,IAAI,EAAC,QAAQ,GAAQ,CACtB,CACR,CAAC,CAAC,CAAC,IAAI,CACJ;YACL,WAAW,CAAC,CAAC,CAAC,CACb,cAAQ,KAAK,EAAC,aAAa,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE;gBACtE,YAAM,KAAK,EAAC,iBAAiB,cAAe;gBAC5C,0BACc,MAAM,EAClB,KAAK,EAAC,4BAA4B,EAClC,IAAI,EAAC,MAAM,EACX,MAAM,EAAC,cAAc,kBACR,GAAG,oBACD,OAAO,qBACN,OAAO,EACvB,OAAO,EAAC,WAAW;oBACnB,YAAM,CAAC,EAAC,sBAAsB,GAAG,CAC7B,CACC,CACV,CAAC,CAAC,CAAC,IAAI,CACH,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Element, Prop, Event, EventEmitter } from '@stencil/core';\nimport { ChipVariants } from '../../interfaces/variants';\nimport { hasSlot } from '../../utils/helper';\n\n@Component({\n  tag: 'go-chip',\n  styleUrl: 'go-chip.scss',\n  shadow: false,\n})\nexport class GoChip {\n  @Element() el: HTMLElement;\n\n  /**\n   * Colour variant of the chip\n   */\n  @Prop({ reflect: true }) variant: ChipVariants = 'neutral';\n\n  /**\n   * If `outline` is true, the button will have a border based on selected variant\n   * @see `variant` property\n   */\n  @Prop({ reflect: true }) outline?: boolean = false;\n\n  /**\n   * Make chip clickable, `chipClick` event will be emitted on click\n   */\n  @Prop() clickable?: boolean = false;\n\n  /**\n   * Make chip dismissible, close button will be shown and `chipDismiss` event will be emitted when close button is clicked\n   */\n  @Prop() dismissible?: boolean = false;\n\n  /**\n   * Emitted on chip click, only if `clickable` is true\n   */\n  @Event() chipClick: EventEmitter;\n\n  /**\n   * Emitted on chip dismiss, only if `dismissible` is true\n   */\n  @Event() chipDismissed: EventEmitter;\n\n  onChipClickHandler() {\n    this.chipClick.emit();\n  }\n\n  onChipDismissedHandler() {\n    this.chipDismissed.emit();\n  }\n\n  private hasPrefix = false;\n\n  private hasSuffix = false;\n\n  componentWillLoad() {\n    this.hasPrefix = hasSlot(this.el, 'prefix');\n    this.hasSuffix = hasSlot(this.el, 'suffix');\n  }\n\n  render() {\n    const { hasPrefix, hasSuffix, clickable, dismissible } = this;\n    const Tag = clickable ? 'button' : 'div';\n    return (\n      <Host\n        class={{\n          dismissible,\n          clickable,\n        }}>\n        <Tag type={clickable ? 'button' : null} class=\"chip-main\" onClick={clickable ? () => this.onChipClickHandler() : undefined}>\n          {hasPrefix ? (\n            <span class=\"prefix\">\n              <slot name=\"prefix\"></slot>\n            </span>\n          ) : null}\n          <span class=\"label\">\n            <slot></slot>\n          </span>\n          {hasSuffix ? (\n            <span class=\"suffix\">\n              <slot name=\"suffix\"></slot>\n            </span>\n          ) : null}\n        </Tag>\n        {dismissible ? (\n          <button class=\"dismiss-btn\" onClick={() => this.onChipDismissedHandler()}>\n            <span class=\"visually-hidden\">Dismiss</span>\n            <svg\n              aria-hidden=\"true\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              viewBox=\"0 0 24 24\">\n              <path d=\"M18 6 6 18M6 6l12 12\" />\n            </svg>\n          </button>\n        ) : null}\n      </Host>\n    );\n  }\n}\n"]}