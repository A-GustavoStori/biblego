import { Host, h } from "@stencil/core";
import { hasSlot } from "../../utils/helper";
export class GoChip {
    constructor() {
        this.hasPrefix = false;
        this.hasSuffix = false;
        this.variant = 'neutral';
        this.outline = false;
        this.clickable = false;
        this.dismissible = false;
    }
    onChipClickHandler() {
        this.chipClick.emit();
    }
    onChipDismissedHandler() {
        this.chipDismissed.emit();
    }
    componentWillLoad() {
        this.hasPrefix = hasSlot(this.el, 'prefix');
        this.hasSuffix = hasSlot(this.el, 'suffix');
    }
    render() {
        const { hasPrefix, hasSuffix, clickable, dismissible } = this;
        const Tag = clickable ? 'button' : 'div';
        return (h(Host, { key: '2dda14289f7392d37b52cd1fdcb0fc213f676d97', class: {
                dismissible,
                clickable,
            } }, h(Tag, { key: 'ab632162bdcebc27c35037e1c324cf2b38bc78e2', type: clickable ? 'button' : null, class: "chip-main", onClick: clickable ? () => this.onChipClickHandler() : undefined }, hasPrefix ? (h("span", { class: "prefix" }, h("slot", { name: "prefix" }))) : null, h("span", { key: '048a2205d55a9e8159d5975b9811da34801ababc', class: "label" }, h("slot", { key: 'd5cf7bf0f531cb120a590a93fd5ec914bb48ea57' })), hasSuffix ? (h("span", { class: "suffix" }, h("slot", { name: "suffix" }))) : null), dismissible ? (h("button", { class: "dismiss-btn", onClick: () => this.onChipDismissedHandler() }, h("span", { class: "visually-hidden" }, "Dismiss"), h("svg", { "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M18 6 6 18M6 6l12 12" })))) : null));
    }
    static get is() { return "go-chip"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-chip.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-chip.css"]
        };
    }
    static get properties() {
        return {
            "variant": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ChipVariants",
                    "resolved": "\"critical\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\"",
                    "references": {
                        "ChipVariants": {
                            "location": "import",
                            "path": "../../interfaces/variants",
                            "id": "src/interfaces/variants.ts::ChipVariants"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Colour variant of the chip"
                },
                "attribute": "variant",
                "reflect": true,
                "defaultValue": "'neutral'"
            },
            "outline": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "see",
                            "text": " `variant` property"
                        }],
                    "text": "If `outline` is true, the button will have a border based on selected variant"
                },
                "attribute": "outline",
                "reflect": true,
                "defaultValue": "false"
            },
            "clickable": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Make chip clickable, `chipClick` event will be emitted on click"
                },
                "attribute": "clickable",
                "reflect": false,
                "defaultValue": "false"
            },
            "dismissible": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Make chip dismissible, close button will be shown and `chipDismiss` event will be emitted when close button is clicked"
                },
                "attribute": "dismissible",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "chipClick",
                "name": "chipClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted on chip click, only if `clickable` is true"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "chipDismissed",
                "name": "chipDismissed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted on chip dismiss, only if `dismissible` is true"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-chip.js.map
