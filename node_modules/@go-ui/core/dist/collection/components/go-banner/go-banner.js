import { Host, h } from "@stencil/core";
import { hasSlot } from "../../utils/helper";
export class GoBanner {
    constructor() {
        this.variant = 'info';
        this.heading = undefined;
        this.dismissible = false;
        this.isShowing = true;
        this.hasIcon = false;
    }
    // emit dismissed event on close button click
    handleClose() {
        this.isShowing = false;
        this.dismissed.emit();
    }
    // Store attributes inherited from the host element
    componentWillLoad() {
        this.hasIcon = hasSlot(this.el, 'icon');
    }
    render() {
        const { hasIcon, heading, dismissible, isShowing } = this;
        return (h(Host, { key: '6a6d5c76e4f2249e9eaf9b5cd3c1c5923d95a663', class: {
                'has-icon': hasIcon,
                dismissible,
                'is-showing': isShowing,
                'no-heading': !heading,
            } }, hasIcon ? (h("div", { class: "icon-col" }, h("slot", { name: "icon" }))) : null, h("section", { key: '9be1d2f4deb6eece692c4b1819be7cf262b4c60f', class: "banner-inner" }, h("div", { key: '364526d4880dc5806f3ca3e2084628c9ab7e793e', class: "banner-inner-content" }, heading ? h("h2", { class: "h5" }, heading) : null, h("slot", { key: 'bdb5d259862e396278877956610a46740f445bf8' })), dismissible ? (h("div", { class: "banner-inner-dismiss" }, h("go-button", { variant: "text", icon: true, class: "dismissible-btn", flat: true, onClick: () => this.handleClose(), round: true }, h("span", { class: "visually-hidden" }, "Dismiss"), h("svg", { "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M18 6 6 18M6 6l12 12" }))))) : null)));
    }
    static get is() { return "go-banner"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-banner.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-banner.css"]
        };
    }
    static get properties() {
        return {
            "variant": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "BannerVariants",
                    "resolved": "\"critical\" | \"info\" | \"success\"",
                    "references": {
                        "BannerVariants": {
                            "location": "import",
                            "path": "../../interfaces",
                            "id": "src/interfaces/index.ts::BannerVariants"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Type of banner"
                },
                "attribute": "variant",
                "reflect": true,
                "defaultValue": "'info'"
            },
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Heading of banner"
                },
                "attribute": "heading",
                "reflect": false
            },
            "dismissible": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If the banner can be dismissed, a close button will be rendered"
                },
                "attribute": "dismissible",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "isShowing": {},
            "hasIcon": {}
        };
    }
    static get events() {
        return [{
                "method": "dismissed",
                "name": "dismissed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-banner.js.map
