{"version":3,"file":"go-nav-list.js","sourceRoot":"","sources":["../../../../src/components/navigation/go-nav-list/go-nav-list.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAM/C,MAAM,OAAO,SAAS;;;;qBAasB,KAAK;;IAG/C,KAAK,CAAC,UAAU,CAAC,QAA6B;QAC5C,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACjC,OAAO,CACL;YACE,6DAAM,IAAI,EAAC,QAAQ;gBACjB,4DAAK,KAAK,EAAC,iBAAiB,GAAO,CAC9B;YACP,6DAAM,IAAI,EAAC,MAAM,IACd,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,IAAG,CAAC,CAAC,CAAC,CAAC,CACtB,UAAI,KAAK,EAAC,UAAU,IACjB,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;;gBACrB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,KAAI,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,0CAAE,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA,CAAC;gBACnF,OAAO,CACL,UAAI,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,IACjD,CAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,MAAM,EAAC,CAAC,CAAC,CACvB,mBAAa,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ;oBAC7C,mBAAa,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAC,QAAQ,GAAe,CACvD,CACf,CAAC,CAAC,CAAC,CACF,mBAAa,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,GAAgB,CACtD,CACE,CACN,CAAC;YACJ,CAAC,CAAC,CACC,CACN,CAAC,CAAC,CAAC,IAAI,CACH,CACH,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Element, Prop, State, Watch } from '@stencil/core';\nimport { INavItem } from '../../../interfaces';\nimport { parseJsonProp } from '../../../utils';\n@Component({\n  tag: 'go-nav-list',\n  styleUrl: 'go-nav-list.scss',\n  shadow: false,\n})\nexport class GoNavList {\n  @Element() el: HTMLElement;\n\n  /**\n   * list of navigation items to be displayed uuuuuu\n   */\n  @Prop() items: INavItem[] | string;\n\n  @State() navItems: INavItem[];\n\n  /**\n   * Make the list full width\n   */\n  @Prop({ reflect: true }) block: boolean = false;\n\n  @Watch('items')\n  async watchItems(newItems: INavItem[] | string) {\n    this.navItems = parseJsonProp(newItems);\n  }\n\n  componentWillLoad() {\n    this.navItems = parseJsonProp(this.items);\n  }\n\n  render() {\n    const { navItems, block } = this;\n    return (\n      <div>\n        <slot name=\"header\">\n          <div class=\"nav-list-header\"></div>\n        </slot>\n        <slot name=\"list\">\n          {navItems?.length > 0 ? (\n            <ul class=\"nav-list\">\n              {navItems.map((item) => {\n                const isCurrent = item.isCurrent || item?.children?.some((item) => item.isCurrent);\n                return (\n                  <li class={{ 'mb-1': true, 'is-current': isCurrent }}>\n                    {item.children?.length ? (\n                      <go-nav-list block={block} items={item.children}>\n                        <go-nav-link block={block} item={item} slot=\"header\"></go-nav-link>\n                      </go-nav-list>\n                    ) : (\n                      <go-nav-link block={block} item={item}></go-nav-link>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          ) : null}\n        </slot>\n      </div>\n    );\n  }\n}\n"]}