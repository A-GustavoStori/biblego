import { h } from "@stencil/core";
import { inheritAttributes, trapFocus, parseJsonProp } from "../../../utils";
import { renderIcon } from "../nav-helpers";
export class GoNavDrawer {
    constructor() {
        // Store attributes inherited from the host element
        this.inheritedAttrs = {};
        this.subMenus = null;
        this.position = 'left';
        this.items = undefined;
        this.navItems = null;
        this.active = false;
        this.label = 'Drawer';
        this.autoClose = false;
        this.currentSubMenus = [];
    }
    /**
     * Initialise the menu
     * @param items {INavItem[]} menu items to be rendered
     */
    async init(newItems) {
        this.navItems = parseJsonProp(newItems);
    }
    async open() {
        this.active = true;
        this.openEvent.emit();
    }
    async close() {
        while (this.currentSubMenus.length > 0) {
            await this.closeCurrentSubMenu();
        }
        this.active = false;
        this.closeEvent.emit();
    }
    async toggle() {
        if (this.active) {
            this.close();
        }
        else {
            this.open();
        }
    }
    componentWillLoad() {
        this.inheritedAttrs = inheritAttributes(this.el, ['class', 'style', 'items', 'active', 'position'], false);
        try {
            this.navItems = parseJsonProp(this.items);
        }
        catch (e) {
            console.warn('Could not parse nav items.', e);
        }
    }
    async closeCurrentSubMenu() {
        if (this.currentSubMenus.length === 0) {
            return;
        }
        const lastSubMenu = this.currentSubMenus.slice(-1)[0];
        lastSubMenu.classList.remove('active');
        lastSubMenu.querySelector('.nav-item-inner').setAttribute('aria-expanded', 'false');
        this.currentSubMenus = this.currentSubMenus.slice(0, -1);
    }
    openSubMenu(e) {
        const triggerBtn = e.target;
        const menuItem = triggerBtn.closest('li');
        menuItem.classList.add('active');
        triggerBtn.setAttribute('aria-expanded', 'true');
        trapFocus(menuItem.querySelector('.nav-menu'));
        this.currentSubMenus = [...this.currentSubMenus, menuItem];
    }
    handleNavItemClick(e, item) {
        var _a;
        if ((_a = item.linkAttrs) === null || _a === void 0 ? void 0 : _a.onClick) {
            item.linkAttrs.onClick(e);
        }
        if (this.autoClose) {
            this.close();
        }
        this.navItemClickEvent.emit(item);
    }
    renderNavItems(items, parentItem) {
        const isSubNav = !!parentItem;
        return (h("div", { class: { 'nav-menu': true, 'is-sub-nav': isSubNav } }, h("div", { class: "nav-drawer-header" }, h("div", { class: "header-row" }, parentItem ? (h("go-button", { class: "back-btn", flat: true, stack: true, variant: "text", compact: true, onClick: () => this.closeCurrentSubMenu() }, h("svg", { slot: "prefix", "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M19 12H5M12 19l-7-7 7-7" })), h("span", null, "Back"))) : (h("span", null)), !isSubNav && h("div", { class: "title" }, this.label), h("go-button", { class: "close-btn", flat: true, stack: true, variant: "text", compact: true, onClick: () => this.close() }, h("svg", { "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M18 6 6 18M6 6l12 12" })), h("span", null, "Close")))), (items === null || items === void 0 ? void 0 : items.length) > 0 ? (h("nav", { "aria-label": isSubNav ? parentItem.label : this.label }, isSubNav && parentItem.url ? (h("div", { class: "parent-link" }, h("go-link", Object.assign({ href: parentItem.url }, parentItem.linkAttrs, { onClick: (e) => this.handleNavItemClick(e, parentItem) }), h("span", { class: "nav-item-label" }, renderIcon(parentItem.icon), h("span", null, parentItem.label)), h("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M5 12h14M12 5l7 7-7 7" }))))) : null, h("ul", null, items.map((item) => this.renderNavItem(item))))) : null));
    }
    renderNavItem(item) {
        var _a;
        let Tag = 'a';
        const hasChildren = ((_a = item === null || item === void 0 ? void 0 : item.children) === null || _a === void 0 ? void 0 : _a.length) > 0;
        if (item.isCurrent) {
            Tag = 'span';
        }
        if (hasChildren) {
            Tag = 'button';
        }
        let attrs = null;
        if (Tag === 'a') {
            attrs = Object.assign(Object.assign({ href: item.url }, item.linkAttrs), { onClick: (e) => this.handleNavItemClick(e, item) });
        }
        if (Tag === 'button') {
            attrs = {
                'type': 'button',
                'aria-haspopup': 'true',
                'aria-expanded': 'false',
                'onClick': (e) => this.openSubMenu(e),
            };
        }
        return (h("li", { class: { 'nav-item': true, 'has-children': hasChildren, 'current': item.isCurrent } }, h(Tag, Object.assign({ class: "nav-item-inner" }, attrs), h("span", { class: "nav-item-label" }, renderIcon(item.icon), h("span", null, item.label)), hasChildren ? (h("svg", { class: "children-indicator", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "m9 18 6-6-6-6" }))) : null), item.children ? this.renderNavItems(item.children, item) : null));
    }
    render() {
        let { navItems, active, position, inheritedAttrs } = this;
        return (h("go-overlay", Object.assign({ key: '6af4802f093470ef5170198571a1fb1c0c873f86', active: active }, inheritedAttrs, { onOverlayClose: () => this.close() }), h("div", { key: '0444ca13a9d55c0d823b76569b68f3d904899b2c', class: { 'nav-drawer': true, 'open': active, [position]: !!position } }, navItems ? h("div", { class: "nav-container" }, this.renderNavItems(navItems)) : h("slot", null))));
    }
    static get is() { return "go-nav-drawer"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-nav-drawer.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-nav-drawer.css"]
        };
    }
    static get properties() {
        return {
            "position": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'left' | 'right'",
                    "resolved": "\"left\" | \"right\"",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Position where the navigation should appear from"
                },
                "attribute": "position",
                "reflect": true,
                "defaultValue": "'left'"
            },
            "items": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "INavItem[] | string",
                    "resolved": "INavItem[] | string",
                    "references": {
                        "INavItem": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::INavItem"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Navigation items to be rendered"
                },
                "attribute": "items",
                "reflect": false
            },
            "active": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "keep track of open state of drawer"
                },
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "label for screen readers"
                },
                "attribute": "label",
                "reflect": false,
                "defaultValue": "'Drawer'"
            },
            "autoClose": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "if true, clicking on nav item will close the drawer automatically"
                },
                "attribute": "auto-close",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "navItems": {},
            "currentSubMenus": {}
        };
    }
    static get events() {
        return [{
                "method": "openEvent",
                "name": "open",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the nav drawer is opened"
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "closeEvent",
                "name": "close",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the nav drawer is closed"
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "navItemClickEvent",
                "name": "navItemClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the nav item is clicked"
                },
                "complexType": {
                    "original": "INavItem",
                    "resolved": "INavItem",
                    "references": {
                        "INavItem": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::INavItem"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "init": {
                "complexType": {
                    "signature": "(newItems: INavItem[] | string) => Promise<void>",
                    "parameters": [{
                            "name": "newItems",
                            "type": "string | INavItem[]",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "INavItem": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::INavItem"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Initialise the menu",
                    "tags": [{
                            "name": "param",
                            "text": "items menu items to be rendered"
                        }]
                }
            },
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "toggle": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "items",
                "methodName": "init"
            }];
    }
}
//# sourceMappingURL=go-nav-drawer.js.map
