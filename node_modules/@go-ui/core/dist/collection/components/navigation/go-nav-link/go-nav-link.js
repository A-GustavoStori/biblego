import { h, Host } from "@stencil/core";
import { $attrs, parseJsonProp } from "../../../utils/helper";
export class GoNavLink {
    constructor() {
        this.inheritedAttrs = {};
        this.item = undefined;
        this.parsedItem = undefined;
        this.label = undefined;
        this.url = undefined;
        this.icon = undefined;
        this.description = undefined;
        this.isCurrent = undefined;
        this.linkAttrs = undefined;
        this.showArrow = false;
        this.block = false;
    }
    parseNavItem() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        if (this.item) {
            this.parsedItem = parseJsonProp(this.item);
        }
        // component props will override item data if both are present
        const icon = (_a = parseJsonProp(this.icon)) !== null && _a !== void 0 ? _a : (_b = this.parsedItem) === null || _b === void 0 ? void 0 : _b.icon;
        const linkAttrs = (_c = parseJsonProp(this.linkAttrs)) !== null && _c !== void 0 ? _c : (_d = this.parsedItem) === null || _d === void 0 ? void 0 : _d.linkAttrs;
        this.parsedItem = Object.assign(Object.assign({}, this.parsedItem), { label: (_e = this.label) !== null && _e !== void 0 ? _e : (_f = this.parsedItem) === null || _f === void 0 ? void 0 : _f.label, url: (_g = this.url) !== null && _g !== void 0 ? _g : (_h = this.parsedItem) === null || _h === void 0 ? void 0 : _h.url, icon, description: (_j = this.description) !== null && _j !== void 0 ? _j : (_k = this.parsedItem) === null || _k === void 0 ? void 0 : _k.description, isCurrent: (_l = this.isCurrent) !== null && _l !== void 0 ? _l : (_m = this.parsedItem) === null || _m === void 0 ? void 0 : _m.isCurrent, linkAttrs });
    }
    componentWillLoad() {
        this.inheritedAttrs = $attrs.bind(this)();
        this.parseNavItem();
    }
    render() {
        const { inheritedAttrs } = this;
        if (!this.parsedItem) {
            return (h("a", Object.assign({}, inheritedAttrs), h("slot", null)));
        }
        const { isCurrent, url, icon, label, description } = this.parsedItem;
        const isSpan = isCurrent || !url;
        let Tag = isSpan ? 'span' : 'go-link';
        let attrs = Object.assign(Object.assign({}, this.parsedItem.linkAttrs), inheritedAttrs);
        attrs = !isSpan
            ? Object.assign({ href: url, onClick: (event) => {
                    this.navEvent.emit({ event, item: this.item });
                } }, attrs) : Object.assign({}, attrs);
        attrs['class'] = ` nav-item-link ${attrs['class'] ? attrs['class'] : ''}${isCurrent ? ' current' : ''}`;
        return (h(Host, null, h(Tag, Object.assign({}, attrs), icon ? typeof icon === 'string' ? h("go-icon", { name: icon }) : h("go-icon", Object.assign({}, icon)) : null, h("span", { class: "nav-link-text" }, h("span", { class: "nav-link-text-label" }, label), description ? h("span", { class: "nav-link-text-description" }, description) : null), url && this.showArrow ? (h("svg", { class: "arrow", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24", focusable: "false", "aria-hidden": "true" }, h("line", { x1: "5", y1: "12", x2: "19", y2: "12" }), h("polyline", { points: "12 5 19 12 12 19" }))) : null)));
    }
    static get is() { return "go-nav-link"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-nav-link.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-nav-link.css"]
        };
    }
    static get properties() {
        return {
            "item": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "INavItem | string",
                    "resolved": "INavItem | string",
                    "references": {
                        "INavItem": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::INavItem"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "navigation item"
                },
                "attribute": "item",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "label",
                "reflect": false
            },
            "url": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "url",
                "reflect": false
            },
            "icon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IIcon | string",
                    "resolved": "IconProps | string",
                    "references": {
                        "IIcon": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::IIcon"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "icon",
                "reflect": false
            },
            "description": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "description",
                "reflect": false
            },
            "isCurrent": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "is-current",
                "reflect": false
            },
            "linkAttrs": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "UnknownObject | string",
                    "resolved": "string | { [key: string]: unknown; }",
                    "references": {
                        "UnknownObject": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::UnknownObject"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "link-attrs",
                "reflect": false
            },
            "showArrow": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "show arrow at the end of the link"
                },
                "attribute": "show-arrow",
                "reflect": false,
                "defaultValue": "false"
            },
            "block": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "full width"
                },
                "attribute": "block",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "parsedItem": {}
        };
    }
    static get events() {
        return [{
                "method": "navEvent",
                "name": "navigate",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "item",
                "methodName": "parseNavItem"
            }];
    }
}
//# sourceMappingURL=go-nav-link.js.map
