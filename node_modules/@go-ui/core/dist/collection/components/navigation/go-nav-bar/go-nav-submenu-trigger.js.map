{"version":3,"file":"go-nav-submenu-trigger.js","sourceRoot":"","sources":["../../../../src/components/navigation/go-nav-bar/go-nav-submenu-trigger.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAKnE,MAAM,OAAO,mBAAmB;;;sBAKH,KAAK;;IAIhC,aAAa;QACX,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAA4B,CAAC;YACnF,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACpB,OAAO,CAAC,gEAAgE,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YACrG,CAAC;YACD,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAc,EAAE,EAAE;gBAC3D,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,eAAe;QACb,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,MAAM;QACJ,MAAM,GAAG,GAAG,QAAQ,CAAC;QACrB,OAAO,CACL,EAAC,GAAG,qDACF,KAAK,EAAC,gBAAgB,EACtB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,EACrC,IAAI,EAAC,QAAQ,mBACC,MAAM,mBACL,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,mBACzC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;YAC7C,6DAAM,KAAK,EAAC,gBAAgB;gBAC1B,8DAAa,CACR;YACP,4DACE,KAAK,EAAC,4BAA4B,EAClC,IAAI,EAAC,MAAM,EACX,MAAM,EAAC,cAAc,kBACR,GAAG,oBACD,OAAO,qBACN,OAAO,EACvB,OAAO,EAAC,WAAW;gBACnB,6DAAM,CAAC,EAAC,cAAc,GAAG,CACrB,CACF,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { warning } from '@/utils';\nimport { Component, Prop, h, Element, State } from '@stencil/core';\n\n@Component({\n  tag: 'go-nav-submenu-trigger',\n})\nexport class GoNavSubmenuTrigger {\n  @Element() el: HTMLElement;\n\n  @Prop({ reflect: true }) controls: string;\n\n  @State() isOpen: boolean = false;\n\n  submenuEl: HTMLGoNavSubmenuElement;\n\n  loadSubmenuEl() {\n    if (this.controls) {\n      this.submenuEl = document.getElementById(this.controls) as HTMLGoNavSubmenuElement;\n      if (!this.submenuEl) {\n        warning('<go-nav-submenu-trigger> is missing <go-nav-submenu> with id: ' + this.controls, this.el);\n      }\n      this.submenuEl.addEventListener('toggle', (e: CustomEvent) => {\n        this.isOpen = e.detail.isOpen;\n      });\n    }\n  }\n\n  toggleOpenState() {\n    this.submenuEl.toggle();\n  }\n\n  componentDidLoad() {\n    this.loadSubmenuEl();\n  }\n\n  render() {\n    const Tag = 'button';\n    return (\n      <Tag\n        class=\"nav-item-inner\"\n        onClick={() => this.toggleOpenState()}\n        type=\"button\"\n        aria-haspopup=\"true\"\n        aria-controls={this.controls ? this.controls : undefined}\n        aria-expanded={this.isOpen ? 'true' : 'false'}>\n        <span class=\"nav-item-label\">\n          <slot></slot>\n        </span>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          viewBox=\"0 0 24 24\">\n          <path d=\"m6 9 6 6 6-6\" />\n        </svg>\n      </Tag>\n    );\n  }\n}\n"]}