import { hasSlot, onClickOutside, onEscape, warning } from "../../../utils/index";
import { h } from "@stencil/core";
export class GoNavSubmenu {
    constructor() {
        this.clickOutsideCleanUp = null;
        this.escapeCleanUp = null;
        this.hasHeaderSlot = false;
        this.columns = 1;
        this.isOpen = false;
    }
    async open() {
        this.isOpen = true;
        this.toggleEvent.emit({ isOpen: true });
        window.requestAnimationFrame(() => {
            // click outside to close menus
            this.clickOutsideCleanUp = onClickOutside(this.el, () => this.close());
            // esc to close menus
            this.escapeCleanUp = onEscape(document, () => this.close());
        });
    }
    async close() {
        this.isOpen = false;
        this.toggleEvent.emit({ isOpen: false });
        this.clickOutsideCleanUp && this.clickOutsideCleanUp();
        this.escapeCleanUp && this.escapeCleanUp();
    }
    async toggle() {
        if (this.isOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    componentWillLoad() {
        this.parentNavItem = this.el.closest('go-nav-item');
        if (!this.parentNavItem) {
            warning('<go-nav-submenu> must be a child of <go-nav-item>', this.el);
            return;
        }
        this.hasHeaderSlot = hasSlot(this.el, 'submenu-header');
    }
    render() {
        const { columns, isOpen, hasHeaderSlot } = this;
        return (h("div", { key: 'ac5bc09df1a4ebbb7996e60832e3a2899f38bfa1', class: { 'submenu-container': true, 'open': isOpen }, style: { '--submenu-columns': String(columns) } }, hasHeaderSlot ? (h("div", { class: "submenu-header" }, h("slot", { name: "submenu-header" }))) : null, h("div", { key: '196f1c3f4ebc2de3d75de0967655f1b6fd08d95c', class: "submenu-body" }, h("slot", { key: '00194d39b83582368dce9e42e9eb2e22c01d87f7' }))));
    }
    static get is() { return "go-nav-submenu"; }
    static get properties() {
        return {
            "columns": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "columns",
                "reflect": false,
                "defaultValue": "1"
            }
        };
    }
    static get states() {
        return {
            "isOpen": {}
        };
    }
    static get events() {
        return [{
                "method": "toggleEvent",
                "name": "toggle",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "toggle": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-nav-submenu.js.map
