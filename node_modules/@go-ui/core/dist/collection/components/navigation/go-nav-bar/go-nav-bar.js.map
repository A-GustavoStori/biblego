{"version":3,"file":"go-nav-bar.js","sourceRoot":"","sources":["../../../../src/components/navigation/go-nav-bar/go-nav-bar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAExF,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAO/C,MAAM,OAAO,QAAQ;;QAiBnB,mDAAmD;QAC3C,mBAAc,GAAG,EAAE,CAAC;;wBATI,IAAI;qBAMpB,MAAM;;IAItB,KAAK,CAAC,iBAAiB;QACrB,IAAI,CAAC,cAAc,GAAG,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QAE9E,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IAEH,KAAK,CAAC,YAAY,CAAC,QAA6B;QAC9C,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAGD,KAAK,CAAC,UAAU,CAAC,QAA6B;QAC5C,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM;QACJ,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;QAE/C,OAAO,CACL,EAAC,IAAI,qEAAK,cAAc;YACtB,0EAAiB,KAAK;gBACpB,4DAAK,KAAK,EAAC,WAAW;oBACpB,4DAAK,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,eAAe;wBACpC,+DAAO,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,mBAAa,IAAI,EAAE,IAAI,GAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAQ,CAC5F,CACF,CACF,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, h, Method, Prop, State, Host, Watch } from '@stencil/core';\nimport { INavItem } from '../../../interfaces';\nimport { inheritAttributes } from '../../../utils/helper';\nimport { parseJsonProp } from '../../../utils';\n\n@Component({\n  tag: 'go-nav-bar',\n  styleUrl: 'go-nav-bar.scss',\n  shadow: false,\n})\nexport class GoNavBar {\n  @Element() el: HTMLElement;\n\n  /**\n   * Navigation items to be rendered\n   * if provided, slot content will not be rendered.\n   */\n  @Prop() items?: INavItem[] | string;\n\n  @State() navItems: INavItem[] = null;\n\n  /**\n   * Label for the navigation.\n   * This helps screen reader users to quickly navigate to teh correct nav landmark\n   */\n  @Prop() label = 'Main';\n\n  // Store attributes inherited from the host element\n  private inheritedAttrs = {};\n  async componentWillLoad() {\n    this.inheritedAttrs = inheritAttributes(this.el, ['class', 'style', 'items']);\n\n    await this.loadNavItems(this.items);\n  }\n\n  /**\n   * Load nav items\n   * @param items {INavItem[]} menu items to be rendered\n   */\n  @Method()\n  async loadNavItems(newItems: INavItem[] | string) {\n    this.navItems = parseJsonProp(newItems);\n  }\n\n  @Watch('items')\n  async watchItems(newItems: INavItem[] | string) {\n    this.navItems = parseJsonProp(newItems);\n  }\n\n  render() {\n    let { label, navItems, inheritedAttrs } = this;\n\n    return (\n      <Host {...inheritedAttrs}>\n        <nav aria-label={label}>\n          <div class=\"container\">\n            <div role=\"list\" class=\"nav-menu-root\">\n              <slot>{navItems ? navItems.map((item) => <go-nav-item item={item}></go-nav-item>) : null}</slot>\n            </div>\n          </div>\n        </nav>\n      </Host>\n    );\n  }\n}\n"]}