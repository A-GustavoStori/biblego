import { h, Host } from "@stencil/core";
import { inheritAttributes } from "../../../utils/helper";
import { parseJsonProp } from "../../../utils";
export class GoNavBar {
    constructor() {
        // Store attributes inherited from the host element
        this.inheritedAttrs = {};
        this.items = undefined;
        this.navItems = null;
        this.label = 'Main';
    }
    async componentWillLoad() {
        this.inheritedAttrs = inheritAttributes(this.el, ['class', 'style', 'items']);
        await this.loadNavItems(this.items);
    }
    /**
     * Load nav items
     * @param items {INavItem[]} menu items to be rendered
     */
    async loadNavItems(newItems) {
        this.navItems = parseJsonProp(newItems);
    }
    async watchItems(newItems) {
        this.navItems = parseJsonProp(newItems);
    }
    render() {
        let { label, navItems, inheritedAttrs } = this;
        return (h(Host, Object.assign({ key: '5868c9430c16cb541bcd34a16975ddd66194534c' }, inheritedAttrs), h("nav", { key: 'd2bfb256453ba34d53893e9f9c033b34d6c957d1', "aria-label": label }, h("div", { key: '181913a55e2cbd42f9fc35dfd33dbb0d6853e7ad', class: "container" }, h("div", { key: 'f4f37b300f5d85506d04284be579d18a2fc528ce', role: "list", class: "nav-menu-root" }, h("slot", { key: '2de2cb39af8890d08b944c87353021d207ccdaf8' }, navItems ? navItems.map((item) => h("go-nav-item", { item: item })) : null))))));
    }
    static get is() { return "go-nav-bar"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-nav-bar.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-nav-bar.css"]
        };
    }
    static get properties() {
        return {
            "items": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "INavItem[] | string",
                    "resolved": "INavItem[] | string",
                    "references": {
                        "INavItem": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::INavItem"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Navigation items to be rendered\nif provided, slot content will not be rendered."
                },
                "attribute": "items",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Label for the navigation.\nThis helps screen reader users to quickly navigate to teh correct nav landmark"
                },
                "attribute": "label",
                "reflect": false,
                "defaultValue": "'Main'"
            }
        };
    }
    static get states() {
        return {
            "navItems": {}
        };
    }
    static get methods() {
        return {
            "loadNavItems": {
                "complexType": {
                    "signature": "(newItems: INavItem[] | string) => Promise<void>",
                    "parameters": [{
                            "name": "newItems",
                            "type": "string | INavItem[]",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "INavItem": {
                            "location": "import",
                            "path": "../../../interfaces",
                            "id": "src/interfaces/index.ts::INavItem"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Load nav items",
                    "tags": [{
                            "name": "param",
                            "text": "items menu items to be rendered"
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "items",
                "methodName": "watchItems"
            }];
    }
}
//# sourceMappingURL=go-nav-bar.js.map
