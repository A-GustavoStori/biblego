import { Host, h } from "@stencil/core";
export class GoProgress {
    constructor() {
        this.min = 0;
        this.max = 100;
        this.value = undefined;
        this.label = undefined;
        this.labelledby = undefined;
        this.indeterminate = false;
        this.showPercentage = false;
        this.percentage = undefined;
    }
    updatePercentage(newValue) {
        if (typeof newValue !== 'number' || !this.max) {
            this.percentage = 0;
            this.indeterminate = true;
        }
        const total = this.max - this.min;
        this.percentage = Math.round((newValue / total) * 100);
    }
    componentWillLoad() {
        this.updatePercentage(this.value);
    }
    render() {
        const { percentage, indeterminate, label, labelledby, value, max, min, showPercentage } = this;
        let ariaAttrs = {
            'aria-valuenow': indeterminate ? null : value,
            'aria-valuemin': indeterminate ? null : min,
            'aria-valuemax': indeterminate ? null : max,
        };
        return (h(Host, { key: '71869d0f9c7c5b089da9aef617a2c548a2e32365' }, h("div", Object.assign({ key: '4fd1f11ddde42997fc3a0d9d69f7b78c58b2fb2a', class: { track: true, indeterminate }, "aria-label": label, "aria-labelledby": labelledby, role: "progressbar" }, ariaAttrs), h("slot", { key: 'bd7c57acd1bc834437b43d822a8663947a7c1285' }), h("span", { key: 'fe1e45107f322aaf96b9e028340c86ced3e72946', class: "bar", style: indeterminate ? null : { transform: `translateX(-${100 - percentage}%` } })), showPercentage ? h("span", { class: "percentage" }, percentage, "%") : null));
    }
    static get is() { return "go-progress"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-progress.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-progress.css"]
        };
    }
    static get properties() {
        return {
            "min": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "min value of the progress bar"
                },
                "attribute": "min",
                "reflect": false,
                "defaultValue": "0"
            },
            "max": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Total amount of work required for progress to complete"
                },
                "attribute": "max",
                "reflect": false,
                "defaultValue": "100"
            },
            "value": {
                "type": "number",
                "mutable": true,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "How much of the task that has been completed"
                },
                "attribute": "value",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Descriptive label for screen readers to identify the progress bar"
                },
                "attribute": "label",
                "reflect": false
            },
            "labelledby": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Id of the label element for the progress bar"
                },
                "attribute": "labelledby",
                "reflect": false
            },
            "indeterminate": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Set progress to indeterminate state"
                },
                "attribute": "indeterminate",
                "reflect": false,
                "defaultValue": "false"
            },
            "showPercentage": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Display percentage of completion"
                },
                "attribute": "show-percentage",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "percentage": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "value",
                "methodName": "updatePercentage"
            }];
    }
}
//# sourceMappingURL=go-progress.js.map
