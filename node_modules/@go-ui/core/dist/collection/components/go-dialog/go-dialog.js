import { h } from "@stencil/core";
import { uniqueId } from "lodash-es";
export class GoDialog {
    constructor() {
        // aria-labelledby https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html
        this.headingId = uniqueId('overlay-label-');
        this.active = false;
        this.persistent = false;
        this.heading = undefined;
        this.headingTag = 'h2';
    }
    async close() {
        this.active = false;
    }
    async open() {
        this.active = true;
    }
    watchActiveHandler(isActive) {
        if (isActive) {
            this.open();
            return;
        }
        this.close();
    }
    // keep active state in sync with overlay
    handleOverlayClose() {
        this.close();
    }
    render() {
        const { active, heading, persistent, headingId, headingTag: H } = this;
        return (h("go-overlay", { key: '008b1288f599b0614f7ffa88a4a8d30116025203', class: "go-dialog", persistent: persistent, role: "dialog", "aria-modal": "true", "aria-labelledby": headingId, active: active, "aria-hidden": active ? 'false' : 'true', ref: (el) => (this.overlayEl = el), onOverlayClose: () => this.handleOverlayClose() }, h("div", { key: 'a4119d4aee0daafc73dc85df57036b9b1bb7a49c', class: "overlay-heading", id: headingId }, h("slot", { key: 'cccc2708c0c33d3ff5b37e0048d947b79ef0364e', name: "heading" }, h(H, { key: '6c202c8fb7fa309ebacb029917eab2246d780844', class: "heading" }, heading)), !persistent ? (h("go-button", { class: "close-btn", flat: true, icon: true, stack: true, variant: "text", onClick: () => this.close(), "aria-label": "Close dialog" }, h("svg", { "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M18 6 6 18M6 6l12 12" })))) : null), h("slot", { key: 'ce5c2be7d4563350a16598925afbd784733178ee' })));
    }
    static get is() { return "go-dialog"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-dialog.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-dialog.css"]
        };
    }
    static get properties() {
        return {
            "active": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If this dialog is active"
                },
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            },
            "persistent": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key."
                },
                "attribute": "persistent",
                "reflect": false,
                "defaultValue": "false"
            },
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Heading of the overlay content"
                },
                "attribute": "heading",
                "reflect": false
            },
            "headingTag": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "HTML tag for the heading"
                },
                "attribute": "heading-tag",
                "reflect": false,
                "defaultValue": "'h2'"
            }
        };
    }
    static get methods() {
        return {
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "active",
                "methodName": "watchActiveHandler"
            }];
    }
}
//# sourceMappingURL=go-dialog.js.map
