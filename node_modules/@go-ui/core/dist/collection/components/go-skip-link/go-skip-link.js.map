{"version":3,"file":"go-skip-link.js","sourceRoot":"","sources":["../../../src/components/go-skip-link/go-skip-link.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACzE,OAAO,EAAE,QAAQ,EAAE,MAAM,WAAW,CAAC;AACrC,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAO7C,MAAM,OAAO,UAAU;;QAUrB;;WAEG;QACH,gBAAW,GAAY,KAAK,CAAC;sBAPH,MAAM;;;IAShC,iBAAiB;QACf,qBAAqB;QACrB,qBAAqB;QACrB,yDAAyD;QAEzD,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAgB,CAAC;QAEpE,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,CAAC,yBAAyB,IAAI,CAAC,MAAM,aAAa,CAAC,CAAC;YAC3D,OAAO;QACT,CAAC;QAED,IAAI,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC;YACtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC;QAED,IAAI,QAAQ,CAAC,EAAE,EAAE,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YACxC,OAAO;QACT,CAAC;QACD,qCAAqC;QACrC,MAAM,EAAE,GAAG,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACzC,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IACjC,CAAC;IAED,WAAW,CAAC,QAAqB,EAAE,EAAU;QAC3C,IAAI,CAAC,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,QAAQ,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,OAAO,CACL,EAAC,IAAI;YACH,0DAAG,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,2BAA2B;gBAC9C,8DAAa,CACX,CACC,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, h, Element, Prop, State } from '@stencil/core';\nimport { uniqueId } from 'lodash-es';\nimport { warning } from '../../utils/helper';\n\n@Component({\n  tag: 'go-skip-link',\n  styleUrl: 'go-skip-link.scss',\n  shadow: false,\n})\nexport class GoSkipLink {\n  @Element() el: HTMLElement;\n\n  /**\n   * Tell skip link which element to focus (supports any query selector)\n   */\n  @Prop() target?: string = 'main';\n\n  @State() href: string;\n\n  /**\n   * records if original target element has tabindex attribute set, if so, do not touch it\n   */\n  hasTabIndex: boolean = false;\n\n  componentWillLoad() {\n    // get target element\n    // check if id exists\n    // if not, generate random id and set it in the link href\n\n    const targetEl = document.querySelector(this.target) as HTMLElement;\n\n    if (!targetEl) {\n      warning(`[go-skip-link] target ${this.target} not found.`);\n      return;\n    }\n\n    if (targetEl.hasAttribute('tabindex')) {\n      this.hasTabIndex = true;\n    }\n\n    if (targetEl.id) {\n      this.setTabIndex(targetEl, targetEl.id);\n      return;\n    }\n    // generate a random id then set href\n    const id = uniqueId('skip-link-target-');\n    targetEl.id = id;\n    this.setTabIndex(targetEl, id);\n  }\n\n  setTabIndex(targetEl: HTMLElement, id: string): void {\n    this.href = `#${id}`;\n    if (!this.hasTabIndex) {\n      targetEl.setAttribute('tabindex', '-1');\n    }\n  }\n\n  render() {\n    const { href } = this;\n    return (\n      <Host>\n        <a href={href} class=\"visually-hidden-focusable\">\n          <slot></slot>\n        </a>\n      </Host>\n    );\n  }\n}\n"]}