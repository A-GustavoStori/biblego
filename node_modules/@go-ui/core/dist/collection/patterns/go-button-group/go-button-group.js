import { Host, h } from "@stencil/core";
export class GoButtonGroup {
    constructor() {
        this.block = undefined;
        this.connected = false;
    }
    async componentWillLoad() {
        // Make buttons inside take up full width on mobile.
        if (this.block) {
            this.el.querySelectorAll('go-button').forEach((button) => {
                button.setAttribute('block', this.block);
            });
        }
    }
    render() {
        const { connected } = this;
        return (h(Host, { key: '7c61599e31e82a4168e2caf394c5f0b54da3c8e6', role: "group", class: { connected } }, h("slot", { key: 'cbec52c7432c2e52a563d51e122e6f21310471f9' })));
    }
    static get is() { return "go-button-group"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-button-group.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-button-group.css"]
        };
    }
    static get properties() {
        return {
            "block": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Breakpoints",
                    "resolved": "\"all\" | \"desktop\" | \"large\" | \"mobile\" | \"tablet\"",
                    "references": {
                        "Breakpoints": {
                            "location": "import",
                            "path": "../../interfaces",
                            "id": "src/interfaces/index.ts::Breakpoints"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If specified, buttons within group will be full width on smaller devices and auto-width going forward. e.g. having `block=\"tablet\"` will make all buttons in group take up full width on mobile and tablet sizes and auto-width on larger devices."
                },
                "attribute": "block",
                "reflect": true
            },
            "connected": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "No gap between buttons."
                },
                "attribute": "connected",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-button-group.js.map
