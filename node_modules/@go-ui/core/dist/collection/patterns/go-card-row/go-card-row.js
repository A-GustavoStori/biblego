import { h } from "@stencil/core";
import { moveEl } from "../../utils/dom";
import { hasSlot } from "../../utils/helper";
/**
 * @slot default - Default slot, to be filled with `go-card` elements
 * @slot heading - Overwrite default `h2` heading for this card row section
 */
export class GoCardRow {
    constructor() {
        /**
         * class list for each card
         */
        this.cardClasses = ['card-col'];
        this.noStretch = false;
        this.cols = 1;
        this.colsTablet = 2;
        this.colsDesktop = 3;
        this.colsLarge = 4;
        this.stagger = undefined;
        this.heading = undefined;
        this.headingTag = 'h2';
        this.moreLinkHref = undefined;
        this.moreLinkText = undefined;
    }
    componentWillLoad() {
        // check if heading slot is used
        this.hasHeadingSlot = hasSlot(this.el, 'heading');
        // initialise intersection observer
        if (this.stagger) {
            this.inViewObserver = new IntersectionObserver((entries) => {
                entries.forEach((entry, i) => {
                    if (!entry.isIntersecting) {
                        return;
                    }
                    const card = entry.target;
                    // add stagger fade in effect
                    card.classList.add('stagger-fade-in');
                    card.style.cssText = `--stagger-delay: ${i * this.stagger}ms`;
                    // stop observing
                    this.inViewObserver.unobserve(card);
                });
            }, {
                threshold: 0.2, // >= 1/5th of card is in view
            });
        }
    }
    async componentDidLoad() {
        const { cols, colsTablet, colsDesktop, colsLarge } = this;
        // mobile cols
        this.cardClasses.push(`col-${Math.ceil(12 / cols)}`);
        this.cardClasses.push(`col-tablet-${Math.ceil(12 / colsTablet)}`);
        this.cardClasses.push(`col-desktop-${Math.ceil(12 / colsDesktop)}`);
        this.cardClasses.push(`col-large-${Math.ceil(12 / colsLarge)}`);
        this.loadCards();
    }
    loadCards() {
        const newCards = this.el.querySelectorAll('go-card:not(.loaded)');
        newCards.forEach((card) => {
            this.prepareCard(card, this.cardClasses);
        });
    }
    prepareCard(card, colClasses) {
        // create wrapper container
        const wrapper = document.createElement('div');
        wrapper.classList.add(...colClasses);
        // insert wrapper before el in the DOM tree
        // card.parentNode.insertBefore(wrapper, card);
        // move el into wrapper
        moveEl(card, wrapper);
        card.classList.add('loaded');
        // move card into correct element
        moveEl(wrapper, this.rowEl);
        if (this.stagger) {
            this.inViewObserver.observe(card);
        }
    }
    render() {
        const { noStretch, stagger, heading, moreLinkHref, moreLinkText, hasHeadingSlot, headingTag } = this;
        const headingRowProps = {
            heading,
            moreLinkHref,
            moreLinkText,
            headingTag,
        };
        return (h("section", { key: 'c461ee7c9d696beaf18b5d3dfd35933dd1ea3fa4' }, h("go-heading-row", Object.assign({ key: '753d97a14498115f302f49ebc3f1bef675144bf4' }, headingRowProps), hasHeadingSlot ? h("slot", { name: "heading" }) : null), h("div", { key: '8832c2812498f1ee4117a1ab103a64d3d7e20e80', class: {
                'card-row row': true,
                'no-stretch': noStretch,
                'stagger': !!stagger,
            }, ref: (el) => (this.rowEl = el) }, h("slot", { key: '825773ad5c0a4a0e79ea05358988041956f65c0e' }))));
    }
    static get is() { return "go-card-row"; }
    static get originalStyleUrls() {
        return {
            "$": ["go-card-row.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["go-card-row.css"]
        };
    }
    static get properties() {
        return {
            "noStretch": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "By default, `go-card-row` stretches all cards inside to the tallest card in view, unless this property is set to true."
                },
                "attribute": "no-stretch",
                "reflect": false,
                "defaultValue": "false"
            },
            "cols": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Number of columns from mobile breakpoint and up"
                },
                "attribute": "cols",
                "reflect": false,
                "defaultValue": "1"
            },
            "colsTablet": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Number of columns from tablet breakpoint and up"
                },
                "attribute": "cols-tablet",
                "reflect": false,
                "defaultValue": "2"
            },
            "colsDesktop": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Number of columns from desktop breakpoint and up"
                },
                "attribute": "cols-desktop",
                "reflect": false,
                "defaultValue": "3"
            },
            "colsLarge": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Number of columns from large breakpoint and up"
                },
                "attribute": "cols-large",
                "reflect": false,
                "defaultValue": "4"
            },
            "stagger": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "If set, cards will fade in one by one with the specified delay in milliseconds when they are in the viewport.\nuses `IntersectionObserver`, [see browser compatibility](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)"
                },
                "attribute": "stagger",
                "reflect": false
            },
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Heading for this card row section"
                },
                "attribute": "heading",
                "reflect": false
            },
            "headingTag": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "heading-tag",
                "reflect": false,
                "defaultValue": "'h2'"
            },
            "moreLinkHref": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "View more link href"
                },
                "attribute": "more-link-href",
                "reflect": false
            },
            "moreLinkText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "View more link text"
                },
                "attribute": "more-link-text",
                "reflect": false
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=go-card-row.js.map
