{"version":3,"file":"go-ui-md-plugin.js","sourceRoot":"","sources":["../../src/utils/go-ui-md-plugin.ts"],"names":[],"mappings":"AACA,OAAO,QAAQ,MAAM,wBAAwB,CAAC;AAC9C,OAAO,WAAW,MAAM,uBAAuB,CAAC;AAEhD,8BAA8B;AAC9B,MAAM,UAAU,UAAU,CAAC,EAAc;IACvC,SAAS;IACT,MAAM,aAAa,GAAG,CAAC,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;IACtD,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QAC7B,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,EAAE;YACxB,MAAM,EAAE,UAAU,MAAM,EAAE,GAAG;gBAC3B,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,IAAI,WAAW,EAAE,EAAE,CAAC,CAAC;gBAClD,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC7C,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC;oBAC9B,cAAc;oBACd,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC1D,OAAO,uBAAuB,IAAI,KAAK,WAAW,KAAK,CAAC;gBAC1D,CAAC;qBAAM,CAAC;oBACN,cAAc;oBACd,OAAO,gBAAgB,CAAC;gBAC1B,CAAC;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ;IACR,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,MAAM,EAAE,GAAG;QAC5D,oCAAoC;QACpC,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,YAAY,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAC7E,OAAO;QACT,CAAC;QACD,iBAAiB;QACjB,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,SAAS,CAAC;QAC5B,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,SAAS,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type MarkdownIt from 'markdown-it';\nimport iterator from 'markdown-it-for-inline';\nimport mdContainer from 'markdown-it-container';\n\n// add go-ui markdown renderer\nexport function goUiPlugin(md: MarkdownIt): void {\n  // banner\n  const bannerOptions = ['info', 'critical', 'success'];\n  bannerOptions.forEach((type) => {\n    md.use(mdContainer, type, {\n      render: function (tokens, idx) {\n        const regex = new RegExp(`^${type}\\\\s+(.*)$`, '');\n        var m = tokens[idx].info.trim().match(regex);\n        if (tokens[idx].nesting === 1) {\n          // opening tag\n          const headingAttr = m && m[1] ? ` heading=\"${m[1]}\"` : ``;\n          return `<go-banner variant=\"${type}\" ${headingAttr}>\\n`;\n        } else {\n          // closing tag\n          return '</go-banner>\\n';\n        }\n      },\n    });\n  });\n  // links\n  md.use(iterator, 'go-link', 'link_open', function (tokens, idx) {\n    // Make sure link contains only text\n    if (tokens[idx + 2].type !== 'link_close' || tokens[idx + 1].type !== 'text') {\n      return;\n    }\n    // Do replacement\n    tokens[idx].tag = 'go-link';\n    tokens[idx + 2].tag = 'go-link';\n  });\n}\n"]}