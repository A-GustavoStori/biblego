{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../src/utils/helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { prefersDark } from './match-media';\nimport { uniqueId } from 'lodash-es';\nimport JSON5 from 'json5';\n\ndeclare const __zone_symbol__requestAnimationFrame: any;\ndeclare const requestAnimationFrame: any;\n\n/**\n * Extract attributes set on the an element.\n * @param {HTMLElement} el - The element to check.\n * @param {string[]} [excludes=[]] - A list of attribute names to exclude.\n * @param {boolean} [remove=true] - Remove the attributes after extracting them.\n */\nexport const inheritAttributes = (el: HTMLElement, excludes: string[] = [], remove: boolean = true) => {\n  if (!el) {\n    return {};\n  }\n  const attributes = el.attributes as NamedNodeMap;\n  let attributeObject = {};\n  for (let i = 0; i < attributes.length; i++) {\n    const { name, value } = attributes[i];\n    // console.log(`${name} = ${value}`);\n    if (excludes.indexOf(name) === -1) {\n      attributeObject[name] = value;\n    }\n  }\n\n  if (remove) {\n    // remove inherited attributes from el\n    for (let key in attributeObject) {\n      el.removeAttribute(key);\n    }\n  }\n\n  return attributeObject;\n};\n\n/**\n * @deprecated use $attrs.bind(this)(true|false) in component\n * @param component stencil class instance\n * @param excludes exclude inheriting these attributes (besides class, style, id)\n */\nexport function inheritComponentAttrs(component, excludes: string[] = [], remove: boolean = true) {\n  if (!component.el) {\n    warning(`root element not found in component`, component);\n  }\n  return inheritAttributes(component.el, ['class', 'style', 'id', ...Array.from(excludes)], remove);\n}\n\n/**\n * get attributes that are not defined in a components props, without removing them from the host element\n * @returns list of attributes inherited from the host element\n */\nexport function $attrs(removeAttrs = false, elPropName = 'el') {\n  const propNames = Object.keys(Object.getPrototypeOf(this));\n  return inheritAttributes(\n    this[elPropName],\n    ['class', 'style', 'id', 'data-testid', 'slot', ...propNames],\n    removeAttrs,\n  );\n}\n\n/**\n * Extract the `id` from target element, then remove the original id attribute\n * @param el target element\n * @returns id specified in target element\n */\nexport function extractId(el: HTMLElement) {\n  const id = el.id;\n  el.removeAttribute('id');\n  return id;\n}\n\nexport function hasShadowDom(el: HTMLElement): boolean {\n  return !!el.shadowRoot && !!(el as any).attachShadow;\n}\n\nexport function hasSlot(el: HTMLElement, slotName?: string): boolean {\n  return !!el.querySelector('[slot=\"' + slotName + '\"]');\n}\n// export const clamp = (min: number, n: number, max: number) => {\n//   return Math.max(min, Math.min(n, max));\n// };\n\n// export const debounce = (func: (...args: any[]) => void, wait = 0) => {\n//   let timer: any;\n//   return (...args: any[]): any => {\n//     clearTimeout(timer);\n//     timer = setTimeout(func, wait, ...args);\n//   };\n// };\n\nexport const isDarkMode = () => {\n  const darkByAttribute =\n    document.documentElement.getAttribute('data-theme') === 'dark' ||\n    document.documentElement.getAttribute('color-theme') === 'dark';\n  return prefersDark() || darkByAttribute;\n};\n\n/*!\n * Get all direct descendant elements that match a selector\n * Dependency: the matches() polyfill: https://vanillajstoolkit.com/polyfills/matches/\n * (c) 2018 Chris Ferdinandi, MIT License, https://gomakethings.com\n * @param  {Node}   elem     The element to get direct descendants for\n * @param  {String} selector The selector to match against\n * @return {Array}           The matching direct descendants\n */\nexport function selectDirectChildren(elem: HTMLElement, selector: string): HTMLElement[] {\n  return Array.prototype.filter.call(elem.children, function (child) {\n    return child.matches(selector);\n  });\n}\n\nexport function warning(...args: any[]) {\n  console.log(`%c[Go UI warning]`, 'background: #e63a34; color: #fff; font-size: 24px;padding: 8px;');\n  console.warn(...args);\n}\n\n/**\n * Initialise id props (such as `labelId`, `hintId` etc) in stencil component\n * @param instance stencil component instance\n * @param rootEl stencil `@Element()` prop\n * @param idProps array of prop names such as `labelId` without the `Id` suffix, this array will be used to generate ids and assign them back to the class' props\n * @param prefix prefix for generated ids\n */\nexport function initIdProps(instance: any, rootEl: HTMLElement, idProps: string[], prefix: string) {\n  let id = extractId(rootEl);\n  if (!id) {\n    id = uniqueId(prefix);\n  }\n  instance.id = id;\n  idProps.forEach((key) => {\n    if (!instance[`${key}Id`]) {\n      instance[`${key}Id`] = `${id}-${key}`;\n    }\n  });\n}\n/**\n * parse json prop passed into a component\n * @param prop {T|string}\n */\nexport function parseJsonProp<T>(prop: T | string): T {\n  if (!prop) {\n    return null;\n  }\n  try {\n    return typeof prop === 'string' ? JSON5.parse<T>(prop) : prop;\n  } catch (e) {\n    warning('Could not parse prop', e);\n  }\n}\n"]}