import { EventEmitter } from '../../stencil-public-runtime';
import { Options } from 'markdown-it';
export declare class GoMd {
    el: HTMLElement;
    /**
     * Render inline markdown
     */
    inline?: boolean;
    /**
     * Markdown content to be rendered
     */
    content: string;
    /**
     * url to load remote markdown content
     * if `src` is set, content in the `content` prop will be overwritten
     */
    src: string;
    /**
     * [markdown-it](https://github.com/markdown-it/markdown-it) options
     * **Note**: if `use-go-ui` is set to true, these options will be overwritten
     */
    mdOptions?: Options | string;
    /**
     * If set to true, `go-md` will use [DOMPurify](https://nodei.co/npm/dompurify/) to sanitise the output HTML before inserting it into the DOM
     */
    sanitise?: boolean;
    /**
     * Use go-ui markdown renderer:
     * - Only `typographer` is enabled in markdown-it options
     *
     * - linkify with [`go-link`](https://go-ui.com/docs/components/go-link)
     * - [container](https://github.com/markdown-it/markdown-it-container) banners with [`go-banner`](https://go-ui.com/docs/components/go-banner)
     */
    useGoUi?: boolean;
    init: EventEmitter;
    rendered: EventEmitter;
    private md;
    private createMdInstance;
    private initialiseRenderer;
    /**
     * Get the rendered HTML
     * @returns output html
     */
    getRenderedContent(input?: string): Promise<string>;
    renderSrc(): Promise<void>;
    renderContent(): Promise<void>;
    componentWillLoad(): Promise<void>;
    handleSrcChange(): Promise<void>;
    handleContentChange(): Promise<void>;
    handleMdOptionsChange(): Promise<void>;
    render(): any;
}
