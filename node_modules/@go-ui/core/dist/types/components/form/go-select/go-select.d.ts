import { EventEmitter } from '../../../stencil-public-runtime';
import { FieldValue, GoChangeEventDetail, SelectOption, SelectProps } from "../../../interfaces/index";
export declare class GoSelect implements SelectProps {
    el: HTMLElement;
    name: string;
    label: string;
    labelId?: string;
    suffixId?: string;
    hintId?: string;
    errorId?: string;
    disabled?: boolean;
    hint?: string;
    error?: string | boolean;
    readonly?: boolean;
    value?: FieldValue;
    /**
     * Array of options.
     * Note:
     * Sometimes frameworks may incorrectly pass the result of Array.toString() into this prop,
     * `go-select` tries to obsorb this issue by trying to do a `split(',')` on the options prop
     * if a string is passed in.
     * This means the accepted formats include:
     * 1. array of objects of type `{label: string, value: string}`
     * 2. array of strings (e.g. ['Apple', 'Orange', 'Banana'])
     * 3. string, toString() result of format 2 (i.e. 'Apple,Orange,Banana')
     * 4. string, option 1 or 2 passed in as string that can be parsed by [JSON5](https://json5.org/)
     */
    options: SelectOption[] | string[] | string;
    /**
     * parsed options array
     */
    parsedOptions: SelectOption[];
    /**
     * common form control properties
     */
    attrs: any;
    hasNamedSlot: {
        [key: string]: boolean;
    };
    prefixer: string;
    controlId: any;
    controlEl: HTMLElement;
    componentWillLoad(): Promise<void>;
    loadOptions(): void;
    loadValue(): void;
    /**
     * Emit custom event with selected value
     */
    goChange: EventEmitter<GoChangeEventDetail<string>>;
    activeIndex: number;
    open: boolean;
    searchString: string;
    searchTimeout: number | null;
    selectedIndex: number;
    selectedLabel: string;
    dropdownWidth: string;
    private activeOptionRef;
    private ignoreBlur;
    private inputRef;
    private listboxRef;
    handleDomOnOpen(isOpen: any): void;
    render(): any[];
    private getSearchString;
    private onComboKeyDown;
    private onComboBlur;
    private onComboType;
    private onOptionChange;
    private onOptionClick;
    private onOptionMouseDown;
    private selectOption;
    private updateMenuState;
}
