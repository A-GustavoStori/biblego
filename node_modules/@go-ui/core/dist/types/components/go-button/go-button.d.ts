import { Breakpoints, ColorVariants } from '../../interfaces';
/**
 * @slot default - Button text
 * @slot prefix - Use this slot to prepend content to the button.
 * @slot suffix - Use this slot to append content to the button.
 */
export declare class GoButton {
    el: HTMLElement;
    /**
     * Html type of the button
     */
    type: 'submit' | 'reset' | 'button';
    /**
     * If this button is disabled
     */
    disabled?: boolean;
    /**
     * Button variants
     */
    variant?: ColorVariants | 'text';
    /**
     * If set, the button will take up the full width of its parent
     * If block="{breakpoint}" is set, the button will take up the full width for the specified breakpoint. e.g. a `block="mobile"` button will display full width on mobile devices.
     * If block="all", the button will take full width on all devices.
     */
    block?: Breakpoints;
    /**
     * If `outline` is true, the button will have a border based on selected variant
     * @see `variant` property
     */
    outline?: boolean;
    /**
     * Outline style with filled background
     */
    outlineFill?: boolean;
    /**
     * If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant
     */
    flat?: boolean;
    /**
     * If button should have pill-shaped corners
     */
    round?: boolean;
    /**
     * Circle shaped icon only button that has min size of 40px for touch devices
     */
    icon?: boolean;
    /**
     * Stack elements inside the button
     */
    stack?: boolean;
    /**
     * Reduce inner gaps and outer paddings
     */
    compact?: boolean;
    /**
     * If the button has an href, it will be rendered as an anchor tag
     */
    href?: string;
    /**
     * If the button is loading
     */
    loading: boolean;
    /**
     * Screen reader announcement for loading state
     */
    loadingAnouncement?: string;
    blockClasses: string;
    inheritedAttributes: any;
    nativeEl: HTMLElement;
    componentWillLoad(): void;
    updateInnerButtonAttributes(): void;
    handleBlockChange(block: Breakpoints): void;
    render(): any;
}
