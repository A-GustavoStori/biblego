/**
 * Extract attributes set on the an element.
 * @param {HTMLElement} el - The element to check.
 * @param {string[]} [excludes=[]] - A list of attribute names to exclude.
 * @param {boolean} [remove=true] - Remove the attributes after extracting them.
 */
export declare const inheritAttributes: (el: HTMLElement, excludes?: string[], remove?: boolean) => {};
/**
 * @deprecated use $attrs.bind(this)(true|false) in component
 * @param component stencil class instance
 * @param excludes exclude inheriting these attributes (besides class, style, id)
 */
export declare function inheritComponentAttrs(component: any, excludes?: string[], remove?: boolean): {};
/**
 * get attributes that are not defined in a components props, without removing them from the host element
 * @returns list of attributes inherited from the host element
 */
export declare function $attrs(removeAttrs?: boolean, elPropName?: string): {};
/**
 * Extract the `id` from target element, then remove the original id attribute
 * @param el target element
 * @returns id specified in target element
 */
export declare function extractId(el: HTMLElement): string;
export declare function hasShadowDom(el: HTMLElement): boolean;
export declare function hasSlot(el: HTMLElement, slotName?: string): boolean;
export declare const isDarkMode: () => boolean;
/*!
 * Get all direct descendant elements that match a selector
 * Dependency: the matches() polyfill: https://vanillajstoolkit.com/polyfills/matches/
 * (c) 2018 Chris Ferdinandi, MIT License, https://gomakethings.com
 * @param  {Node}   elem     The element to get direct descendants for
 * @param  {String} selector The selector to match against
 * @return {Array}           The matching direct descendants
 */
export declare function selectDirectChildren(elem: HTMLElement, selector: string): HTMLElement[];
export declare function warning(...args: any[]): void;
/**
 * Initialise id props (such as `labelId`, `hintId` etc) in stencil component
 * @param instance stencil component instance
 * @param rootEl stencil `@Element()` prop
 * @param idProps array of prop names such as `labelId` without the `Id` suffix, this array will be used to generate ids and assign them back to the class' props
 * @param prefix prefix for generated ids
 */
export declare function initIdProps(instance: any, rootEl: HTMLElement, idProps: string[], prefix: string): void;
/**
 * parse json prop passed into a component
 * @param prop {T|string}
 */
export declare function parseJsonProp<T>(prop: T | string): T;
