import { TocProps } from '../../components/go-toc/go-toc';
import { INavItem } from '../../interfaces';
export type SidebarPosition = 'start' | 'end';
export interface ContentLayoutProps {
    pageHeading: string;
    preHeading?: string;
    intro?: string;
    breadcrumbs?: INavItem[] | string;
    heroImgSrc?: string;
    heroImgAlt?: string;
    toc?: boolean;
    tocProps?: TocProps;
    sidebarMobilePosition?: SidebarPosition;
    sidebarDesktopPosition?: SidebarPosition;
}
/**
 * @slot intro - Hero section intro text
 * @slot main - Main section
 */
export declare class GoContentLayout implements ContentLayoutProps {
    el: HTMLElement;
    pageHeading: string;
    preHeading?: string;
    intro?: string;
    breadcrumbs?: INavItem[] | string;
    heroImgSrc?: string;
    heroImgAlt?: string;
    /**
     * no hero banner
     */
    noHero?: boolean;
    /**
     * If the "On this page" table of content section should be displayed
     */
    toc?: boolean;
    /**
     * Props to pass into the table of content ([see `go-toc` props](/docs/components/go-toc#go-toc-props))
     */
    tocProps?: TocProps;
    /**
     * sidebar position on mobile screens
     * possible values are `start` and `end`
     */
    sidebarMobilePosition?: SidebarPosition;
    /**
     * sidebar position on desktop screens
     * possible values are `start` and `end`
     */
    sidebarDesktopPosition?: SidebarPosition;
    /**
     * If sidebar should be sticky
     */
    sidebarSticky?: boolean;
    tocEl: HTMLGoTocElement;
    sidebarTemplate: HTMLElement;
    sidebarContainerStart: HTMLElement;
    sidebarContainerEnd: HTMLElement;
    initToc(): Promise<void>;
    computedSidebarPosition: SidebarPosition | null;
    hasSidebar: boolean;
    componentWillLoad(): Promise<void>;
    rowEl: HTMLElement;
    adjustSidebarPosition(pos: SidebarPosition | null): void;
    componentDidLoad(): void;
    render(): any;
}
