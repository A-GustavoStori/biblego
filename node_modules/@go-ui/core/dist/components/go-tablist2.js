import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const JUSTIFY_VALUES_MAP = {
    normal: 'normal',
    start: 'flex-start',
    end: 'flex-end',
    center: 'center',
    between: 'space-between',
    around: 'space-around',
    evenly: 'space-evenly',
    stretch: 'stretch',
};

const goTablistCss = "go-tablist{--tab-padding:0.5rem 1rem;--tab-bg-color:transparent;--tab-hover-bg-color:var(--go-color-neutral-200);--tab-text-color:var(--go-color-neutral-800);--tab-hover-text-color:var(--go-color-neutral-900);--tab-focus-color:var(--go-color-primary-600);--tab-active-color:var(--go-color-primary-600);--tab-active-bg-color:transparent;--tab-border-width:0.2em;--tab-active-indicator-color:var(--tab-active-color);--tabs-active-indicator-width:0;--tabs-active-indicator-height:0.2em;--tabs-active-indicator-color:var(--tab-active-color);--tab-icon-gap:0.5rem}go-tablist [role=tablist]{overflow:auto;display:flex;flex-wrap:nowrap;width:100%;position:relative}go-tablist [role=tab]{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:var(--tab-icon-gap);padding:var(--tab-padding);border:var(--tab-border-width) solid transparent;white-space:nowrap;background:var(--tab-bg-color);color:var(--tab-text-color);font-weight:500;transition:background-color var(--go-duration-normal) var(--go-timing-function), color var(--go-duration-normal) var(--go-timing-function)}@media (min-width: 600px){go-tablist [role=tab]{flex-direction:row}}@media (prefers-reduced-motion: reduce){go-tablist [role=tab]{transition-duration:0s}}go-tablist [role=tab] .go-tab-icon-slot svg,go-tablist [role=tab] .go-tab-icon-slot img{display:block}go-tablist [role=tab] .go-tab-icon-active{display:none}go-tablist [role=tab]:hover,go-tablist [role=tab]:focus{color:var(--tab-hover-text-color);background:var(--tab-hover-bg-color)}go-tablist [role=tab]:not(.active){cursor:pointer}go-tablist [role=tab][aria-selected=true]{background:var(--tab-active-bg-color);color:var(--tab-active-color);text-decoration:none}go-tablist [role=tab][aria-selected=true].has-active-icon .go-tab-icon{display:none}go-tablist [role=tab][aria-selected=true] .go-tab-icon-active{display:block}go-tablist .tabs-active-indicator-track{position:absolute;width:100%;bottom:0;left:0;right:0}go-tablist .tabs-active-indicator-track .tabs-active-indicator{transition:transform var(--go-duration-normal) var(--go-timing-function), width var(--go-duration-normal) var(--go-timing-function), height var(--go-duration-normal) var(--go-timing-function);transform:translateX(var(--tabs-active-indicator-left));width:var(--tabs-active-indicator-width);height:var(--tabs-active-indicator-height);border-radius:var(--radius-round);background:var(--tabs-active-indicator-color)}@media (prefers-reduced-motion: reduce){go-tablist .tabs-active-indicator-track .tabs-active-indicator{transition-duration:0s}}go-tablist.vertical{flex-direction:row}go-tablist.vertical [role=tablist]{flex-direction:column}go-tablist.vertical [role=tablist] .tabs-active-indicator-track{width:auto;top:0;left:auto}go-tablist.vertical [role=tablist] .tabs-active-indicator-track .tabs-active-indicator{--tabs-active-indicator-width:0.25rem;transform:translateY(var(--tabs-active-indicator-top))}go-tablist.vertical [role=tab]{text-align:start;white-space:normal}go-tablist.vertical [role=tab]:focus-visible{border-top-color:transparent;border-left-color:var(--tab-focus-color)}go-tablist.fill [role=tablist]{width:100%}go-tablist.fill [role=tab]{flex:1}:where([color-scheme=dark],[data-theme=dark]) go-tablist{--tab-text-color:var(--go-color-neutral-700);--tab-hover-bg-color:var(--go-color-neutral-200);--tab-hover-text-color:var(--go-color-darkest);--tab-active-color:var(--go-color-primary-800)}";
const GoTablistStyle0 = goTablistCss;

const GoTablist = /*@__PURE__*/ proxyCustomElement(class GoTablist extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.activated = createEvent(this, "activated", 7);
        this.activeIndex = -1;
        this.tabEls = [];
        // Add or subtract depending on key pressed
        this.direction = {
            ArrowUp: -1,
            ArrowLeft: -1,
            ArrowDown: 1,
            ArrowRight: 1,
        };
        this.vertical = false;
        this.label = undefined;
        this.auto = false;
        this.bottom = false;
        this.fill = false;
        this.items = undefined;
        this.justify = 'normal';
        this.activeTabRect = undefined;
        this.tabsState = undefined;
    }
    componentWillLoad() {
        this.loadItemsState();
    }
    loadItemsState() {
        var _a;
        if (!((_a = this.items) === null || _a === void 0 ? void 0 : _a.length)) {
            return;
        }
        this.tabsState = [...this.items];
    }
    componentDidLoad() {
        var _a;
        if (!((_a = this.tabsState) === null || _a === void 0 ? void 0 : _a.length)) {
            return;
        }
        // load rect for indicator
        this.activeIndex = this.tabsState.findIndex((tab) => tab.active);
        requestAnimationFrame(() => {
            this.activeTabRect = this.tabEls[this.activeIndex].getBoundingClientRect();
            this.tabsState.forEach((tab, i) => {
                // add icon container
                if (!tab.iconSlot && !tab.iconActiveSlot) {
                    return;
                }
                const iconContainer = document.createElement('span');
                iconContainer.classList.add('go-tab-icon-slot');
                if (tab.iconSlot)
                    iconContainer.append(tab.iconSlot);
                if (tab.iconActiveSlot)
                    iconContainer.append(tab.iconActiveSlot);
                if (tab.iconPosition === 'before') {
                    this.tabEls[i].prepend(iconContainer);
                }
                if (tab.iconPosition === 'after') {
                    this.tabEls[i].append(iconContainer);
                }
            });
        });
    }
    deactivateTabs() {
        this.tabsState = this.tabsState.map((tab) => {
            return Object.assign(Object.assign({}, tab), { active: false });
        });
    }
    // Activates any given tab panel
    async activateTab(tabEl, setFocus = true, isOnload = false) {
        // if tab is already active, do nothing
        if (tabEl.getAttribute('aria-selected') === 'true' && isOnload) {
            // emit event
            this.activated.emit({
                index: this.activeIndex,
                tabEl,
            });
            return;
        }
        this.deactivateTabs();
        const tabId = tabEl.getAttribute('id');
        this.tabsState = this.tabsState.map((tab, i) => {
            if (tab.tabId === tabId) {
                this.activeIndex = i;
                return Object.assign(Object.assign({}, tab), { active: true });
            }
            return tab;
        });
        // Set focus when required
        if (setFocus) {
            tabEl.focus();
        }
        // emit event
        this.activated.emit({
            index: this.activeIndex,
            tabEl,
        });
        requestAnimationFrame(() => {
            this.activeTabRect = tabEl.getBoundingClientRect();
        });
    }
    // When a tab is clicked, activateTab is fired to activate it
    onTabClick(i) {
        this.activateTab(this.tabEls[i]);
    }
    // Focus on the first tab
    focusFirstTab() {
        this.tabEls[0].focus();
    }
    // Focus on the last tab
    focusLastTab() {
        this.tabEls[this.tabEls.length - 1].focus();
    }
    activateFirstTab() {
        this.activateTab(this.tabEls[0]);
    }
    activateLastTab() {
        this.activateTab(this.tabEls[this.tabEls.length - 1]);
    }
    /**********************************
     * Keyboard support
     ***********************************/
    onKeydown(event) {
        const key = event.code;
        switch (key) {
            case 'End':
                event.preventDefault();
                // Activate last tab
                if (!this.auto) {
                    this.focusLastTab();
                }
                else {
                    this.activateLastTab();
                }
                break;
            case 'Home':
                event.preventDefault();
                // Activate first tab
                if (!this.auto) {
                    this.focusFirstTab();
                }
                else {
                    this.activateFirstTab();
                }
                break;
            // Up and down are in keydown
            // because we need to prevent page scroll >:)
            case 'ArrowUp':
            case 'ArrowDown':
                if (this.vertical) {
                    event.preventDefault();
                    this.switchTabOnArrowPress(event);
                }
                break;
            case 'ArrowLeft':
            case 'ArrowRight':
                event.preventDefault();
                this.switchTabOnArrowPress(event);
                break;
        }
    }
    // Either focus the next, previous, first, or last tab
    // depending on key pressed
    switchTabOnArrowPress(event) {
        var pressed = event.code;
        const currentIndex = this.tabEls.findIndex((tab) => event.target.isSameNode(tab));
        if (this.direction[pressed] && currentIndex !== -1) {
            const targetIndex = currentIndex + this.direction[pressed];
            if (this.tabEls[targetIndex]) {
                if (!this.auto) {
                    this.tabEls[targetIndex].focus();
                    return;
                }
                this.activateTab(this.tabEls[targetIndex]);
                return;
            }
            // target index out of range
            if (pressed === 'ArrowLeft' || pressed === 'ArrowUp') {
                if (!this.auto) {
                    this.focusLastTab();
                    return;
                }
                this.activateLastTab();
                return;
            }
            if (pressed === 'ArrowRight' || pressed == 'ArrowDown') {
                if (!this.auto) {
                    this.focusFirstTab();
                    return;
                }
                this.activateFirstTab();
                return;
            }
        }
    }
    render() {
        const { label, tabsState, vertical, tablistEl, activeTabRect, justify, fill } = this;
        const tablistScrollLeft = (tablistEl === null || tablistEl === void 0 ? void 0 : tablistEl.scrollLeft) || 0;
        const tablistScrollTop = (tablistEl === null || tablistEl === void 0 ? void 0 : tablistEl.scrollTop) || 0;
        const tablistRect = tablistEl === null || tablistEl === void 0 ? void 0 : tablistEl.getBoundingClientRect();
        const activeOffsetLeft = tablistScrollLeft - (tablistRect === null || tablistRect === void 0 ? void 0 : tablistRect.left) || 0;
        const activeOffsetTop = tablistScrollTop - (tablistRect === null || tablistRect === void 0 ? void 0 : tablistRect.top) || 0;
        return (h(Host, { key: 'a0cf0f48424e888c2acd327f0fe8cba77ec2edc4', class: { vertical, fill }, style: vertical
                ? {
                    '--tabs-active-indicator-top': `${(activeTabRect === null || activeTabRect === void 0 ? void 0 : activeTabRect.top) + activeOffsetTop || 0}px`,
                    '--tabs-active-indicator-height': `${(activeTabRect === null || activeTabRect === void 0 ? void 0 : activeTabRect.height) || 0}px`,
                }
                : {
                    '--tabs-active-indicator-left': `${(activeTabRect === null || activeTabRect === void 0 ? void 0 : activeTabRect.left) + activeOffsetLeft || 0}px`,
                    '--tabs-active-indicator-width': `${(activeTabRect === null || activeTabRect === void 0 ? void 0 : activeTabRect.width) || 0}px`,
                } }, h("div", { key: '23489fad7ad487664e3d6c6068b4d6fc52406a58', role: "tablist", ref: (el) => (this.tablistEl = el), "aria-label": label, "aria-orientation": vertical ? 'vertical' : undefined, style: { 'justify-content': JUSTIFY_VALUES_MAP[justify] } }, tabsState
            ? tabsState.map((tab, index) => {
                return (h("button", { type: "button", role: "tab", "aria-selected": tab.active ? 'true' : 'false', tabindex: tab.active ? undefined : '-1', "aria-controls": tab.panelId, id: tab.tabId, onClick: () => this.onTabClick(index), onKeyDown: (e) => this.onKeydown(e), key: index, class: {
                        'active': tab.active,
                        'has-active-icon': !!tab.iconActiveSlot,
                    }, ref: (el) => this.tabEls.push(el) }, h("span", { class: { 'visually-hidden': tab.iconOnly } }, tab.label)));
            })
            : null, h("div", { key: '81edcc863b34a65ee84f2bd4372d872f818a2973', class: "tabs-active-indicator-track", "aria-hidden": "true" }, h("div", { key: 'b4712cd3de03b8dd16b9360ac47ba2461f46a818', class: "tabs-active-indicator" })))));
    }
    get el() { return this; }
    static get watchers() { return {
        "items": ["loadItemsState"]
    }; }
    static get style() { return GoTablistStyle0; }
}, [0, "go-tablist", {
        "vertical": [4],
        "label": [1],
        "auto": [4],
        "bottom": [4],
        "fill": [4],
        "items": [16],
        "justify": [1],
        "activeTabRect": [32],
        "tabsState": [32],
        "activateTab": [64]
    }, undefined, {
        "items": ["loadItemsState"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-tablist"];
    components.forEach(tagName => { switch (tagName) {
        case "go-tablist":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoTablist);
            }
            break;
    } });
}
defineCustomElement();

export { GoTablist as G, defineCustomElement as d };

//# sourceMappingURL=go-tablist2.js.map