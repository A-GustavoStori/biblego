import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { b as hasSlot } from './helper.js';
import { u as uniqueId } from './uniqueId.js';

const goAccordionItemCss = "go-accordion-item{display:block}@media (prefers-reduced-motion: reduce){go-accordion-item{--go-duration-normal:0.01s}}go-accordion-item .heading .heading-control{background:var(--heading-bg-color);color:var(--heading-text-color);font-size:var(--heading-font-size, 1rem);border-radius:var(--heading-radius);display:flex;align-items:center;justify-content:space-between;width:100%;border:none;padding:var(--heading-padding-y) var(--heading-padding-x);cursor:pointer;transition:border-radius var(--go-duration-normal) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-accordion-item .heading .heading-control{transition-duration:0s}}go-accordion-item .heading .heading-control:hover,go-accordion-item .heading .heading-control:focus-visible{--heading-bg-color:var(--heading-bg-color-hover);--heading-text-color:var(--heading-fg-color-hover)}go-accordion-item .heading .heading-control:focus-visible{outline:var(--go-focus-outline-width, 2px) solid var(--go-focus-outline-color, #000);outline-offset:var(--go-focus-outline-offset)}go-accordion-item .heading .arrow{display:block;color:currentColor;transition:transform var(--go-duration-normal) var(--go-timing-function);width:1.5em;height:1.5em}@media (prefers-reduced-motion: reduce){go-accordion-item .heading .arrow{transition-duration:0s}}go-accordion-item .panel-wrapper{overflow:hidden;max-height:0;transition:max-height var(--go-duration-normal) var(--go-timing-function);background:var(--panel-bg-color)}go-accordion-item .panel-wrapper .panel{border-top-left-radius:0;border-top-right-radius:0;overflow:hidden;padding:var(--panel-padding-y) var(--panel-padding-x)}go-accordion-item.autoHeight .panel-wrapper{overflow:hidden}go-accordion-item.active>.heading{border-bottom-left-radius:0;border-bottom-right-radius:0;transition:border-radius 0s}go-accordion-item.active>.heading .arrow{transform:rotate(180deg)}go-accordion-item.active>.panel-wrapper{max-height:var(--body-max-height)}";
const GoAccordionItemStyle0 = goAccordionItemCss;

const GoAccordionItem$1 = /*@__PURE__*/ proxyCustomElement(class GoAccordionItem extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.opened = createEvent(this, "opened", 7);
        this.opening = createEvent(this, "opening", 7);
        this.closed = createEvent(this, "closed", 7);
        this.closing = createEvent(this, "closing", 7);
        this.heading = null;
        this.headingTag = 'h3';
        this.autoHeight = true;
        this.active = false;
        this.hasHeadingSlot = true;
        this.hasArrowSlot = true;
    }
    componentWillLoad() {
        this.hasHeadingSlot = hasSlot(this.el, 'heading');
        this.hasArrowSlot = hasSlot(this.el, 'arrow');
        this.panelId = uniqueId('go-accordion-item-panel-');
        this.headerId = uniqueId('go-accordion-item-header-');
        this.parentGroup = this.el.closest('go-accordion');
    }
    componentDidLoad() {
        if (this.autoHeight) {
            this.panelEl.style.setProperty('--body-max-height', this.panelEl.scrollHeight + 2 + 'px');
        }
        this.onTransitionEnd();
        this.panelEl.addEventListener('transitionstart', () => {
            this.onTransitionStart();
        });
        this.panelEl.addEventListener('transitionend', () => {
            this.onTransitionEnd();
        });
    }
    handleNavigation(key) {
        if (key === 'ArrowDown') {
            if (this.el.nextElementSibling) {
                this.el.nextElementSibling.focusOnControl();
            }
        }
        if (key === 'ArrowUp') {
            if (this.el.previousElementSibling) {
                this.el.previousElementSibling.focusOnControl();
            }
        }
        if (key === 'Home') {
            this.parentGroup.children[0].focusOnControl();
        }
        if (key === 'End') {
            this.parentGroup.children[this.parentGroup.children.length - 1].focusOnControl();
        }
    }
    onTransitionEnd() {
        if (this.active) {
            this.panelEl.style.overflow = 'auto';
            this.opened.emit();
        }
        else {
            this.panelEl.style.overflow = 'hidden';
            this.panelEl.style.visibility = 'hidden';
            this.closed.emit();
        }
    }
    onTransitionStart() {
        if (this.active) {
            this.panelEl.style.visibility = 'visible';
            this.opening.emit();
        }
        else {
            this.closing.emit();
        }
    }
    /**
     * Toggle open state of accordion item
     */
    async toggle() {
        if (this.active) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * Closes the accordion item
     */
    async close() {
        this.active = false;
    }
    /**
     * Opens the accordion item.
     */
    async open() {
        this.active = true;
    }
    /**
     * Focus on header control
     */
    async focusOnControl() {
        this.el.querySelector('.heading-control').focus();
    }
    render() {
        const { active, autoHeight, headingTag: HeadingTag, panelId, headerId } = this;
        return (h(Host, { key: 'db8835f77b47c63a9051cb25d362212f99c979d6', class: { active, autoHeight } }, h(HeadingTag, { key: '5d91fd9a07e6a9e40a99db791893b2e715c87c8a', class: "heading" }, h("button", { key: 'c847b8111ad0dc4fd75c46f4052db39a9824a702', id: headerId, class: "heading-control", role: "button", onClick: () => this.toggle(), onKeyDown: (e) => this.handleNavigation(e.key), "aria-expanded": active ? 'true' : 'false', "aria-controls": panelId }, this.hasHeadingSlot ? h("slot", { name: "heading" }) : this.heading, h("span", { key: '17349f5250abcf10b9224a769aee6c47b3165e06', class: "arrow" }, this.hasArrowSlot ? (h("slot", { name: "arrow" })) : (h("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24", "aria-hidden": "true", focusable: "false" }, h("path", { d: "m6 9 6 6 6-6" })))))), h("div", { key: '0e760334919eddb587b32ac1032cfa7b081e43fd', class: "panel-wrapper", role: "region", id: panelId, "aria-labelledby": headerId, ref: (el) => (this.panelEl = el) }, h("div", { key: '34b8ec7e058876ae8c56843ffc5f297eb8d27c7d', class: "panel" }, h("slot", { key: 'ca9cd9b386a52105a460e0e285e1ac88050d2557' })))));
    }
    get el() { return this; }
    static get style() { return GoAccordionItemStyle0; }
}, [4, "go-accordion-item", {
        "heading": [1],
        "headingTag": [1, "heading-tag"],
        "autoHeight": [4, "auto-height"],
        "active": [1540],
        "hasHeadingSlot": [32],
        "hasArrowSlot": [32],
        "toggle": [64],
        "close": [64],
        "open": [64],
        "focusOnControl": [64]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-accordion-item"];
    components.forEach(tagName => { switch (tagName) {
        case "go-accordion-item":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoAccordionItem$1);
            }
            break;
    } });
}
defineCustomElement$1();

const GoAccordionItem = GoAccordionItem$1;
const defineCustomElement = defineCustomElement$1;

export { GoAccordionItem, defineCustomElement };

//# sourceMappingURL=go-accordion-item.js.map