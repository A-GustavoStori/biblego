import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { p as parseJsonProp, $ as $attrs } from './helper.js';
import { d as defineCustomElement$1 } from './go-icon2.js';

const goNavLinkCss = "go-nav-link{--nav-link-padding:0.25em 0;--nav-link-current-bar-width:0.125rem;--nav-link-current-bar-color:currentColor;--nav-link-hover-fg-color:var(--go-color-link-hover);--nav-link-hover-bg-color:var(--go-color-link-hover-bg);--nav-link-arrow-gap:var(--go-base-spacing);--nav-link-arrow-color:currentColor;--nav-link-arrow-color-hover:currentColor;--nav-link-align-y:flex-start;--nav-link-radius:var(--radius-2);--nav-link-bg-color:var(--go-color-neutral-200);--nav-link-text-color:var(--go-color-darkest);--nav-link-description-fs:0.85em;--nav-link-description-fw:normal;--nav-link-description-color:var(--go-color-neutral-800);--nav-link-description-color-hover:var(--go-color-neutral-700);--nav-link-current-fw:700;--nav-link-current-text-color:var(--go-color-neutral-200);--nav-link-current-bg-color:var(--go-color-darkest);--nav-link-current-description-color:var(--go-color-neutral-300);--nav-link-text-decoration:underline;display:inline-flex;align-items:var(--nav-link-align-y);color:var(--go-color-link);position:relative}go-nav-link[block]{display:flex}go-nav-link[block] go-link{display:block;flex:1}go-nav-link[block] .nav-item-link{display:flex;align-items:var(--nav-link-align-y);width:100%}go-nav-link .nav-item-link{transition:background var(--go-duration-normal) var(--go-timing-function);display:inline-flex;align-items:flex-start;gap:0.5rem;padding:var(--nav-link-padding);border-radius:var(--nav-link-radius);text-decoration:none}@media (prefers-reduced-motion: reduce){go-nav-link .nav-item-link{transition-duration:0s}}go-nav-link .nav-item-link go-icon{text-decoration:none}go-nav-link .nav-item-link .nav-link-text{flex:1;display:flex;flex-direction:column;gap:0.25rem;line-height:1.25}go-nav-link .nav-item-link .nav-link-text .nav-link-text-description{font-size:var(--nav-link-description-fs);font-weight:var(--nav-link-description-fw);color:var(--nav-link-description-color);text-decoration:none}go-nav-link .nav-item-link.current{color:var(--nav-link-current-text-color);background:var(--nav-link-current-bg-color)}go-nav-link .nav-item-link.current .nav-link-text-label{font-weight:var(--nav-link-current-fw);text-decoration:none}go-nav-link .nav-item-link.current .nav-link-text-description{color:var(--nav-link-current-description-color)}go-nav-link a.nav-item-link svg.external-link-icon{flex:0 0 auto;transform:none}go-nav-link a.nav-item-link .arrow{transition:transform var(--go-duration-normal) var(--go-timing-function);stroke:var(--nav-link-arrow-color);flex:0 0 auto;height:1.25em;margin-left:calc(var(--nav-link-arrow-gap) + 0.25rem);transform:translateX(-0.25rem)}@media (prefers-reduced-motion: reduce){go-nav-link a.nav-item-link .arrow{transition-duration:0s}}go-nav-link a.nav-item-link .nav-link-text-label{-webkit-text-decoration:var(--nav-link-text-decoration);text-decoration:var(--nav-link-text-decoration);text-underline-offset:0.2em}go-nav-link a.nav-item-link:hover,go-nav-link a.nav-item-link:focus-visible{background-color:var(--nav-link-bg-color);color:var(--nav-link-text-color)}go-nav-link a.nav-item-link:hover .nav-link-text .nav-link-text-label,go-nav-link a.nav-item-link:focus-visible .nav-link-text .nav-link-text-label{text-decoration:none}go-nav-link a.nav-item-link:hover .nav-link-text .nav-link-text-description,go-nav-link a.nav-item-link:focus-visible .nav-link-text .nav-link-text-description{color:var(--nav-link-description-color-hover)}go-nav-link a.nav-item-link:hover .arrow,go-nav-link a.nav-item-link:focus-visible .arrow{transform:translateX(0)}go-nav-link a.nav-item-link::after{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0}";
const GoNavLinkStyle0 = goNavLinkCss;

const GoNavLink = /*@__PURE__*/ proxyCustomElement(class GoNavLink extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.navEvent = createEvent(this, "navigate", 7);
        this.inheritedAttrs = {};
        this.item = undefined;
        this.parsedItem = undefined;
        this.label = undefined;
        this.url = undefined;
        this.icon = undefined;
        this.description = undefined;
        this.isCurrent = undefined;
        this.linkAttrs = undefined;
        this.showArrow = false;
        this.block = false;
    }
    parseNavItem() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        if (this.item) {
            this.parsedItem = parseJsonProp(this.item);
        }
        // component props will override item data if both are present
        const icon = (_a = parseJsonProp(this.icon)) !== null && _a !== void 0 ? _a : (_b = this.parsedItem) === null || _b === void 0 ? void 0 : _b.icon;
        const linkAttrs = (_c = parseJsonProp(this.linkAttrs)) !== null && _c !== void 0 ? _c : (_d = this.parsedItem) === null || _d === void 0 ? void 0 : _d.linkAttrs;
        this.parsedItem = Object.assign(Object.assign({}, this.parsedItem), { label: (_e = this.label) !== null && _e !== void 0 ? _e : (_f = this.parsedItem) === null || _f === void 0 ? void 0 : _f.label, url: (_g = this.url) !== null && _g !== void 0 ? _g : (_h = this.parsedItem) === null || _h === void 0 ? void 0 : _h.url, icon, description: (_j = this.description) !== null && _j !== void 0 ? _j : (_k = this.parsedItem) === null || _k === void 0 ? void 0 : _k.description, isCurrent: (_l = this.isCurrent) !== null && _l !== void 0 ? _l : (_m = this.parsedItem) === null || _m === void 0 ? void 0 : _m.isCurrent, linkAttrs });
    }
    componentWillLoad() {
        this.inheritedAttrs = $attrs.bind(this)();
        this.parseNavItem();
    }
    render() {
        const { inheritedAttrs } = this;
        if (!this.parsedItem) {
            return (h("a", Object.assign({}, inheritedAttrs), h("slot", null)));
        }
        const { isCurrent, url, icon, label, description } = this.parsedItem;
        const isSpan = isCurrent || !url;
        let Tag = isSpan ? 'span' : 'go-link';
        let attrs = Object.assign(Object.assign({}, this.parsedItem.linkAttrs), inheritedAttrs);
        attrs = !isSpan
            ? Object.assign({ href: url, onClick: (event) => {
                    this.navEvent.emit({ event, item: this.item });
                } }, attrs) : Object.assign({}, attrs);
        attrs['class'] = ` nav-item-link ${attrs['class'] ? attrs['class'] : ''}${isCurrent ? ' current' : ''}`;
        return (h(Host, null, h(Tag, Object.assign({}, attrs), icon ? typeof icon === 'string' ? h("go-icon", { name: icon }) : h("go-icon", Object.assign({}, icon)) : null, h("span", { class: "nav-link-text" }, h("span", { class: "nav-link-text-label" }, label), description ? h("span", { class: "nav-link-text-description" }, description) : null), url && this.showArrow ? (h("svg", { class: "arrow", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24", focusable: "false", "aria-hidden": "true" }, h("line", { x1: "5", y1: "12", x2: "19", y2: "12" }), h("polyline", { points: "12 5 19 12 12 19" }))) : null)));
    }
    get el() { return this; }
    static get watchers() { return {
        "item": ["parseNavItem"]
    }; }
    static get style() { return GoNavLinkStyle0; }
}, [4, "go-nav-link", {
        "item": [1],
        "label": [1],
        "url": [1],
        "icon": [1],
        "description": [1],
        "isCurrent": [4, "is-current"],
        "linkAttrs": [1, "link-attrs"],
        "showArrow": [4, "show-arrow"],
        "block": [516],
        "parsedItem": [32]
    }, undefined, {
        "item": ["parseNavItem"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-nav-link", "go-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "go-nav-link":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoNavLink);
            }
            break;
        case "go-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { GoNavLink as G, defineCustomElement as d };

//# sourceMappingURL=go-nav-link2.js.map