import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { i as inheritNonFieldAttrs, b as loadFieldSlots, l as loadFieldProps, f as fieldSlotNames } from './form.js';
import './index2.js';
import { d as defineCustomElement$2 } from './go-field2.js';
import { u as uniqueId } from './uniqueId.js';

const GoInput$1 = /*@__PURE__*/ proxyCustomElement(class GoInput extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.prefixer = 'go-input-';
        this.hasNamedSlot = {};
        this.controlId = uniqueId(this.prefixer);
        this.labelId = undefined;
        this.prefixId = undefined;
        this.suffixId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.readonly = undefined;
        this.value = undefined;
        this.attrs = undefined;
    }
    componentWillLoad() {
        this.attrs = inheritNonFieldAttrs(this);
        this.hasNamedSlot = loadFieldSlots(this.el);
    }
    render() {
        const { controlId, value, attrs } = this;
        const fieldProps = loadFieldProps(this);
        return (h("go-field", Object.assign({ key: 'f241607f6611a1b569cd8db660f5ea5822b99439' }, fieldProps), fieldSlotNames.map((slotName) => {
            if (this.hasNamedSlot[slotName]) {
                return (h("template", { slot: slotName }, h("slot", { name: slotName })));
            }
        }), h("input", Object.assign({ key: 'a1e98dc2f7d16dd83437185dfb94225621d58ba3' }, fieldProps, attrs, { class: "control", ref: (el) => (this.controlEl = el), id: controlId, value: value, onInput: (e) => (this.value = e.target.value) }))));
    }
    get el() { return this; }
}, [4, "go-input", {
        "labelId": [1, "label-id"],
        "prefixId": [1, "prefix-id"],
        "suffixId": [1, "suffix-id"],
        "hintId": [1, "hint-id"],
        "errorId": [1, "error-id"],
        "name": [1],
        "label": [1],
        "disabled": [4],
        "hint": [1],
        "error": [8],
        "readonly": [4],
        "value": [1025],
        "attrs": [32]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-input", "go-field"];
    components.forEach(tagName => { switch (tagName) {
        case "go-input":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoInput$1);
            }
            break;
        case "go-field":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const GoInput = GoInput$1;
const defineCustomElement = defineCustomElement$1;

export { GoInput, defineCustomElement };

//# sourceMappingURL=go-input.js.map