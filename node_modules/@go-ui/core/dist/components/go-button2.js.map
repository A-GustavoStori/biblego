{"file":"go-button2.js","mappings":";;;;AAAA,MAAM,WAAW,GAAG,ynMAAynM,CAAC;AAC9oM,uBAAe,WAAW;;MCab,QAAQ;;;;QAgFZ,aAAQ,GAAgB,IAAI,CAAC;oBA1EU,QAAQ;wBAKR,IAAI;uBAKU,SAAS;;uBAaxB,KAAK;2BAKD,KAAK;oBAKZ,KAAK;qBAKJ,KAAK;oBAKN,KAAK;qBAKJ,KAAK;uBAKH,KAAK;;uBAUvB,KAAK;kCAKM,SAAS;;mCAIhB,EAAS;;IAIxC,iBAAiB;;QAEf,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE;gBACnF,OAAO,CAAC,8EAA8E,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;aAClG;SACF;QAED,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,2BAA2B,EAAE,CAAC;KACpC;IACD,2BAA2B;QACzB,IAAI,CAAC,mBAAmB,qBACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACvB,CAAC;KACH;IAGD,iBAAiB,CAAC,KAAkB;QAClC,IAAI,CAAC,YAAY,GAAG,OAAO,KAAK,KAAK,WAAW,GAAG,SAAS,KAAK,EAAE,GAAG,EAAE,CAAC;KAC1E;IAED,MAAM;QACJ,MAAM,EACJ,IAAI,EACJ,QAAQ,EACR,OAAO,EACP,YAAY,EACZ,OAAO,EACP,WAAW,EACX,mBAAmB,EACnB,IAAI,EACJ,OAAO,EACP,kBAAkB,GACnB,GAAG,IAAI,CAAC;QACT,MAAM,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC;QAClC,MAAM,WAAW,GAAG,GAAG,OAAO,IAAI,YAAY,EAAE,CAAC;QACjD,QACE,EAAC,IAAI,qDACH,KAAK,EAAE;gBACL,CAAC,WAAW,GAAG,IAAI;gBACnB,OAAO;gBACP,sBAAsB,EAAE,WAAW;aACpC,IACD,EAAC,GAAG,mEACF,GAAG,EAAE,CAAC,EAAE;gBACN,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;aACpB,EACD,IAAI,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI,EACxB,IAAI,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI,mBACT,QAAQ,GAAG,MAAM,GAAG,IAAI,EACvC,QAAQ,EAAE,QAAQ,GAAG,MAAM,GAAG,IAAI,EAClC,KAAK,EAAC,cAAc,eACT,OAAO,GAAG,MAAM,GAAG,IAAI,IAC9B,mBAAmB,GACvB,mEAAY,OAAO,EAAE,OAAO,EAAE,mBAAmB,EAAE,kBAAkB,GAAe,EACpF,6DAAM,IAAI,EAAC,QAAQ,GAAQ,EAC3B,6DAAM,KAAK,EAAC,UAAU,IACpB,8DAAa,CACR,EACP,6DAAM,IAAI,EAAC,QAAQ,GAAQ,CACvB,CACD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/go-button/go-button.scss?tag=go-button","src/components/go-button/go-button.tsx"],"sourcesContent":["go-button {\n  // default colours\n\n  /**\n    @prop --go-btn-bg-color:\n      Background colour for the button.\n      - default: var(--go-color-neutral-600)\n  */\n  --go-btn-bg-color: var(--go-color-neutral-600);\n\n  --go-btn-bg-color-hover: var(--go-color-neutral-500);\n  --go-btn-text-color: #fff;\n  --go-btn-text-color-hover: #fff;\n  --go-focus-outline-color: var(--go-btn-bg-color);\n  --go-btn-outline-text-color: #000;\n  --go-btn-outline-text-color-hover: #000;\n  --go-btn-disabled-opacity: 0.5;\n\n  // shadow\n  --go-btn-shadow: var(--shadow-2);\n\n  // default sizing\n  --go-btn-padding-y: 0.5em;\n  --go-btn-padding-x: 1.5em;\n  --go-btn-inner-gap: 0.5rem;\n  --go-btn-radius: var(--radius-2, 0.25rem);\n\n  /**\n    @prop --go-btn-icon-size:\n      Outer size of the icon button.\n      - default: 3rem\n  */\n  --go-btn-icon-size: 3rem;\n\n  /**\n    @prop --go-btn-inline-icon-size:\n      Size of the icon inside the button.\n      - default: calc(var(--go-btn-icon-size) / 2)\n  */\n  --go-btn-inline-icon-size: calc(var(--go-btn-icon-size) / 2);\n\n  // outline fill color\n  --go-btn-outline-fill-color: var(--go-color-bg);\n\n  /**\n    @prop --go-btn-border-width:\n      Width of button border\n      - default: 2px\n  */\n  --go-btn-border-width: 2px;\n\n  display: inline-block;\n\n  &.block-all {\n    display: block;\n    width: 100%;\n  }\n\n  &.block-desktop {\n    display: block;\n    width: 100%;\n    @include min-query(large) {\n      display: inline-block;\n      width: auto;\n    }\n  }\n  &.block-tablet {\n    display: block;\n    width: 100%;\n    @include min-query(desktop) {\n      display: inline-block;\n      width: auto;\n    }\n  }\n  &.block-mobile {\n    display: block;\n    width: 100%;\n    @include min-query(tablet) {\n      display: inline-block;\n      width: auto;\n    }\n  }\n\n  &.outline {\n    .inner-button {\n      background: transparent;\n      border-color: var(--go-btn-bg-color);\n      color: var(--go-btn-outline-text-color);\n      &:hover,\n      &:focus-visible {\n        background: var(--go-btn-bg-color);\n        color: var(--go-btn-outline-text-color-hover);\n      }\n    }\n    &[variant='text'] {\n      --go-btn-bg-color: var(--go-color-neutral-700);\n      .inner-button {\n        border-color: transparent;\n      }\n    }\n  }\n\n  &.outline-fill {\n    .inner-button {\n      background: var(--go-btn-outline-fill-color);\n    }\n  }\n\n  &[flat] {\n    .inner-button {\n      box-shadow: none;\n      &:hover,\n      &:focus-visible {\n        box-shadow: none;\n      }\n    }\n  }\n\n  &[round] {\n    .inner-button {\n      border-radius: var(--radius-round);\n    }\n  }\n\n  &[icon] {\n    .inner-button {\n      width: var(--go-btn-icon-size);\n      height: var(--go-btn-icon-size);\n      padding: 0;\n      text-align: center;\n      line-height: 1;\n    }\n  }\n\n  &[stack] {\n    .inner-button {\n      flex-direction: column;\n    }\n  }\n\n  &[compact] {\n    --go-btn-padding-y: 0.25em;\n    --go-btn-padding-x: 0.5em;\n    --go-btn-inner-gap: 0.125em;\n    --go-btn-icon-size: 2rem;\n    .inner-button {\n      font-size: var(--go-size--1);\n      line-height: 1.5em;\n    }\n  }\n\n  &[disabled] {\n    .inner-button {\n      /* stylelint-disable-next-line plugin/no-unsupported-browser-features */\n      cursor: not-allowed;\n      box-shadow: none;\n      opacity: var(--go-btn-disabled-opacity);\n      &:hover,\n      &:focus {\n        box-shadow: none;\n        outline: none;\n      }\n    }\n  }\n\n  .inner-button {\n    // reset button style\n    @include reset-btn;\n\n    display: inline-flex;\n    vertical-align: middle;\n    align-items: center;\n    justify-content: center;\n    gap: var(--go-btn-inner-gap);\n    width: 100%;\n    text-align: center;\n    line-height: 1.5;\n    background: var(--go-btn-bg-color);\n    color: var(--go-btn-text-color);\n    border: var(--go-btn-border-width) solid transparent;\n    border-radius: var(--go-btn-radius);\n    padding: var(--go-btn-padding-y, 0.5rem) var(--go-btn-padding-x, 1rem);\n    box-shadow: var(--go-btn-shadow);\n    text-underline-offset: 4px; // optimise for browsers that support it\n    font-weight: 400;\n    @include clickable;\n\n    &:hover,\n    &:focus-visible {\n      --go-btn-bg-color: var(--go-btn-bg-color-hover);\n      --go-btn-text-color: var(--go-btn-text-color-hover);\n    }\n\n    svg {\n      width: var(--go-btn-inline-icon-size);\n      height: var(--go-btn-inline-icon-size);\n      margin: 0;\n    }\n  }\n\n  &[variant='text'] {\n    --go-focus-outline-color: var(--go-color-primary-600);\n    --go-btn-bg-color: transparent;\n    --go-btn-bg-color-hover: var(--go-color-neutral-300);\n    --go-btn-text-color: currentColor;\n    --go-btn-text-color-hover: currentColor;\n    .btn-text {\n      text-decoration: underline;\n    }\n    \n    &:hover,\n    &:focus-within {\n      .btn-text {\n        text-decoration: none;\n      }\n    }\n  }\n}\n\n@mixin btn-light-overrides {\n  go-button {\n    // Colour variants\n    --go-btn-bg-color: var(--go-color-neutral-600);\n    --go-btn-bg-color-hover: var(--go-color-neutral-500);\n    &[variant='primary'] {\n      --go-btn-bg-color: var(--go-color-primary-600);\n      --go-btn-bg-color-hover: var(--go-color-primary-500);\n    }\n    &[variant='secondary'] {\n      --go-btn-bg-color: var(--go-color-secondary-600);\n      --go-btn-bg-color-hover: var(--go-color-secondary-500);\n    }\n    &[variant='success'] {\n      --go-btn-bg-color: var(--go-color-success-600);\n      --go-btn-bg-color-hover: var(--go-color-success-500);\n    }\n    &[variant='critical'] {\n      --go-btn-bg-color: var(--go-color-critical-600);\n      --go-btn-bg-color-hover: var(--go-color-critical-500);\n    }\n    &.outline {\n      --go-btn-outline-text-color: var(--go-btn-bg-color);\n      --go-btn-outline-text-color-hover: var(--go-color-lightest);\n    }\n  }\n}\n@mixin btn-dark-overrides {\n  go-button {\n    // Colour variants\n    --go-btn-bg-color: var(--go-color-neutral-400);\n    --go-btn-bg-color-hover: var(--go-color-neutral-500);\n    &[variant='primary'] {\n      --go-btn-bg-color: var(--go-color-primary-600);\n      --go-btn-bg-color-hover: var(--go-color-primary-400);\n    }\n    &[variant='secondary'] {\n      --go-btn-bg-color: var(--go-color-secondary-400);\n      --go-btn-bg-color-hover: var(--go-color-secondary-500);\n    }\n    &[variant='success'] {\n      --go-btn-bg-color: var(--go-color-success-400);\n      --go-btn-bg-color-hover: var(--go-color-success-500);\n    }\n    &[variant='critical'] {\n      --go-btn-bg-color: var(--go-color-critical-400);\n      --go-btn-bg-color-hover: var(--go-color-critical-500);\n    }\n    &.outline {\n      --go-btn-outline-text-color: var(--go-color-darkest);\n      --go-btn-outline-text-color-hover: var(--go-color-darkest);\n    }\n  }\n}\n\n// defualt light\n// mq prefer light\n// mq prefer dark\n// light theme\n// dark theme\n\n@include theme-light {\n  @include btn-light-overrides;\n}\n@include theme-dark {\n  @include btn-dark-overrides;\n}\n","import { Component, h, Prop, Element, Host, Watch, State } from '@stencil/core';\nimport { Breakpoints, ColorVariants } from '../../interfaces';\nimport { $attrs, warning } from '../../utils/helper';\n\n/**\n * @slot default - Button text\n * @slot prefix - Use this slot to prepend content to the button.\n * @slot suffix - Use this slot to append content to the button.\n */\n@Component({\n  tag: 'go-button',\n  styleUrl: 'go-button.scss',\n  shadow: false,\n})\nexport class GoButton {\n  @Element() el: HTMLElement;\n\n  /**\n   * Html type of the button\n   */\n  @Prop() type: 'submit' | 'reset' | 'button' = 'button';\n\n  /**\n   * If this button is disabled\n   */\n  @Prop({ reflect: true }) disabled?: boolean = null;\n\n  /**\n   * Button variants\n   */\n  @Prop({ reflect: true }) variant?: ColorVariants | 'text' = 'neutral';\n\n  /**\n   * If set, the button will take up the full width of its parent\n   * If block=\"{breakpoint}\" is set, the button will take up the full width for the specified breakpoint. e.g. a `block=\"mobile\"` button will display full width on mobile devices.\n   * If block=\"all\", the button will take full width on all devices.\n   */\n  @Prop({ reflect: true }) block?: Breakpoints;\n\n  /**\n   * If `outline` is true, the button will have a border based on selected variant\n   * @see `variant` property\n   */\n  @Prop({ reflect: true }) outline?: boolean = false;\n\n  /**\n   * Outline style with filled background\n   */\n  @Prop({ reflect: true }) outlineFill?: boolean = false;\n\n  /**\n   * If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant\n   */\n  @Prop({ reflect: true }) flat?: boolean = false;\n\n  /**\n   * If button should have pill-shaped corners\n   */\n  @Prop({ reflect: true }) round?: boolean = false;\n\n  /**\n   * Circle shaped icon only button that has min size of 40px for touch devices\n   */\n  @Prop({ reflect: true }) icon?: boolean = false;\n\n  /**\n   * Stack elements inside the button\n   */\n  @Prop({ reflect: true }) stack?: boolean = false;\n\n  /**\n   * Reduce inner gaps and outer paddings\n   */\n  @Prop({ reflect: true }) compact?: boolean = false;\n\n  /**\n   * If the button has an href, it will be rendered as an anchor tag\n   */\n  @Prop() href?: string;\n\n  /**\n   * If the button is loading\n   */\n  @Prop() loading: boolean = false;\n\n  /**\n   * Screen reader announcement for loading state\n   */\n  @Prop() loadingAnouncement?: string = 'Loading';\n\n  @State() blockClasses: string;\n\n  @State() inheritedAttributes = {} as any;\n\n  public nativeEl: HTMLElement = null;\n\n  componentWillLoad() {\n    // a11y check\n    if (this.icon) {\n      if (!this.el.hasAttribute('aria-label') && !this.el.hasAttribute('aria-labelledby')) {\n        warning(`go-button with icon must have either aria-label or aria-labelledby attribute`, this.el);\n      }\n    }\n\n    if (this.block) {\n      this.handleBlockChange(this.block);\n    }\n    this.updateInnerButtonAttributes();\n  }\n  updateInnerButtonAttributes() {\n    this.inheritedAttributes = {\n      ...$attrs.bind(this)(),\n    };\n  }\n\n  @Watch('block')\n  handleBlockChange(block: Breakpoints) {\n    this.blockClasses = typeof block !== 'undefined' ? `block-${block}` : '';\n  }\n\n  render() {\n    const {\n      type,\n      disabled,\n      variant,\n      blockClasses,\n      outline,\n      outlineFill,\n      inheritedAttributes,\n      href,\n      loading,\n      loadingAnouncement,\n    } = this;\n    const Tag = href ? 'a' : 'button';\n    const rootClasses = `${variant} ${blockClasses}`;\n    return (\n      <Host\n        class={{\n          [rootClasses]: true,\n          outline,\n          'outline outline-fill': outlineFill,\n        }}>\n        <Tag\n          ref={(el) => {\n            this.nativeEl = el;\n          }}\n          href={href ? href : null}\n          type={href ? null : type}\n          aria-disabled={disabled ? 'true' : null}\n          disabled={disabled ? 'true' : null}\n          class=\"inner-button\"\n          aria-busy={loading ? 'true' : null}\n          {...inheritedAttributes}>\n          <go-spinner loading={loading} loadingAnnouncement={loadingAnouncement}></go-spinner>\n          <slot name=\"prefix\"></slot>\n          <span class=\"btn-text\">\n            <slot></slot>\n          </span>\n          <slot name=\"suffix\"></slot>\n        </Tag>\n      </Host>\n    );\n  }\n}\n"],"version":3}