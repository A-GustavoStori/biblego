import { proxyCustomElement, HTMLElement, createEvent, Build } from '@stencil/core/internal/client';

const goDarkModeCss = "go-dark-mode{display:block}";
const GoDarkModeStyle0 = goDarkModeCss;

const GoDarkMode$1 = /*@__PURE__*/ proxyCustomElement(class GoDarkMode extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.changeEvent = createEvent(this, "themechange", 7);
        this.attribute = 'data-theme';
    }
    async componentWillLoad() {
        // get user preference
        const theme = await this.getUserPreference();
        this.setTheme(theme);
        // add event listener
        if (Build.isBrowser) {
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', async (e) => {
                await this.setTheme(e.matches ? 'dark' : 'light');
            });
        }
    }
    /**
     * get preferred theme,
     * 1. Check user settings:
     *    - check if localstorage has user-theme key
     *    - if so, check if value is either light or dark,
     *    - if so, return value
     *    - if value is neither light or dark, continue to next step
     * 2. Check system preference:
     *    - check if prefers-color-scheme is dark, if so, return dark
     * 3. default to light
     */
    async getUserPreference() {
        const userTheme = localStorage.getItem('user-theme');
        if (userTheme === 'light' || userTheme === 'dark') {
            return userTheme;
        }
        // Check system preference
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
        }
        // Default to light
        return 'light';
    }
    /**
     * set the current theme and change the html attribute
     * @param theme theme to set
     */
    async setTheme(theme) {
        localStorage.setItem('user-theme', theme);
        this.changeEvent.emit({ theme });
        document.documentElement.setAttribute(this.attribute, theme);
    }
    static get style() { return GoDarkModeStyle0; }
}, [0, "go-dark-mode", {
        "attribute": [1],
        "getUserPreference": [64],
        "setTheme": [64]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-dark-mode"];
    components.forEach(tagName => { switch (tagName) {
        case "go-dark-mode":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoDarkMode$1);
            }
            break;
    } });
}
defineCustomElement$1();

const GoDarkMode = GoDarkMode$1;
const defineCustomElement = defineCustomElement$1;

export { GoDarkMode, defineCustomElement };

//# sourceMappingURL=go-dark-mode.js.map