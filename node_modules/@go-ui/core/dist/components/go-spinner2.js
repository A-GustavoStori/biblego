import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const goSpinnerCss = "go-spinner{--spinner-ring-color:var(--go-color-primary-800);--spinner-base-color:var(--go-color-neutral-300);--spinner-size:1.5rem;--spinner-ring-width:calc(var(--spinner-size) / 10);--spinner-duration:500ms;--spinner-gap:0.5rem;display:inline-flex;gap:var(--spinner-gap);align-items:center}go-spinner.stacked{flex-direction:column}go-spinner .spinner{border:var(--spinner-ring-width) solid var(--spinner-base-color);border-radius:50%;border-top-color:var(--spinner-ring-color);width:var(--spinner-size);height:var(--spinner-size);animation:spin var(--spinner-duration) linear infinite}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}";
const GoSpinnerStyle0 = goSpinnerCss;

const GoSpinner = /*@__PURE__*/ proxyCustomElement(class GoSpinner extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.ringColor = undefined;
        this.baseColor = undefined;
        this.size = undefined;
        this.ringWidth = undefined;
        this.duration = undefined;
        this.stacked = false;
        this.loading = true;
        this.loadingAnnouncement = 'Loading';
        this.isLoading = undefined;
    }
    componentWillLoad() {
        this.isLoading = this.loading;
    }
    loadingChanged(value) {
        this.isLoading = value;
    }
    render() {
        const { ringColor, baseColor, size, ringWidth, duration, stacked, isLoading, loadingAnnouncement } = this;
        let styles = {};
        if (ringColor) {
            styles['--spinner-ring-color'] = ringColor;
        }
        if (baseColor) {
            styles['--spinner-base-color'] = baseColor;
        }
        if (size) {
            styles['--spinner-size'] = size;
        }
        if (ringWidth) {
            styles['--spinner-ring-width'] = ringWidth;
        }
        if (duration) {
            styles['--spinner-duration'] = duration;
        }
        return (h(Host, { key: 'b0e25d5a20715c17b5797453c7b90a320866d7b8', style: styles, role: "status", class: { stacked, 'visually-hidden': !isLoading } }, isLoading
            ? [
                h("div", { "aria-hidden": "true", class: "spinner" }),
                h("slot", null, h("span", { class: "visually-hidden" }, loadingAnnouncement)),
            ]
            : null));
    }
    get el() { return this; }
    static get watchers() { return {
        "loading": ["loadingChanged"]
    }; }
    static get style() { return GoSpinnerStyle0; }
}, [4, "go-spinner", {
        "ringColor": [1, "ring-color"],
        "baseColor": [1, "base-color"],
        "size": [1],
        "ringWidth": [1, "ring-width"],
        "duration": [2],
        "stacked": [4],
        "loading": [516],
        "loadingAnnouncement": [1, "loading-announcement"],
        "isLoading": [32]
    }, undefined, {
        "loading": ["loadingChanged"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "go-spinner":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoSpinner);
            }
            break;
    } });
}
defineCustomElement();

export { GoSpinner as G, defineCustomElement as d };

//# sourceMappingURL=go-spinner2.js.map