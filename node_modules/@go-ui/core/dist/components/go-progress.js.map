{"file":"go-progress.js","mappings":";;AAAA,MAAM,aAAa,GAAG,86CAA86C,CAAC;AACr8C,yBAAe,aAAa;;MCMfA,YAAU;;;;mBAKE,CAAC;mBAID,GAAG;;;;6BAmByB,KAAK;8BAKrB,KAAK;;;IAKxC,gBAAgB,CAAC,QAAgB;QAC/B,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YAC7C,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC3B;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,KAAK,IAAI,GAAG,CAAC,CAAC;KACxD;IAED,iBAAiB;QACf,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnC;IAED,MAAM;QACJ,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;QAC/F,IAAI,SAAS,GAAG;YACd,eAAe,EAAE,aAAa,GAAG,IAAI,GAAG,KAAK;YAC7C,eAAe,EAAE,aAAa,GAAG,IAAI,GAAG,GAAG;YAC3C,eAAe,EAAE,aAAa,GAAG,IAAI,GAAG,GAAG;SAC5C,CAAC;QACF,QACE,EAAC,IAAI,uDACH,0EAAK,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,gBAAc,KAAK,qBAAmB,UAAU,EAAE,IAAI,EAAC,aAAa,IAAK,SAAS,GAC1H,8DAAa,EACb,6DAAM,KAAK,EAAC,KAAK,EAAC,KAAK,EAAE,aAAa,GAAG,IAAI,GAAG,EAAE,SAAS,EAAE,eAAe,GAAG,GAAG,UAAU,GAAG,EAAE,GAAS,CACtG,EACL,cAAc,GAAG,YAAM,KAAK,EAAC,YAAY,IAAE,UAAU,MAAS,GAAG,IAAI,CACjE,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["GoProgress"],"sources":["src/components/go-progress/go-progress.scss?tag=go-progress","src/components/go-progress/go-progress.tsx"],"sourcesContent":["go-progress {\n  --go-progress-color: var(--go-color-primary-600);\n  --go-progress-bar-height: 0.25rem;\n  --go-progress-padding: var(--go-progress-bar-height) 0;\n  --go-progress-radius: var(--radius-round);\n  --go-progress-track-color: var(--go-color-neutral-200);\n\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: var(--go-progress-padding);\n  .track {\n    flex: 1;\n    position: relative;\n    height: var(--go-progress-bar-height);\n    background-color: var(--go-progress-track-color);\n    border-radius: var(--go-progress-radius);\n    overflow: hidden;\n    .bar {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      background-color: var(--go-progress-color);\n      border-radius: var(--go-progress-radius);\n      transform: translateX(-100%);\n      @include transition(transform);\n    }\n    &.indeterminate {\n      .bar {\n        border-radius: var(--go-progress-radius);\n        transform-origin: left center;\n        animation: indeterminate-progress 1.5s linear infinite;\n        @include reduced-motion {\n          transform: translateX(0%) scaleX(30%);\n          animation: indeterminate-progress-rm 3s steps(6, jump-none) infinite alternate;\n        }\n      }\n    }\n  }\n}\n@keyframes indeterminate-progress {\n  0% {\n    transform: translateX(-10%) scaleX(0);\n  }\n  50% {\n    transform: translateX(0%) scaleX(70%);\n  }\n  100% {\n    transform: translateX(110%) scaleX(0);\n  }\n}\n\n@keyframes indeterminate-progress-rm {\n  0% {\n    transform-origin: left;\n  }\n\n  100% {\n    transform-origin: right;\n  }\n}\n","import { Component, Host, h, Element, Prop, Watch, State } from '@stencil/core';\n\n@Component({\n  tag: 'go-progress',\n  styleUrl: 'go-progress.scss',\n  shadow: false,\n})\nexport class GoProgress {\n  @Element() el: HTMLElement;\n  /**\n   * min value of the progress bar\n   */\n  @Prop() min?: number = 0;\n  /**\n   * Total amount of work required for progress to complete\n   */\n  @Prop() max?: number = 100;\n  /**\n   * How much of the task that has been completed\n   */\n  @Prop({ mutable: true }) value?: number;\n\n  /**\n   * Descriptive label for screen readers to identify the progress bar\n   */\n  @Prop() label?: string;\n\n  /**\n   * Id of the label element for the progress bar\n   */\n  @Prop() labelledby?: string;\n\n  /**\n   * Set progress to indeterminate state\n   */\n  @Prop({ mutable: true }) indeterminate?: boolean = false;\n\n  /**\n   * Display percentage of completion\n   */\n  @Prop() showPercentage?: boolean = false;\n\n  @State() percentage: number;\n\n  @Watch('value')\n  updatePercentage(newValue: number) {\n    if (typeof newValue !== 'number' || !this.max) {\n      this.percentage = 0;\n      this.indeterminate = true;\n    }\n    const total = this.max - this.min;\n    this.percentage = Math.round((newValue / total) * 100);\n  }\n\n  componentWillLoad() {\n    this.updatePercentage(this.value);\n  }\n\n  render() {\n    const { percentage, indeterminate, label, labelledby, value, max, min, showPercentage } = this;\n    let ariaAttrs = {\n      'aria-valuenow': indeterminate ? null : value,\n      'aria-valuemin': indeterminate ? null : min,\n      'aria-valuemax': indeterminate ? null : max,\n    };\n    return (\n      <Host>\n        <div class={{ track: true, indeterminate }} aria-label={label} aria-labelledby={labelledby} role=\"progressbar\" {...ariaAttrs}>\n          <slot></slot>\n          <span class=\"bar\" style={indeterminate ? null : { transform: `translateX(-${100 - percentage}%` }}></span>\n        </div>\n        {showPercentage ? <span class=\"percentage\">{percentage}%</span> : null}\n      </Host>\n    );\n  }\n}\n"],"version":3}