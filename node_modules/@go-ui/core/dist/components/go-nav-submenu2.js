import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { w as warning, b as hasSlot } from './helper.js';
import { o as onClickOutside, i as onEscape } from './dom.js';

const GoNavSubmenu = /*@__PURE__*/ proxyCustomElement(class GoNavSubmenu extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.toggleEvent = createEvent(this, "toggle", 7);
        this.clickOutsideCleanUp = null;
        this.escapeCleanUp = null;
        this.hasHeaderSlot = false;
        this.columns = 1;
        this.isOpen = false;
    }
    async open() {
        this.isOpen = true;
        this.toggleEvent.emit({ isOpen: true });
        window.requestAnimationFrame(() => {
            // click outside to close menus
            this.clickOutsideCleanUp = onClickOutside(this.el, () => this.close());
            // esc to close menus
            this.escapeCleanUp = onEscape(document, () => this.close());
        });
    }
    async close() {
        this.isOpen = false;
        this.toggleEvent.emit({ isOpen: false });
        this.clickOutsideCleanUp && this.clickOutsideCleanUp();
        this.escapeCleanUp && this.escapeCleanUp();
    }
    async toggle() {
        if (this.isOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    componentWillLoad() {
        this.parentNavItem = this.el.closest('go-nav-item');
        if (!this.parentNavItem) {
            warning('<go-nav-submenu> must be a child of <go-nav-item>', this.el);
            return;
        }
        this.hasHeaderSlot = hasSlot(this.el, 'submenu-header');
    }
    render() {
        const { columns, isOpen, hasHeaderSlot } = this;
        return (h("div", { key: 'ac5bc09df1a4ebbb7996e60832e3a2899f38bfa1', class: { 'submenu-container': true, 'open': isOpen }, style: { '--submenu-columns': String(columns) } }, hasHeaderSlot ? (h("div", { class: "submenu-header" }, h("slot", { name: "submenu-header" }))) : null, h("div", { key: '196f1c3f4ebc2de3d75de0967655f1b6fd08d95c', class: "submenu-body" }, h("slot", { key: '00194d39b83582368dce9e42e9eb2e22c01d87f7' }))));
    }
    get el() { return this; }
}, [4, "go-nav-submenu", {
        "columns": [2],
        "isOpen": [32],
        "open": [64],
        "close": [64],
        "toggle": [64]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-nav-submenu"];
    components.forEach(tagName => { switch (tagName) {
        case "go-nav-submenu":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoNavSubmenu);
            }
            break;
    } });
}
defineCustomElement();

export { GoNavSubmenu as G, defineCustomElement as d };

//# sourceMappingURL=go-nav-submenu2.js.map