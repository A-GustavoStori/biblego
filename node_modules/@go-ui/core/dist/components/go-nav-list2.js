import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { p as parseJsonProp } from './helper.js';
import { d as defineCustomElement$2 } from './go-icon2.js';
import { d as defineCustomElement$1 } from './go-nav-link2.js';

const goNavListCss = "go-nav-list{--nav-list-header-padding:var(--go-base-spacing) 0;--nav-list-margin:0;--nav-list-header-color:var(--go-color-text);--nav-list-header-fs:1rem;--nav-list-header-fw:500;--nav-list-header-gap:1em;display:inline-block;margin:var(--nav-list-margin)}go-nav-list[block]{display:block}go-nav-list :where([slot=header]){font-size:var(--nav-list-header-fs);font-weight:var(--nav-list-header-fw);color:var(--nav-list-header-color);margin-bottom:var(--nav-list-header-gap)}go-nav-list .nav-list-header-text{display:flex;line-height:1.5;padding:var(--nav-list-header-padding)}go-nav-list .nav-list{list-style:none;padding:0;margin:0}go-nav-list .nav-list .nav-list{margin-left:0.5rem;padding-left:0.5rem}go-nav-list .nav-list .nav-item-link{font-size:1em;line-height:1.5}";
const GoNavListStyle0 = goNavListCss;

const GoNavList = /*@__PURE__*/ proxyCustomElement(class GoNavList extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.items = undefined;
        this.navItems = undefined;
        this.block = false;
    }
    async watchItems(newItems) {
        this.navItems = parseJsonProp(newItems);
    }
    componentWillLoad() {
        this.navItems = parseJsonProp(this.items);
    }
    render() {
        const { navItems, block } = this;
        return (h("div", { key: '6092358291c84cfc1bf0731b509fc9a1facd55d8' }, h("slot", { key: 'aa1dde74e8e75c9dac77650ce57b61e7a87aae20', name: "header" }, h("div", { key: '32c278e8f90dc1dcaf55d4acc9066f0586dcf2a2', class: "nav-list-header" })), h("slot", { key: '5f16bb7db79257d70f584e409c8e3aae8b0d9696', name: "list" }, (navItems === null || navItems === void 0 ? void 0 : navItems.length) > 0 ? (h("ul", { class: "nav-list" }, navItems.map((item) => {
            var _a, _b;
            const isCurrent = item.isCurrent || ((_a = item === null || item === void 0 ? void 0 : item.children) === null || _a === void 0 ? void 0 : _a.some((item) => item.isCurrent));
            return (h("li", { class: { 'mb-1': true, 'is-current': isCurrent } }, ((_b = item.children) === null || _b === void 0 ? void 0 : _b.length) ? (h("go-nav-list", { block: block, items: item.children }, h("go-nav-link", { block: block, item: item, slot: "header" }))) : (h("go-nav-link", { block: block, item: item }))));
        }))) : null)));
    }
    get el() { return this; }
    static get watchers() { return {
        "items": ["watchItems"]
    }; }
    static get style() { return GoNavListStyle0; }
}, [4, "go-nav-list", {
        "items": [1],
        "block": [516],
        "navItems": [32]
    }, undefined, {
        "items": ["watchItems"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-nav-list", "go-icon", "go-nav-link", "go-nav-list"];
    components.forEach(tagName => { switch (tagName) {
        case "go-nav-list":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoNavList);
            }
            break;
        case "go-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "go-nav-link":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
        case "go-nav-list":
            if (!customElements.get(tagName)) {
                defineCustomElement();
            }
            break;
    } });
}
defineCustomElement();

export { GoNavList as G, defineCustomElement as d };

//# sourceMappingURL=go-nav-list2.js.map