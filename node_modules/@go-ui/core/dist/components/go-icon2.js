import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { $ as $attrs } from './helper.js';

const goIconCss = "go-icon{--icon-size:1em;--icon-color:currentColor;display:inline-block;line-height:1}go-icon[icon-set^=material]{--icon-size:1.5em;vertical-align:middle}go-icon[icon-set^=material] .go-icon{transform:rotate(0.03deg);line-height:1em;display:inherit}go-icon .go-icon{font-size:var(--icon-size);color:var(--icon-color)}";
const GoIconStyle0 = goIconCss;

const GoIcon = /*@__PURE__*/ proxyCustomElement(class GoIcon extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.attrs = {};
        this.iconSet = 'material-icons';
        this.name = undefined;
        this.size = undefined;
        this.color = undefined;
        this.label = undefined;
    }
    componentWillLoad() {
        this.attrs = $attrs.bind(this)(false);
    }
    render() {
        const { iconSet, name, size, color, label, attrs } = this;
        const { class: customClasses } = attrs;
        return (
        // prettier-ignore
        h(Host, { key: 'acc17652d28df2698689629703ce294d6f0dbec5', "aria-hidden": label ? 'false' : 'true', style: {
                '--icon-size': size ? size : null,
                '--icon-color': color ? color : null,
            } }, label ? h("span", { class: "visually-hidden" }, label) : null, iconSet.startsWith('material') ? h("span", { class: `${iconSet} go-icon ${customClasses ? customClasses : ''}` }, name) : null, iconSet.startsWith('fa') ? h("i", { class: `${iconSet} fa-${name} go-icon ${customClasses ? customClasses : ''}` }) : null, iconSet.startsWith('bx') ? h("i", { class: `bx ${iconSet}-${name} go-icon ${customClasses ? customClasses : ''}` }) : null));
    }
    get el() { return this; }
    static get style() { return GoIconStyle0; }
}, [0, "go-icon", {
        "iconSet": [513, "icon-set"],
        "name": [1],
        "size": [1],
        "color": [1],
        "label": [1]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "go-icon":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoIcon);
            }
            break;
    } });
}
defineCustomElement();

export { GoIcon as G, defineCustomElement as d };

//# sourceMappingURL=go-icon2.js.map