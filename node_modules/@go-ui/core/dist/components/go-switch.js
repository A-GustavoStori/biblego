import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { i as inheritAttributes } from './helper.js';
import { k as kebabCase } from './kebabCase.js';
import { u as uniqueId } from './uniqueId.js';

const goSwitchCss = "go-switch{--switch-width:4rem;--switch-height:2rem;--switch-bg-color:var(--go-color-neutral-500);--switch-bg-color-checked:var(--go-color-primary-600);--switch-label-gap:1rem;--switch-radius:var(--radius-round);--switch-handle-color:#fff;--switch-handle-gap:0.25rem;--switch-handle-shadow:var(--shadow-2);--switch-shadow:var(--inner-shadow-1);--switch-text-color:#fff;--switch-handle-size:calc(min(var(--switch-width), var(--switch-height)) - 2 * var(--switch-handle-gap));--switch-text-size:max(calc(var(--switch-handle-size) / 2), 0.875rem);display:inline-flex;flex-direction:row;align-items:center;gap:var(--switch-label-gap)}go-switch.stack{flex-direction:column;align-items:flex-start;gap:var(--form-label-gap)}go-switch.full-width{display:flex;justify-content:space-between}go-switch.full-width label{flex-grow:1}go-switch label{cursor:pointer;font-weight:700}go-switch .switch-container{position:relative}go-switch .switch-group{display:flex;align-items:center;gap:calc(var(--switch-label-gap) / 2)}go-switch .switch-track{transition:background-color var(--go-duration-normal) var(--go-timing-function), outline-offset var(--go-duration-fast) var(--go-timing-function);display:block;position:relative;padding-inline:var(--switch-handle-gap);width:var(--switch-width);height:var(--switch-height);background:var(--switch-bg-color);border-radius:var(--switch-radius);box-shadow:var(--switch-shadow)}@media (prefers-reduced-motion: reduce){go-switch .switch-track{transition-duration:0s}}go-switch .switch-track .switch-text{position:absolute;top:50%;left:auto;right:20%;transform:translateY(-50%);color:var(--switch-text-color);font-size:var(--switch-text-size);line-height:1;font-weight:500}go-switch .switch-handle{display:block;position:absolute;top:var(--switch-handle-gap);left:var(--switch-handle-gap);bottom:var(--switch-handle-gap);z-index:1;background:var(--switch-handle-color);width:var(--switch-handle-size);height:var(--switch-handle-size);border-radius:var(--switch-radius);box-shadow:var(--switch-handle-shadow);transition:transform var(--go-duration-fast) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-switch .switch-handle{transition-duration:0s}}go-switch input{opacity:0;position:absolute;top:0;left:0;right:0;bottom:0;z-index:2;outline:none;cursor:pointer}go-switch input:checked~.switch-group .switch-track{--switch-bg-color:var(--switch-bg-color-checked)}go-switch input:checked~.switch-group .switch-track .switch-handle{transform:translateX(calc(var(--switch-width) - var(--switch-handle-size) - 2 * var(--switch-handle-gap)))}go-switch input:checked~.switch-group .switch-track .switch-text{left:20%;right:auto}go-switch input:focus-visible:active~.switch-group .switch-track{outline-offset:0}go-switch input:focus-visible~.switch-group .switch-track{outline:var(--go-focus-outline-width) solid var(--switch-bg-color);outline-offset:var(--go-focus-outline-offset)}";
const GoSwitchStyle0 = goSwitchCss;

const GoSwitch$1 = /*@__PURE__*/ proxyCustomElement(class GoSwitch extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        // Store attributes inherited from the host element
        this.attrs = {};
        this.checked = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.value = undefined;
        this.stack = false;
        this.fullWidth = false;
        this.showOnOff = false;
        this.showOnOffOutside = false;
        this.activeLabel = 'On';
        this.inactiveLabel = 'Off';
    }
    handleChange(e) {
        this.checked = e.target.checked;
    }
    componentWillLoad() {
        const propNames = Object.keys(this['__proto__']);
        const attributeNames = propNames.map((name) => kebabCase(name));
        this.attrs = inheritAttributes(this.el, ['class', 'style', ...attributeNames]);
    }
    render() {
        const { checked, name, label, disabled, value, attrs, stack, fullWidth, showOnOff, showOnOffOutside, activeLabel, inactiveLabel, } = this;
        const inputId = (attrs === null || attrs === void 0 ? void 0 : attrs.id) ? attrs.id : uniqueId('go-switch-');
        return (h(Host, { key: '5205c5cc2d8ff827433dfe31289927dcec6cfc01', class: { stack, 'full-width': fullWidth } }, h("label", { key: '312120a1f35c7f4956544995380b85576bab6d07', htmlFor: inputId }, label), h("div", { key: '4877f7f01bb8503af40f52c306c1ddc96b05d78f', class: "switch-container" }, h("input", Object.assign({ key: '652dc70bdfac1a35ecb4a5b94b8ca8cce47e06f0', ref: (el) => (this.inputEl = el), type: "checkbox", role: "switch", id: inputId, name: name, disabled: disabled, checked: checked, value: value }, attrs, { onChange: (e) => this.handleChange(e) })), h("div", { key: '93b6eb2c496a939e359cade903182008c33dc7f8', class: "switch-group" }, h("span", { key: '19e88239b026e86f64218c2f7854a9dc7f9e338f', class: "switch-track" }, h("span", { key: 'c6990120f0da04598ebda7e4217227c2253fd4da', class: "switch-handle" }), showOnOff ? (h("span", { class: "switch-text", "aria-hidden": "true" }, checked ? activeLabel : inactiveLabel)) : null), showOnOffOutside ? (h("span", { class: "text-size-0", "aria-hidden": "true" }, checked ? activeLabel : inactiveLabel)) : null))));
    }
    get el() { return this; }
    static get style() { return GoSwitchStyle0; }
}, [0, "go-switch", {
        "checked": [1028],
        "name": [1],
        "label": [1],
        "disabled": [4],
        "value": [8],
        "stack": [4],
        "fullWidth": [4, "full-width"],
        "showOnOff": [4, "show-on-off"],
        "showOnOffOutside": [4, "show-on-off-outside"],
        "activeLabel": [1, "active-label"],
        "inactiveLabel": [1, "inactive-label"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-switch"];
    components.forEach(tagName => { switch (tagName) {
        case "go-switch":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoSwitch$1);
            }
            break;
    } });
}
defineCustomElement$1();

const GoSwitch = GoSwitch$1;
const defineCustomElement = defineCustomElement$1;

export { GoSwitch, defineCustomElement };

//# sourceMappingURL=go-switch.js.map