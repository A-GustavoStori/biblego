import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { o as offset, f as flip, a as autoUpdate, d as debounce, c as computePosition } from './floating-ui.dom.esm.js';
import './index2.js';
import { o as onClickOutside } from './dom.js';
import { u as uniqueId } from './uniqueId.js';

const goDropdownCss = "go-dropdown{--dropdown-shadow:var(--shadow-3);--dropdown-bg-color:var(--go-color-lightest);--dropdown-duration:var(--go-duration-fast);--dropdown-radius:var(--radius-2);position:fixed;display:none;visibility:hidden;opacity:0;box-shadow:var(--dropdown-shadow);pointer-events:none;z-index:1;transform:translateY(-0.3125rem);transform-origin:top;width:var(--dropdown-width, 200px);background-color:var(--dropdown-bg-color);border-radius:var(--dropdown-radius);transition:opacity var(--dropdown-duration) var(--go-timing-function), visibility var(--go-duration-normal) var(--go-timing-function), transform var(--dropdown-duration) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-dropdown{transition-duration:0s}}go-dropdown.full-width{--dropdown-width:100%}go-dropdown.flip{transform-origin:bottom;transform:translateY(0.3125rem)}go-dropdown.is-active{visibility:visible;opacity:1;pointer-events:inherit;transform:translateY(0)}";
const GoDropdownStyle0 = goDropdownCss;

const GoDropdown = /*@__PURE__*/ proxyCustomElement(class GoDropdown extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.opened = createEvent(this, "opened", 7);
        this.closed = createEvent(this, "closed", 7);
        this.triggerSelector = undefined;
        this.isActive = false;
        this.width = 'auto';
        this.noTriggerClickHandler = false;
        this.fullWidth = false;
        this.disabled = false;
    }
    /**
     * opens dropdown
     */
    async open() {
        if (this.disabled) {
            return;
        }
        this.originEl = document.activeElement;
        this.isActive = true;
        this.opened.emit();
    }
    /**
     * closes dropdown
     */
    async close(focusBackToTrigger = false) {
        this.isActive = false;
        this.closed.emit();
        if (this.originEl && focusBackToTrigger) {
            this.originEl.focus();
        }
    }
    /**
     * toggles dropdown
     */
    async toggle() {
        if (this.isActive) {
            this.close();
        }
        else {
            this.open();
        }
    }
    componentWillLoad() {
        // if id attribute is not provided, generate a unique id for the dropdown
        if (!this.el.id) {
            this.el.id = uniqueId('go-dropdown-');
        }
        this.triggerEl = document.querySelector(`${this.triggerSelector}`);
    }
    async componentDidLoad() {
        if (!this.triggerEl) {
            return;
        }
        await this.init();
        // press esc to close dropdown
        this.escapeHandler = (e) => {
            if (e.code === 'Escape') {
                this.close();
            }
        };
        this.focusOutHandler = (e) => {
            if (this.triggerEl.contains(e.relatedTarget)) {
                return;
            }
            if (e.relatedTarget && !this.el.contains(e.relatedTarget)) {
                this.close();
            }
        };
        document.addEventListener('keydown', this.escapeHandler);
        // focus outside to close dropdown
        this.el.addEventListener('focusout', this.focusOutHandler);
    }
    disconnectedCallback() {
        if (this.escapeHandler) {
            document.removeEventListener('keydown', this.escapeHandler);
        }
        if (this.focusOutHandler) {
            this.el.removeEventListener('focusout', this.focusOutHandler);
        }
        if (this.clickOutsideCleanUp) {
            this.clickOutsideCleanUp();
        }
        if (this.cleanupAutoUpdate) {
            this.cleanupAutoUpdate();
        }
    }
    async init() {
        this.triggerEl.setAttribute('aria-haspopup', 'true');
        this.setTriggerExpanded(this.isActive);
        // add click event listener
        if (!this.noTriggerClickHandler) {
            this.triggerEl.addEventListener('click', () => this.toggle());
        }
        this.clickOutsideCleanUp = onClickOutside(this.el, (e) => {
            if (!this.triggerEl.contains(e.target) && this.isActive) {
                this.close();
            }
        });
        /**
         * Calculate position of dropdown
         */
        const middleware = [offset(4), flip()];
        this.cleanupAutoUpdate = autoUpdate(this.triggerEl, this.el, debounce(() => {
            computePosition(this.triggerEl, this.el, {
                strategy: 'fixed',
                placement: 'bottom-start',
                middleware,
            }).then(({ x, y, middlewareData }) => {
                var _a, _b;
                Object.assign(this.el.style, {
                    left: `${x}px`,
                    top: `${y}px`,
                });
                if (((_b = (_a = middlewareData.flip) === null || _a === void 0 ? void 0 : _a.overflows) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                    this.el.classList.add('flip');
                }
                else {
                    this.el.classList.remove('flip');
                }
            });
        }, 50));
    }
    setTriggerExpanded(expanded) {
        this.triggerEl.setAttribute('aria-expanded', String(expanded));
    }
    handleActiveChange(isActive) {
        this.setTriggerExpanded(isActive);
        if (isActive) {
            this.el.style.display = 'block';
            // focusFirstWithin(this.el);
        }
        else {
            this.el.addEventListener('transitionend', () => {
                this.el.style.display = 'none';
            }, { once: true });
            this.triggerEl.focus();
        }
    }
    render() {
        let { isActive, width, fullWidth } = this;
        return (h(Host, { key: '174d6d272f5936aec0445bd40168e6f929adc093', class: { 'is-active': isActive, 'full-width': fullWidth }, "aria-hidden": isActive ? 'false' : 'true', style: { '--dropdown-width': width } }, h("div", { key: '1fd09ef5f152240d046dafdb14ca90cf9d39479d', class: "dropdown-content" }, h("slot", { key: 'c5d8cbee34c6724319ee63bddb84fc8d075f97d4' }))));
    }
    get el() { return this; }
    static get watchers() { return {
        "isActive": ["handleActiveChange"]
    }; }
    static get style() { return GoDropdownStyle0; }
}, [4, "go-dropdown", {
        "triggerSelector": [1, "trigger-selector"],
        "isActive": [1540, "is-active"],
        "width": [1],
        "noTriggerClickHandler": [4, "no-trigger-click-handler"],
        "fullWidth": [4, "full-width"],
        "disabled": [4],
        "open": [64],
        "close": [64],
        "toggle": [64],
        "init": [64]
    }, undefined, {
        "isActive": ["handleActiveChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-dropdown"];
    components.forEach(tagName => { switch (tagName) {
        case "go-dropdown":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoDropdown);
            }
            break;
    } });
}
defineCustomElement();

export { GoDropdown as G, defineCustomElement as d };

//# sourceMappingURL=go-dropdown2.js.map