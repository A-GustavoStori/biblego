import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { i as inheritAttributes } from './helper.js';

const goLinkCss = "go-link .external-link-icon{height:0.9em;fill:currentColor;transform:translate(10%, 15%);margin-left:0.25em}go-link .expand::after{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0}";
const GoLinkStyle0 = goLinkCss;

const GoLink = /*@__PURE__*/ proxyCustomElement(class GoLink extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        // Store attributes inherited from the host element
        this.attrs = {};
        this.href = undefined;
        this.target = undefined;
        this.expandClickableArea = false;
        this.isExternal = false;
        this.isNewTab = false;
    }
    componentWillLoad() {
        this.checkExternal();
        this.attrs = inheritAttributes(this.el, ['href', 'target', 'expand-clickable-area']);
    }
    checkNewTab() {
        this.isNewTab = this.target === '_blank';
    }
    checkExternal() {
        if (!this.href) {
            return;
        }
        this.isExternal = this.isExternalURL(this.href);
        if (this.isExternal) {
            this.isNewTab = true;
        }
    }
    isExternalURL(url) {
        if (url.startsWith('#')) {
            return false;
        }
        const tmp = document.createElement('a');
        tmp.href = url;
        const isExternal = tmp.host !== window.location.host;
        tmp.remove();
        return isExternal;
    }
    render() {
        const { href, target, attrs, isExternal, isNewTab, expandClickableArea } = this;
        let classes = ['go-link'];
        if (attrs['class']) {
            classes.push(attrs['class']);
        }
        if (expandClickableArea) {
            classes.push('expand');
        }
        let linkAttrs = Object.assign(Object.assign({}, attrs), { href, class: classes.join(' '), target: isExternal || isNewTab ? '_blank' : target });
        return (h("a", Object.assign({ key: '518827946136783415ce3df61775299b55c0651c' }, linkAttrs), h("slot", { key: 'd4ced2692a1ab8d69646a6ab5396353b914ee15b' }), isExternal || isNewTab
            ? [
                h("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", "aria-hidden": "true", class: "external-link-icon" }, h("path", { d: "M0 0h24v24H0z", fill: "none" }), h("path", { d: "M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z" })),
                h("span", { class: "visually-hidden" }, "Opens in new a tab or window"),
            ]
            : null));
    }
    get el() { return this; }
    static get watchers() { return {
        "target": ["checkNewTab"],
        "href": ["checkExternal"]
    }; }
    static get style() { return GoLinkStyle0; }
}, [4, "go-link", {
        "href": [1],
        "target": [1],
        "expandClickableArea": [4, "expand-clickable-area"],
        "isExternal": [32],
        "isNewTab": [32]
    }, undefined, {
        "target": ["checkNewTab"],
        "href": ["checkExternal"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-link"];
    components.forEach(tagName => { switch (tagName) {
        case "go-link":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoLink);
            }
            break;
    } });
}
defineCustomElement();

export { GoLink as G, defineCustomElement as d };

//# sourceMappingURL=go-link2.js.map