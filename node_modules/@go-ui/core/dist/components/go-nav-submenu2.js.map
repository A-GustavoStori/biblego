{"file":"go-nav-submenu2.js","mappings":";;;;MAMa,YAAY;;;;;QA8CvB,wBAAmB,GAAG,IAAI,CAAC;QAC3B,kBAAa,GAAG,IAAI,CAAC;QACrB,kBAAa,GAAG,KAAK,CAAC;uBA7CI,CAAC;sBAEA,KAAK;;IAUhC,MAAM,IAAI;QACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAExC,MAAM,CAAC,qBAAqB,CAAC;;YAE3B,IAAI,CAAC,mBAAmB,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;;YAEvE,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,QAAQ,EAAE,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SAC7D,CAAC,CAAC;KACJ;IAGD,MAAM,KAAK;QACT,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAEzC,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACvD,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;KAC5C;IAGD,MAAM,MAAM;QACV,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;aAAM;YACL,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;KACF;IAMD,iBAAiB;QACf,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,OAAO,CAAC,mDAAmD,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YACtE,OAAO;SACR;QAED,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;KACzD;IAED,MAAM;QACJ,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;QAChD,QACE,4DAAK,KAAK,EAAE,EAAE,mBAAmB,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,mBAAmB,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,IACvG,aAAa,IACZ,WAAK,KAAK,EAAC,gBAAgB,IACzB,YAAM,IAAI,EAAC,gBAAgB,GAAQ,CAC/B,IACJ,IAAI,EACR,4DAAK,KAAK,EAAC,cAAc,IACvB,8DAAa,CACT,CACF,EACN;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/navigation/go-nav-bar/go-nav-submenu.tsx"],"sourcesContent":["import { hasSlot, onClickOutside, onEscape, warning } from '@/utils';\nimport { Component, Method, Prop, h, State, Event, EventEmitter, Element } from '@stencil/core';\n\n@Component({\n  tag: 'go-nav-submenu',\n})\nexport class GoNavSubmenu {\n  @Element() el: HTMLElement;\n\n  @Prop() columns: number = 1;\n\n  @State() isOpen: boolean = false;\n\n  @Event({\n    eventName: 'toggle',\n    cancelable: true,\n    bubbles: true,\n  })\n  toggleEvent: EventEmitter;\n\n  @Method()\n  async open() {\n    this.isOpen = true;\n    this.toggleEvent.emit({ isOpen: true });\n\n    window.requestAnimationFrame(() => {\n      // click outside to close menus\n      this.clickOutsideCleanUp = onClickOutside(this.el, () => this.close());\n      // esc to close menus\n      this.escapeCleanUp = onEscape(document, () => this.close());\n    });\n  }\n\n  @Method()\n  async close() {\n    this.isOpen = false;\n    this.toggleEvent.emit({ isOpen: false });\n\n    this.clickOutsideCleanUp && this.clickOutsideCleanUp();\n    this.escapeCleanUp && this.escapeCleanUp();\n  }\n\n  @Method()\n  async toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  parentNavItem: HTMLGoNavItemElement;\n  clickOutsideCleanUp = null;\n  escapeCleanUp = null;\n  hasHeaderSlot = false;\n  componentWillLoad() {\n    this.parentNavItem = this.el.closest('go-nav-item');\n    if (!this.parentNavItem) {\n      warning('<go-nav-submenu> must be a child of <go-nav-item>', this.el);\n      return;\n    }\n\n    this.hasHeaderSlot = hasSlot(this.el, 'submenu-header');\n  }\n\n  render() {\n    const { columns, isOpen, hasHeaderSlot } = this;\n    return (\n      <div class={{ 'submenu-container': true, 'open': isOpen }} style={{ '--submenu-columns': String(columns) }}>\n        {hasHeaderSlot ? (\n          <div class=\"submenu-header\">\n            <slot name=\"submenu-header\"></slot>\n          </div>\n        ) : null}\n        <div class=\"submenu-body\">\n          <slot></slot>\n        </div>\n      </div>\n    );\n  }\n}\n"],"version":3}