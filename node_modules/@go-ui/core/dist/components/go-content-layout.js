import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { b as hasSlot, j as watchDevice } from './helper.js';
import { d as defineCustomElement$6 } from './go-breadcrumbs2.js';
import { d as defineCustomElement$5 } from './go-hero2.js';
import { d as defineCustomElement$4 } from './go-icon2.js';
import { d as defineCustomElement$3 } from './go-nav-link2.js';
import { d as defineCustomElement$2 } from './go-toc2.js';

const goContentLayoutCss = "go-content-layout{--content-container-padding:2rem 0;display:block}go-content-layout .content-container{position:relative;padding:var(--content-container-padding)}@media (min-width: 1024px){go-content-layout .content-container>.row{align-items:flex-start}go-content-layout .content-container .sticky{position:sticky;top:0;bottom:0}}";
const GoContentLayoutStyle0 = goContentLayoutCss;

const GoContentLayout$1 = /*@__PURE__*/ proxyCustomElement(class GoContentLayout extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.hasSidebar = false;
        this.pageHeading = undefined;
        this.preHeading = undefined;
        this.intro = undefined;
        this.breadcrumbs = undefined;
        this.heroImgSrc = undefined;
        this.heroImgAlt = undefined;
        this.noHero = false;
        this.toc = undefined;
        this.tocProps = undefined;
        this.sidebarMobilePosition = 'start';
        this.sidebarDesktopPosition = 'start';
        this.sidebarSticky = false;
        this.computedSidebarPosition = null;
    }
    async initToc() {
        if (this.tocEl) {
            await this.tocEl.init();
        }
    }
    async componentWillLoad() {
        this.hasSidebar = hasSlot(this.el, 'sidebar');
        // add resize observer to toggle between mobile and desktop
        watchDevice((device) => {
            const { sidebarMobilePosition, sidebarDesktopPosition } = this;
            const deviceSidebarPosition = {
                mobile: sidebarMobilePosition,
                tablet: sidebarMobilePosition,
                desktop: sidebarDesktopPosition,
                large: sidebarDesktopPosition,
            };
            this.computedSidebarPosition = deviceSidebarPosition[device];
        });
    }
    adjustSidebarPosition(pos) {
        var _a;
        if (!this.hasSidebar || !this.sidebarTemplate) {
            return;
        }
        const tempSidebar = this.sidebarTemplate;
        tempSidebar.style.display = 'block';
        tempSidebar.setAttribute('aria-hidden', 'false');
        if (pos === 'start') {
            this.sidebarContainerStart.appendChild(tempSidebar);
        }
        else {
            (_a = this.sidebarContainerEnd) === null || _a === void 0 ? void 0 : _a.appendChild(tempSidebar);
        }
    }
    componentDidLoad() {
        this.initToc();
    }
    render() {
        const { pageHeading, intro, preHeading, breadcrumbs, toc, tocProps, hasSidebar, computedSidebarPosition, sidebarSticky: sticky, noHero } = this;
        const classes = {
            start: computedSidebarPosition === 'start'
                ? {
                    'content-sidebar col-12 col-desktop-3': true,
                    sticky,
                }
                : null,
            end: computedSidebarPosition === 'end'
                ? {
                    'content-sidebar col-12 col-desktop-3 offset-desktop-1': true,
                    sticky,
                }
                : null,
        };
        return (h(Host, { key: '0688967fd783071d4a6fbf02263310904c7583b5' }, h("div", { key: '13d3bae3121425bb14fe10e84d30f653c3c1786c', ref: (el) => (this.sidebarTemplate = el), id: "sidebar-template", "aria-hidden": true, style: { display: 'none' } }, h("div", { key: '829f913334f4d69ea0737940640a49e869a173e5', class: { 'content-sidebar': true, sticky } }, toc && h("go-toc", Object.assign({}, tocProps, { ref: (el) => (this.tocEl = el) })), h("slot", { key: '531b9967e4f62ca4ceeafbf636ce47c486130683', name: "sidebar" }))), !noHero && (h("go-hero", { breadcrumbs: breadcrumbs, preHeading: preHeading, heading: pageHeading }, h("slot", { name: "full-width-bg" }), h("slot", { name: "intro" }, h("p", null, intro)))), h("div", { key: 'c4af2ec74840aecafaef818a8b56b486e83bdfeb', class: "container content-container" }, h("div", { key: '00f16676c7431e611e78461a8277770978c35fd5', class: "row" }, hasSidebar && h("aside", { ref: (el) => (this.sidebarContainerStart = el), class: classes.start }), h("main", { key: '5ca38737fcc9dbd354eedab4bbdc184e56932951', class: {
                'col-12 col-desktop-8 content-main': true,
                'offset-desktop-1': hasSidebar && computedSidebarPosition === 'start',
            } }, !hasSidebar && toc && h("go-toc", Object.assign({}, tocProps, { ref: (el) => (this.tocEl = el) })), h("slot", { key: '63183f5095c67abbde34e7f0958e2d7bacede424' })), hasSidebar && h("aside", { ref: (el) => (this.sidebarContainerEnd = el), class: classes.end })))));
    }
    get el() { return this; }
    static get watchers() { return {
        "computedSidebarPosition": ["adjustSidebarPosition"]
    }; }
    static get style() { return GoContentLayoutStyle0; }
}, [4, "go-content-layout", {
        "pageHeading": [1, "page-heading"],
        "preHeading": [1, "pre-heading"],
        "intro": [1],
        "breadcrumbs": [1],
        "heroImgSrc": [1, "hero-img-src"],
        "heroImgAlt": [1, "hero-img-alt"],
        "noHero": [4, "no-hero"],
        "toc": [4],
        "tocProps": [16],
        "sidebarMobilePosition": [1, "sidebar-mobile-position"],
        "sidebarDesktopPosition": [1, "sidebar-desktop-position"],
        "sidebarSticky": [4, "sidebar-sticky"],
        "computedSidebarPosition": [32],
        "initToc": [64]
    }, undefined, {
        "computedSidebarPosition": ["adjustSidebarPosition"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-content-layout", "go-breadcrumbs", "go-hero", "go-icon", "go-nav-link", "go-toc"];
    components.forEach(tagName => { switch (tagName) {
        case "go-content-layout":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoContentLayout$1);
            }
            break;
        case "go-breadcrumbs":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "go-hero":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "go-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "go-nav-link":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "go-toc":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const GoContentLayout = GoContentLayout$1;
const defineCustomElement = defineCustomElement$1;

export { GoContentLayout, defineCustomElement };

//# sourceMappingURL=go-content-layout.js.map