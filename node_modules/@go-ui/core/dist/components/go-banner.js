import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { b as hasSlot } from './helper.js';
import { d as defineCustomElement$3 } from './go-button2.js';
import { d as defineCustomElement$2 } from './go-spinner2.js';

const goBannerCss = "go-banner{--banner-border-width:0.5rem;--banner-border-color:var(--go-color-primary-300);--banner-radius:var(--radius-2);--banner-padding-x:1rem;--banner-padding-y:1rem;--banner-heading-gap:0.5rem;--banner-bg-color:var(--go-color-primary-200);--banner-fg-color:var(--go-color-darkest);--banner-shadow:var(--shadow-1);--banner-icon-bar-padding:0.5rem;border-left:var(--banner-border-width) solid var(--banner-border-color);border-radius:var(--banner-radius);background-color:var(--banner-bg-color);color:var(--banner-fg-color);box-shadow:var(--banner-shadow);display:none;flex-direction:row;align-items:stretch;position:relative}go-banner.is-showing{display:flex}go-banner[variant=success]{--banner-border-color:var(--go-color-success-300);--banner-bg-color:var(--go-color-success-100);--banner-fg-color:var(--go-color-darkest)}go-banner[variant=critical]{--banner-border-color:var(--go-color-critical-300);--banner-bg-color:var(--go-color-critical-100);--banner-fg-color:var(--go-color-darkest)}go-banner .icon-col{background:var(--banner-border-color);color:var(--banner-icon-color);padding:0 calc(var(--banner-border-width) + var(--banner-icon-bar-padding)) 0 var(--banner-icon-bar-padding);display:flex;align-items:center}go-banner .banner-inner{display:flex;width:100%;padding:var(--banner-padding-y) var(--banner-padding-x)}go-banner .banner-inner-content{flex:1}go-banner .banner-inner-content h2{margin-bottom:var(--banner-heading-gap)}go-banner .banner-inner-content p:first-child{margin-top:0}go-banner .banner-inner-content p:last-child{margin-bottom:0}go-banner .banner-inner-dismiss{-webkit-margin-start:auto;margin-inline-start:auto}";
const GoBannerStyle0 = goBannerCss;

const GoBanner$1 = /*@__PURE__*/ proxyCustomElement(class GoBanner extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.dismissed = createEvent(this, "dismissed", 7);
        this.variant = 'info';
        this.heading = undefined;
        this.dismissible = false;
        this.isShowing = true;
        this.hasIcon = false;
    }
    // emit dismissed event on close button click
    handleClose() {
        this.isShowing = false;
        this.dismissed.emit();
    }
    // Store attributes inherited from the host element
    componentWillLoad() {
        this.hasIcon = hasSlot(this.el, 'icon');
    }
    render() {
        const { hasIcon, heading, dismissible, isShowing } = this;
        return (h(Host, { key: '6a6d5c76e4f2249e9eaf9b5cd3c1c5923d95a663', class: {
                'has-icon': hasIcon,
                dismissible,
                'is-showing': isShowing,
                'no-heading': !heading,
            } }, hasIcon ? (h("div", { class: "icon-col" }, h("slot", { name: "icon" }))) : null, h("section", { key: '9be1d2f4deb6eece692c4b1819be7cf262b4c60f', class: "banner-inner" }, h("div", { key: '364526d4880dc5806f3ca3e2084628c9ab7e793e', class: "banner-inner-content" }, heading ? h("h2", { class: "h5" }, heading) : null, h("slot", { key: 'bdb5d259862e396278877956610a46740f445bf8' })), dismissible ? (h("div", { class: "banner-inner-dismiss" }, h("go-button", { variant: "text", icon: true, class: "dismissible-btn", flat: true, onClick: () => this.handleClose(), round: true }, h("span", { class: "visually-hidden" }, "Dismiss"), h("svg", { "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M18 6 6 18M6 6l12 12" }))))) : null)));
    }
    get el() { return this; }
    static get style() { return GoBannerStyle0; }
}, [4, "go-banner", {
        "variant": [513],
        "heading": [1],
        "dismissible": [4],
        "isShowing": [32],
        "hasIcon": [32]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-banner", "go-button", "go-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "go-banner":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoBanner$1);
            }
            break;
        case "go-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "go-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const GoBanner = GoBanner$1;
const defineCustomElement = defineCustomElement$1;

export { GoBanner, defineCustomElement };

//# sourceMappingURL=go-banner.js.map