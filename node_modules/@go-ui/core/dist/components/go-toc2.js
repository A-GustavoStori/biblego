import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './go-icon2.js';
import { d as defineCustomElement$1 } from './go-nav-link2.js';
import { u as uniqueId } from './uniqueId.js';

const goTocCss = "go-toc{--toc-border-width:0.25rem;--toc-border-color:var(--go-color-primary-900);--toc-border-gap:2rem;--toc-padding:1.5rem 0;display:block}go-toc .go-toc{padding:var(--toc-padding)}go-toc .go-toc nav{position:relative}go-toc .go-toc-line{position:absolute;top:0;left:0;width:var(--toc-border-width);background:var(--toc-border-color);border-radius:var(--radius-round);height:100%}go-toc .go-toc-title{padding-left:var(--toc-border-gap);margin-bottom:1rem}go-toc .go-toc-list{padding-left:var(--toc-border-gap);list-style:none;margin:0}go-toc .go-toc-list go-link{--nav-link-current-bar-width:0}";
const GoTocStyle0 = goTocCss;

const GoToc = /*@__PURE__*/ proxyCustomElement(class GoToc extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.labelId = uniqueId('go-toc-heading-');
        this.label = 'On this page';
        this.selector = 'h2';
        this.labelClass = '';
        this.tocItems = undefined;
    }
    componentWillLoad() {
        this.init();
    }
    /**
     * Query the DOM and generate TOC
     * If content in scope is dynamically loaded, it may not be available when this toc component loads.
     * call this `init` method and have the toc regenerate the links
     * @returns void
     */
    async init() {
        const items = document.querySelectorAll(this.selector);
        if (!items.length) {
            // warning('TOC selector (' + this.selector + ') yield no result.');
            return;
        }
        this.setupItems(items);
    }
    /**
     * Initialise the TOC items from the given list of elements
     * If the element doesn't have a `id` attribute, generate an unique id and set it to the element
     * Finally set the tocItems state with url and label
     */
    setupItems(items) {
        const tocItems = [];
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (!item.id) {
                item.id = `toc-item-${i}`;
            }
            item.setAttribute('tabindex', '-1');
            tocItems.push({
                url: `#${item.id}`,
                label: item.textContent,
            });
        }
        this.tocItems = tocItems;
    }
    render() {
        const { labelId, labelClass } = this;
        return (h(Host, { key: 'ea4b815b9d480027efae49951404a086690e3865' }, this.tocItems && this.tocItems.length ? (h("div", { class: "go-toc" }, h("nav", { "aria-labelledby": labelId }, h("div", { class: "go-toc-line", "aria-hidden": "true" }), h("div", { id: labelId }, h("slot", { name: "label" }, h("span", { class: `go-toc-title h5 ${labelClass}` }, this.label))), h("ul", { class: "go-toc-list" }, this.tocItems.map(({ label, url }) => (h("li", { class: "go-toc-item" }, h("go-nav-link", { item: { label, url } })))))))) : null));
    }
    get el() { return this; }
    static get style() { return GoTocStyle0; }
}, [4, "go-toc", {
        "label": [1],
        "selector": [1],
        "labelClass": [1, "label-class"],
        "tocItems": [32],
        "init": [64]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["go-toc", "go-icon", "go-nav-link"];
    components.forEach(tagName => { switch (tagName) {
        case "go-toc":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GoToc);
            }
            break;
        case "go-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "go-nav-link":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { GoToc as G, defineCustomElement as d };

//# sourceMappingURL=go-toc2.js.map