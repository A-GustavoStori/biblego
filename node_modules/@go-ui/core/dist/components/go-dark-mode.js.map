{"file":"go-dark-mode.js","mappings":";;AAAA,MAAM,aAAa,GAAG,6BAA6B,CAAC;AACpD,yBAAe,aAAa;;MCOfA,YAAU;;;;;yBAIO,YAAY;;IAExC,MAAM,iBAAiB;;QAErB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAE7C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;QAGrB,IAAI,KAAK,CAAC,SAAS,EAAE;YACnB,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC;gBACnF,MAAM,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;aACnD,CAAC,CAAC;SACJ;KACF;;;;;;;;;;;;IAcD,MAAM,iBAAiB;QACrB,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACrD,IAAI,SAAS,KAAK,OAAO,IAAI,SAAS,KAAK,MAAM,EAAE;YACjD,OAAO,SAAS,CAAC;SAClB;;QAGD,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,OAAO,EAAE;YAClF,OAAO,MAAM,CAAC;SACf;;QAGD,OAAO,OAAO,CAAC;KAChB;;;;;IAYD,MAAM,QAAQ,CAAC,KAAY;QACzB,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QACjC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;KAC9D;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["GoDarkMode"],"sources":["src/components/go-dark-mode/go-dark-mode.scss?tag=go-dark-mode","src/components/go-dark-mode/go-dark-mode.tsx"],"sourcesContent":["go-dark-mode {\n display: block;\n}\n","import { Component, Prop, Build, EventEmitter, Event, Method } from '@stencil/core';\n\nexport type Theme = 'light' | 'dark';\n@Component({\n  tag: 'go-dark-mode',\n  styleUrl: 'go-dark-mode.scss',\n  shadow: false,\n})\nexport class GoDarkMode {\n  /**\n   * Attribute name on html element that will be used to store theme\n   */\n  @Prop() attribute: string = 'data-theme';\n\n  async componentWillLoad() {\n    // get user preference\n    const theme = await this.getUserPreference();\n\n    this.setTheme(theme);\n\n    // add event listener\n    if (Build.isBrowser) {\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', async (e) => {\n        await this.setTheme(e.matches ? 'dark' : 'light');\n      });\n    }\n  }\n\n  /**\n   * get preferred theme,\n   * 1. Check user settings:\n   *    - check if localstorage has user-theme key\n   *    - if so, check if value is either light or dark,\n   *    - if so, return value\n   *    - if value is neither light or dark, continue to next step\n   * 2. Check system preference:\n   *    - check if prefers-color-scheme is dark, if so, return dark\n   * 3. default to light\n   */\n  @Method()\n  async getUserPreference(): Promise<Theme> {\n    const userTheme = localStorage.getItem('user-theme');\n    if (userTheme === 'light' || userTheme === 'dark') {\n      return userTheme;\n    }\n\n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n\n    // Default to light\n    return 'light';\n  }\n\n  @Event({\n    eventName: 'themechange',\n  })\n  changeEvent: EventEmitter<{ theme: Theme }>;\n\n  /**\n   * set the current theme and change the html attribute\n   * @param theme theme to set\n   */\n  @Method()\n  async setTheme(theme: Theme): Promise<void> {\n    localStorage.setItem('user-theme', theme);\n    this.changeEvent.emit({ theme });\n    document.documentElement.setAttribute(this.attribute, theme);\n  }\n}\n"],"version":3}