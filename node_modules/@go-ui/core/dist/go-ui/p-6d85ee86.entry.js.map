{"version":3,"names":["Keys","MenuActions","TreeActions","filterOptions","options","filter","exclude","filterString","toLowerCase","trim","option","matches","label","indexOf","getActionFromKey","event","menuOpen","key","altKey","ctrlKey","metaKey","openKeys","includes","Open","Backspace","Clear","length","Type","Down","Right","Next","Up","CloseSelect","Left","Previous","Home","First","End","Last","PageUp","PageDown","Escape","Close","Enter","Space","getIndexByLetter","startIndex","orderedOptions","slice","firstMatch","allSameLetter","array","every","letter","split","getUpdatedIndex","current","max","action","Math","min","isScrollable","element","clientHeight","scrollHeight","maintainScrollVisibility","activeElement","scrollParent","offsetHeight","offsetTop","parentOffsetHeight","scrollTop","isAbove","isBelow","scrollTo","parseSelectOptions","console","log","startsWith","parsedOptions","parseJsonProp","map","value","e","error","goSelectCss","GoSelectStyle0","GoSelect","this","hasNamedSlot","prefixer","controlId","uniqueId","ignoreBlur","componentWillLoad","loadOptions","attrs","inheritNonFieldAttrs","loadFieldSlots","el","loadValue","activeIndex","findIndex","selectOption","handleDomOnOpen","isOpen","listboxRef","open","inputRef","dropdownWidth","offsetWidth","activeOptionRef","close","render","id","readonly","disabled","name","fieldProps","loadFieldProps","activeId","controlAttrs","Object","assign","h","type","fieldSlotNames","slotName","slot","class","role","undefined","ref","tabindex","onBlur","onComboBlur","bind","onKeyDown","onComboKeyDown","_a","arrow","xmlns","fill","stroke","viewBox","d","width","onOpened","updateMenuState","onClosed","i","onClick","stopPropagation","onOptionClick","onMouseDown","onOptionMouseDown","getSearchString","char","searchTimeout","window","clearTimeout","setTimeout","searchString","preventDefault","onOptionChange","onComboType","searchIndex","index","selected","selectedLabel","selectedIndex","goChange","emit","callFocus","focus"],"sources":["src/components/form/go-select/utils.ts","src/components/form/go-select/go-select.scss?tag=go-select","src/components/form/go-select/go-select.tsx"],"sourcesContent":["/**\n * This file is based on the good work of @smhigley:\n * https://github.com/microsoft/sonder-ui/blob/master/src/components/select/select.tsx\n */\n\nimport { SelectOption } from '@/interfaces';\nimport { parseJsonProp } from '@/utils';\n\nexport enum Keys {\n  Backspace = 'Backspace',\n  Clear = 'Clear',\n  Down = 'ArrowDown',\n  End = 'End',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Home = 'Home',\n  Left = 'ArrowLeft',\n  PageDown = 'PageDown',\n  PageUp = 'PageUp',\n  Right = 'ArrowRight',\n  Space = ' ',\n  Tab = 'Tab',\n  Up = 'ArrowUp',\n}\n\nexport enum MenuActions {\n  Close,\n  CloseSelect,\n  First,\n  Last,\n  Next,\n  Open,\n  PageDown,\n  PageUp,\n  Previous,\n  Select,\n  Space,\n  Type,\n}\n\nexport enum TreeActions {\n  Close,\n  First,\n  Last,\n  Next,\n  Open,\n  Previous,\n  Select,\n  UpLevel,\n}\n\n// filter an array of options against an input string\n// returns an array of options that begin with the filter string, case-independent\nexport function filterOptions(\n  options: SelectOption[] = [],\n  filter: string,\n  exclude: SelectOption[] = [],\n): SelectOption[] {\n  let filterString = filter.toLowerCase().trim();\n  return options.filter((option) => {\n    const matches = option.label.toLowerCase().indexOf(filterString) === 0;\n    return matches && exclude.indexOf(option) < 0;\n  });\n}\n\n// return an array of exact option name matches from a comma-separated string\nexport function findMatches(options: SelectOption[], search: string): SelectOption[] {\n  const labels = search.split(',');\n  return labels\n    .map((label) => {\n      const match = options.filter((option) => label.trim().toLowerCase() === option.label.toLowerCase());\n      return match.length > 0 ? match[0] : null;\n    })\n    .filter((option) => option !== null);\n}\n\n// return combobox action from key press\nexport function getActionFromKey(event: KeyboardEvent, menuOpen: boolean): MenuActions {\n  const { key, altKey, ctrlKey, metaKey } = event;\n  const openKeys = ['ArrowDown', 'ArrowUp', 'Enter', ' ', 'Home', 'End']; // all keys that will open the combo\n\n  // handle opening when closed\n  if (!menuOpen && openKeys.includes(key)) {\n    return MenuActions.Open;\n  }\n\n  // handle typing characters when open or closed\n  if (\n    key === Keys.Backspace ||\n    key === Keys.Clear ||\n    (key.length === 1 && key !== ' ' && !altKey && !ctrlKey && !metaKey)\n  ) {\n    return MenuActions.Type;\n  }\n\n  // handle keys when open\n  if (menuOpen) {\n    if ((key === Keys.Down && !altKey) || key === Keys.Right) {\n      return MenuActions.Next;\n    } else if (key === Keys.Up && altKey) {\n      return MenuActions.CloseSelect;\n    } else if (key === Keys.Up || key === Keys.Left) {\n      return MenuActions.Previous;\n    } else if (key === Keys.Home) {\n      return MenuActions.First;\n    } else if (key === Keys.End) {\n      return MenuActions.Last;\n    } else if (key === Keys.PageUp) {\n      return MenuActions.PageUp;\n    } else if (key === Keys.PageDown) {\n      return MenuActions.PageDown;\n    } else if (key === Keys.Escape) {\n      return MenuActions.Close;\n    } else if (key === Keys.Enter) {\n      return MenuActions.CloseSelect;\n    } else if (key === Keys.Space) {\n      return MenuActions.Space;\n    }\n  }\n}\n\n// return the index of an option from an array of options, based on a search string\n// if the filter is multiple iterations of the same letter (e.g \"aaa\"), then cycle through first-letter matches\nexport function getIndexByLetter(options: SelectOption[], filter: string, startIndex = 0): number {\n  const orderedOptions = [...options.slice(startIndex), ...options.slice(0, startIndex)];\n  const firstMatch = filterOptions(orderedOptions, filter)[0];\n  const allSameLetter = (array) => array.every((letter) => letter === array[0]);\n\n  // first check if there is an exact match for the typed string\n  if (firstMatch) {\n    return options.indexOf(firstMatch);\n  }\n\n  // if the same letter is being repeated, cycle through first-letter matches\n  else if (allSameLetter(filter.split(''))) {\n    const matches = filterOptions(orderedOptions, filter[0]);\n    return options.indexOf(matches[0]);\n  }\n\n  // if no matches, return -1\n  else {\n    return -1;\n  }\n}\n\n// get updated option index\nexport function getUpdatedIndex(current: number, max: number, action: MenuActions): number {\n  switch (action) {\n    case MenuActions.First:\n      return 0;\n    case MenuActions.Last:\n      return max;\n    case MenuActions.Previous:\n      return Math.max(0, current - 1);\n    case MenuActions.Next:\n      return Math.min(max, current + 1);\n    default:\n      return current;\n  }\n}\n\n// check if an element is currently scrollable\nexport function isScrollable(element: HTMLElement): boolean {\n  return element && element.clientHeight < element.scrollHeight;\n}\n\n// ensure given child element is within the parent's visible scroll area\nexport function maintainScrollVisibility(activeElement: HTMLElement, scrollParent: HTMLElement) {\n  const { offsetHeight, offsetTop } = activeElement;\n  const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent;\n\n  const isAbove = offsetTop < scrollTop;\n  const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n  if (isAbove) {\n    scrollParent.scrollTo(0, offsetTop);\n  } else if (isBelow) {\n    scrollParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n  }\n}\n\n/**\n * parse multiple formats of options prop into SelectOption[]\n */\nexport const parseSelectOptions = (options: string | string[] | SelectOption[]): SelectOption[] | null => {\n  try {\n    // vue passes array of strings into prop as the result of Array.toString()\n    console.log('parseSelectOptions', { options });\n    if (typeof options === 'string' && !options.startsWith('[')) {\n      options = options.split(',');\n    }\n\n    const parsedOptions = parseJsonProp<SelectOption[] | string[]>(options);\n    if (parsedOptions) {\n      // format parsed options into SelectOption[]\n      return parsedOptions.map((option) =>\n        typeof option === 'string'\n          ? {\n              value: option,\n              label: option,\n            }\n          : option,\n      );\n    }\n  } catch (e) {\n    console.error(`Couldn't parse options: `, options, { e });\n  }\n};\n","@import '../../../global/scss/dropdown/mixins';\n\ngo-select {\n  @include dropdown-item-vars;\n  --dropdown-width: 100%;\n\n  .combo {\n    width: 100%;\n    position: relative;\n  }\n  .control-icon {\n    z-index: 1;\n  }\n  .control {\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    .arrow {\n      height: 1.5em;\n      @include transition(transform);\n      &.open {\n        transform: rotate(180deg);\n      }\n    }\n  }\n\n  go-dropdown {\n    max-height: 20rem;\n    overflow: auto;\n    z-index: 9;\n  }\n\n  .combo-option {\n    @include dropdown-item;\n\n    &[aria-selected] {\n      @include item-selected-state;\n    }\n  }\n\n  &[disabled] {\n    .combo-option {\n      @include item-disabled-state;\n    }\n  }\n}\n","import { Component, h, Element, Prop, State, Event, EventEmitter, Watch } from '@stencil/core';\nimport { FieldValue, GoChangeEventDetail, SelectOption, SelectProps } from '@/interfaces';\nimport { fieldSlotNames, inheritNonFieldAttrs, loadFieldSlots, loadFieldProps } from '@/utils';\nimport {\n  getActionFromKey,\n  getIndexByLetter,\n  getUpdatedIndex,\n  isScrollable,\n  maintainScrollVisibility,\n  MenuActions,\n  parseSelectOptions,\n} from './utils';\nimport { uniqueId } from 'lodash-es';\n\n@Component({\n  tag: 'go-select',\n  styleUrl: 'go-select.scss',\n  shadow: false,\n})\nexport class GoSelect implements SelectProps {\n  @Element() el: HTMLElement;\n\n  @Prop() name: string;\n  @Prop() label: string;\n  @Prop() labelId?: string;\n  @Prop() suffixId?: string;\n  @Prop() hintId?: string;\n  @Prop() errorId?: string;\n  @Prop() disabled?: boolean;\n  @Prop() hint?: string;\n  @Prop() error?: string | boolean;\n  @Prop() readonly?: boolean;\n  @Prop({ mutable: true }) value?: FieldValue;\n\n  /**\n   * Array of options.\n   * Note:\n   * Sometimes frameworks may incorrectly pass the result of Array.toString() into this prop,\n   * `go-select` tries to obsorb this issue by trying to do a `split(',')` on the options prop\n   * if a string is passed in.\n   * This means the accepted formats include:\n   * 1. array of objects of type `{label: string, value: string}`\n   * 2. array of strings (e.g. ['Apple', 'Orange', 'Banana'])\n   * 3. string, toString() result of format 2 (i.e. 'Apple,Orange,Banana')\n   * 4. string, option 1 or 2 passed in as string that can be parsed by [JSON5](https://json5.org/)\n   */\n  @Prop() options: SelectOption[] | string[] | string;\n\n  /**\n   * parsed options array\n   */\n  @State() parsedOptions: SelectOption[] = [];\n\n  /**\n   * common form control properties\n   */\n  @State() attrs: any;\n\n  hasNamedSlot: { [key: string]: boolean } = {};\n  prefixer = 'go-select-';\n  controlId = uniqueId(this.prefixer);\n  controlEl: HTMLElement;\n\n  async componentWillLoad() {\n    this.loadOptions();\n    this.attrs = inheritNonFieldAttrs(this, ['options']);\n    this.hasNamedSlot = loadFieldSlots(this.el);\n    if (this.value) {\n      this.loadValue();\n    }\n  }\n\n  @Watch('options')\n  loadOptions() {\n    this.parsedOptions = parseSelectOptions(this.options);\n  }\n\n  @Watch('value')\n  loadValue() {\n    this.activeIndex = this.parsedOptions.findIndex((option) => option.value === this.value);\n    this.selectOption(this.activeIndex);\n  }\n\n  /**\n   * Emit custom event with selected value\n   */\n  @Event({\n    eventName: 'gochange',\n  })\n  goChange: EventEmitter<GoChangeEventDetail<string>>;\n\n  // Active option index\n  @State() activeIndex = -1;\n\n  // Menu state\n  @State() open = false;\n\n  // Current accumulated search string\n  @State() searchString: string;\n\n  // Timeout after each typed character\n  @State() searchTimeout: number | null;\n\n  // Selected option index\n  @State() selectedIndex: number;\n\n  // input value\n  @State() selectedLabel = '';\n\n  @State() dropdownWidth = 'auto';\n\n  // save reference to active option\n  private activeOptionRef: HTMLElement;\n\n  // Prevent menu closing before click completed\n  private ignoreBlur = false;\n\n  // save reference to combobox element\n  private inputRef: HTMLElement;\n\n  // save reference to listbox\n  private listboxRef: HTMLGoDropdownElement;\n\n  @Watch('open')\n  handleDomOnOpen(isOpen) {\n    if (isOpen) {\n      this.listboxRef.open();\n      // adjust dropdown size\n      // - we use fixed positioning strategy to make dropdown \"break out\" of the clipping containers, now we need to calculate dropdown width up opening\n      // see https://floating-ui.com/docs/computePosition#strategy\n      if (this.inputRef) {\n        this.dropdownWidth = `${this.inputRef.offsetWidth}px`;\n      }\n      if (isScrollable(this.listboxRef) && this.activeOptionRef) {\n        maintainScrollVisibility(this.activeOptionRef, this.listboxRef);\n      }\n    } else {\n      this.listboxRef.close();\n    }\n  }\n\n  render() {\n    const {\n      parsedOptions,\n      activeIndex,\n      controlId: id,\n      open = false,\n      dropdownWidth,\n      value,\n      readonly,\n      disabled,\n      name,\n      attrs,\n    } = this;\n\n    const fieldProps = loadFieldProps(this);\n\n    const activeId = open ? `${id}-${activeIndex}` : '';\n\n    const controlAttrs = {\n      id,\n      name,\n      value,\n      ...attrs,\n    };\n    return [\n      <input type=\"hidden\" name={name} value={value} />,\n      <go-field {...fieldProps}>\n        {fieldSlotNames.map((slotName) => {\n          if (this.hasNamedSlot[slotName]) {\n            return (\n              <template slot={slotName}>\n                <slot name={slotName}></slot>\n              </template>\n            );\n          }\n        })}\n        <div class=\"combo\">\n          <div\n            {...controlAttrs}\n            role=\"combobox\"\n            aria-activedescendant={activeId}\n            aria-autocomplete=\"none\"\n            aria-haspopup=\"listbox\"\n            aria-expanded={`${open}`}\n            aria-labelledby={`${id} ${id}-value`}\n            aria-controls={`${id}-listbox`}\n            aria-disabled={disabled ? 'true' : undefined}\n            aria-readonly={readonly ? 'true' : undefined}\n            class=\"control\"\n            id={`${id}-value`}\n            ref={(el) => (this.inputRef = el)}\n            tabindex=\"0\"\n            onBlur={this.onComboBlur.bind(this)}\n            onKeyDown={this.onComboKeyDown.bind(this)}>\n            <span>{parsedOptions && parsedOptions[activeIndex]?.label ? parsedOptions[activeIndex].label : ''}</span>\n            <svg\n              class={{ arrow: true, open }}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              aria-hidden=\"true\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              viewBox=\"0 0 24 24\">\n              <path d=\"m6 9 6 6 6-6\" />\n            </svg>\n          </div>\n          <go-dropdown\n            disabled={readonly || disabled}\n            trigger-selector={`#${id}-value`}\n            width={dropdownWidth}\n            onOpened={() => {\n              this.updateMenuState(true);\n            }}\n            onClosed={() => {\n              this.updateMenuState(false);\n            }}\n            role=\"listbox\"\n            ref={(el) => (this.listboxRef = el)}\n            id={`${id}-listbox`}>\n            {parsedOptions &&\n              parsedOptions.map((option, i) => {\n                return (\n                  <div\n                    class={{ 'current': this.activeIndex === i, 'combo-option': true }}\n                    id={`${id}-${i}`}\n                    aria-selected={this.activeIndex === i ? 'true' : undefined}\n                    ref={(el) => {\n                      if (this.activeIndex === i) {\n                        this.activeOptionRef = el;\n                      }\n                    }}\n                    role=\"option\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      this.onOptionClick(i);\n                    }}\n                    onMouseDown={this.onOptionMouseDown.bind(this)}>\n                    {option.label}\n                  </div>\n                );\n              })}\n          </go-dropdown>\n        </div>\n      </go-field>,\n    ];\n  }\n\n  private getSearchString(char: string) {\n    // reset typing timeout and start new timeout\n    // this allows us to make multiple-letter matches, like a native select\n    if (typeof this.searchTimeout === 'number') {\n      window.clearTimeout(this.searchTimeout);\n    }\n\n    this.searchTimeout = window.setTimeout(() => {\n      this.searchString = '';\n    }, 500);\n\n    // add most recent letter to saved search string\n    this.searchString += char;\n    return this.searchString;\n  }\n\n  private onComboKeyDown(event: KeyboardEvent) {\n    if (!this.parsedOptions) {\n      return;\n    }\n    const { key } = event;\n    const max = this.parsedOptions.length - 1;\n\n    const action = getActionFromKey(event, this.open);\n\n    switch (action) {\n      case MenuActions.Next:\n      case MenuActions.Last:\n      case MenuActions.First:\n      case MenuActions.Previous:\n        event.preventDefault();\n        return this.onOptionChange(getUpdatedIndex(this.activeIndex, max, action));\n      case MenuActions.CloseSelect:\n      case MenuActions.Space:\n        event.preventDefault();\n        this.selectOption(this.activeIndex);\n      case MenuActions.Close:\n        event.preventDefault();\n        return this.updateMenuState(false);\n      case MenuActions.Type:\n        // this.activeIndex = Math.max(0, getIndexByLetter(this.options, key));\n        this.onComboType(key);\n      case MenuActions.Open:\n        event.preventDefault();\n        return this.updateMenuState(true);\n    }\n  }\n\n  private onComboBlur() {\n    if (this.ignoreBlur) {\n      this.ignoreBlur = false;\n      return;\n    }\n\n    if (this.open) {\n      this.selectOption(this.activeIndex);\n      this.updateMenuState(false, false);\n    }\n  }\n\n  private onComboType(letter: string) {\n    // open the listbox if it is closed\n    this.updateMenuState(true);\n\n    // find the index of the first matching option\n    const searchString = this.getSearchString(letter);\n    const searchIndex = getIndexByLetter(this.parsedOptions, searchString, this.activeIndex + 1);\n\n    // if a match was found, go to it\n    if (searchIndex >= 0) {\n      this.onOptionChange(searchIndex);\n    }\n  }\n\n  private onOptionChange(index: number) {\n    this.activeIndex = index;\n  }\n\n  private onOptionClick(index: number) {\n    this.onOptionChange(index);\n    this.selectOption(index);\n    this.updateMenuState(false);\n  }\n\n  private onOptionMouseDown() {\n    this.ignoreBlur = true;\n  }\n\n  private selectOption(index: number) {\n    if (index < 0) {\n      return;\n    }\n    const selected = this.parsedOptions[index];\n    this.selectedLabel = selected.label;\n    this.selectedIndex = index;\n    this.value = selected.value;\n\n    this.goChange.emit({ value: selected.value });\n  }\n\n  private updateMenuState(open: boolean, callFocus = true) {\n    if (open && (this.readonly || this.disabled)) {\n      return;\n    }\n    this.open = open;\n    if (callFocus) {\n      this.inputRef.focus();\n    }\n  }\n}\n"],"mappings":"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"}