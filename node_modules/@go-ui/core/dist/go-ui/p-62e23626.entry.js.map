{"version":3,"names":["goSkipLinkCss","GoSkipLinkStyle0","GoSkipLink","this","hasTabIndex","componentWillLoad","targetEl","document","querySelector","target","warning","hasAttribute","id","setTabIndex","uniqueId","href","setAttribute","render","h","Host","key","class"],"sources":["src/components/go-skip-link/go-skip-link.scss?tag=go-skip-link","src/components/go-skip-link/go-skip-link.tsx"],"sourcesContent":["go-skip-link {\n  /**\n    @prop --skip-link-padding:\n      Padding to apply to the skip link focusable area\n      - default: 1rem 2rem\n  */\n  --skip-link-padding: 1rem 2rem;\n\n  /**\n    @prop --skip-link-bg-color:\n      Background color for the skip link focusable area\n      - default: var(--go-color-secondary-700)\n  */\n  --skip-link-bg-color: var(--go-color-secondary-700);\n\n  /**\n    @prop --skip-link-text-color:\n      Text color for the skip link focusable area\n      - default: var(--go-color-lightest)\n  */\n  --skip-link-text-color: var(--go-color-lightest);\n\n  position: fixed;\n  top: 1rem;\n  left: 1rem;\n\n  a,\n  a:focus-visible {\n    display: block;\n    padding: var(--skip-link-padding);\n    background: var(--skip-link-bg-color);\n    color: var(--skip-link-text-color);\n    box-shadow: var(--shadow-2);\n  }\n}\n","import { Component, Host, h, Element, Prop, State } from '@stencil/core';\nimport { uniqueId } from 'lodash-es';\nimport { warning } from '../../utils/helper';\n\n@Component({\n  tag: 'go-skip-link',\n  styleUrl: 'go-skip-link.scss',\n  shadow: false,\n})\nexport class GoSkipLink {\n  @Element() el: HTMLElement;\n\n  /**\n   * Tell skip link which element to focus (supports any query selector)\n   */\n  @Prop() target?: string = 'main';\n\n  @State() href: string;\n\n  /**\n   * records if original target element has tabindex attribute set, if so, do not touch it\n   */\n  hasTabIndex: boolean = false;\n\n  componentWillLoad() {\n    // get target element\n    // check if id exists\n    // if not, generate random id and set it in the link href\n\n    const targetEl = document.querySelector(this.target) as HTMLElement;\n\n    if (!targetEl) {\n      warning(`[go-skip-link] target ${this.target} not found.`);\n      return;\n    }\n\n    if (targetEl.hasAttribute('tabindex')) {\n      this.hasTabIndex = true;\n    }\n\n    if (targetEl.id) {\n      this.setTabIndex(targetEl, targetEl.id);\n      return;\n    }\n    // generate a random id then set href\n    const id = uniqueId('skip-link-target-');\n    targetEl.id = id;\n    this.setTabIndex(targetEl, id);\n  }\n\n  setTabIndex(targetEl: HTMLElement, id: string): void {\n    this.href = `#${id}`;\n    if (!this.hasTabIndex) {\n      targetEl.setAttribute('tabindex', '-1');\n    }\n  }\n\n  render() {\n    const { href } = this;\n    return (\n      <Host>\n        <a href={href} class=\"visually-hidden-focusable\">\n          <slot></slot>\n        </a>\n      </Host>\n    );\n  }\n}\n"],"mappings":"yJAAA,MAAMA,EAAgB,gXACtB,MAAAC,EAAeD,E,MCQFE,EAAU,M,yBAarBC,KAAAC,YAAuB,M,YAPG,O,oBAS1B,iBAAAC,GAKE,MAAMC,EAAWC,SAASC,cAAcL,KAAKM,QAE7C,IAAKH,EAAU,CACbI,EAAQ,yBAAyBP,KAAKM,qBACtC,M,CAGF,GAAIH,EAASK,aAAa,YAAa,CACrCR,KAAKC,YAAc,I,CAGrB,GAAIE,EAASM,GAAI,CACfT,KAAKU,YAAYP,EAAUA,EAASM,IACpC,M,CAGF,MAAMA,EAAKE,EAAS,qBACpBR,EAASM,GAAKA,EACdT,KAAKU,YAAYP,EAAUM,E,CAG7B,WAAAC,CAAYP,EAAuBM,GACjCT,KAAKY,KAAO,IAAIH,IAChB,IAAKT,KAAKC,YAAa,CACrBE,EAASU,aAAa,WAAY,K,EAItC,MAAAC,GACE,MAAMF,KAAEA,GAASZ,KACjB,OACEe,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,KAAAE,IAAA,2CAAGL,KAAMA,EAAMM,MAAM,6BACnBH,EAAA,QAAAE,IAAA,8C"}