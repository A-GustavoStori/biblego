{"version":3,"names":["goChipCss","GoChipStyle0","GoChip","this","hasPrefix","hasSuffix","onChipClickHandler","chipClick","emit","onChipDismissedHandler","chipDismissed","componentWillLoad","hasSlot","el","render","clickable","dismissible","Tag","h","Host","key","class","type","onClick","undefined","name","xmlns","fill","stroke","viewBox","d"],"sources":["src/components/go-chip/go-chip.scss?tag=go-chip","src/components/go-chip/go-chip.tsx"],"sourcesContent":[":root {\n  /**\n    @prop --go-chip-gap:\n      Gap between label, prefix and suffix.\n      - default: 0.5em\n  */\n  --go-chip-gap: 0.5em;\n\n  /**\n    @prop --go-chip-padding-y:\n      Vertical padding of the chip\n      - default: 0.25em\n  */\n  --go-chip-padding-y: 0.25em;\n\n  /**\n    @prop --go-chip-padding-x:\n      Horizontal padding of the chip\n      - default: 0.75em\n  */\n  --go-chip-padding-x: 0.75em;\n\n  /**\n    @prop --go-chip-padding:\n      Padding of the chip\n      - default: var(--go-chip-padding-y) var(--go-chip-padding-x)\n  */\n  --go-chip-padding: var(--go-chip-padding-y) var(--go-chip-padding-x);\n\n  /**\n    @prop --go-chip-radius:\n      Radius of chip\n      - default: var(--radius-2)\n  */\n  --go-chip-radius: var(--radius-2);\n\n  /**\n    @prop --go-chip-color-bg:\n      Background color of chip\n      - default: var(--go-color-neutral-100)\n  */\n  --go-chip-color-bg: var(--go-color-neutral-100);\n\n  /**\n    @prop --go-chip-color-fg:\n      Foreground color of chip\n      - default: var(--go-color-text)\n  */\n  --go-chip-color-fg: var(--go-color-text);\n\n  /**\n    @prop --go-chip-color-bg-hover:\n      Background color on hover for `clickable` chips\n      - default: var(--go-color-neutral-200)\n  */\n  --go-chip-color-bg-hover: var(--go-color-neutral-200);\n\n  /**\n    @prop --go-chip-font-size:\n      Font size of chip\n      - default: var(--go-size--1)\n  */\n  --go-chip-font-size: var(--go-size--1);\n\n  /**\n    @prop --go-chip-border-width:\n      Border width of the chip\n      - default: 2px\n  */\n  --go-chip-border-width: 2px;\n\n  /**\n    @prop --go-chip-color-border:\n      Border color of the chip\n      - default: transparent\n  */\n  --go-chip-color-border: transparent;\n\n  /**\n    @prop --go-chip-dismiss-btn-gap:\n      Gap between chip content and the dismiss button (only applicable when `dismissable` is `true`)\n      - default: 0\n  */\n  --go-chip-dismiss-btn-gap: 0;\n\n  /**\n    @prop --go-chip-dismiss-btn-size:\n      Width and height of the dismiss button\n      - default: calc(1.5em + 2 * var(--go-chip-padding-y))\n  */\n  --go-chip-dismiss-btn-size: calc(1.5em + 2 * var(--go-chip-padding-y));\n}\n\ngo-chip {\n  display: inline-flex;\n  align-items: center;\n  border: var(--go-chip-border-width) solid var(--go-chip-color-border);\n  border-radius: var(--go-chip-radius);\n  background-color: var(--go-chip-color-bg);\n  color: var(--go-chip-color-fg);\n  font-size: var(--go-chip-font-size);\n\n  .chip-main {\n    padding: var(--go-chip-padding);\n    border-radius: calc(var(--go-chip-radius) - var(--go-chip-border-width));\n    line-height: 1.5;\n    display: flex;\n    gap: var(--go-chip-gap);\n    align-items: center;\n  }\n\n  // outline\n  &[outline] {\n    background-color: transparent;\n  }\n\n  // clickable\n  &.clickable {\n    .chip-main {\n      @include reset-btn;\n      @include clickable;\n\n      &:hover,\n      &:focus-visible {\n        background-color: var(--go-chip-color-bg-hover);\n      }\n    }\n    &.dismissible {\n      .chip-main {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n    }\n  }\n\n  // dismissible\n  &.dismissible {\n    gap: var(--go-chip-dismiss-btn-gap);\n    align-items: stretch;\n\n    .chip-main {\n      position: relative;\n      &::after {\n        content: '';\n        position: absolute;\n        top: var(--go-chip-padding-y);\n        right: 0;\n        bottom: var(--go-chip-padding-y);\n        width: 1px;\n        background: var(--go-chip-color-border);\n        filter: brightness(0.9);\n      }\n    }\n    .dismiss-btn {\n      @include reset-btn;\n      @include clickable;\n\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: calc(var(--go-chip-radius) - var(--go-chip-border-width));\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n      width: var(--go-chip-dismiss-btn-size);\n      height: var(--go-chip-dismiss-btn-size);\n      svg {\n        display: block;\n        width: auto;\n        height: 1.2em;\n      }\n      &:hover,\n      &:focus-visible {\n        background-color: var(--go-chip-color-bg-hover);\n      }\n    }\n  }\n}\n\n// Color variants\n@mixin chip-light-overrides {\n  go-chip {\n    // colors 'primary' | 'secondary' | 'success' | 'critical' | 'neutral'\n    &[variant='primary'] {\n      --go-chip-color-border: var(--go-color-primary-200);\n      --go-chip-color-bg: var(--go-color-primary-200);\n      --go-chip-color-bg-hover: var(--go-color-primary-300);\n    }\n    &[variant='secondary'] {\n      --go-chip-color-border: var(--go-color-secondary-200);\n      --go-chip-color-bg: var(--go-color-secondary-200);\n      --go-chip-color-bg-hover: var(--go-color-secondary-300);\n    }\n    &[variant='success'] {\n      --go-chip-color-border: var(--go-color-success-200);\n      --go-chip-color-bg: var(--go-color-success-200);\n      --go-chip-color-bg-hover: var(--go-color-success-300);\n    }\n    &[variant='critical'] {\n      --go-chip-color-border: var(--go-color-critical-200);\n      --go-chip-color-bg: var(--go-color-critical-200);\n      --go-chip-color-bg-hover: var(--go-color-critical-300);\n    }\n    &[variant='neutral'] {\n      --go-chip-color-border: var(--go-color-neutral-200);\n      --go-chip-color-bg: var(--go-color-neutral-200);\n      --go-chip-color-bg-hover: var(--go-color-neutral-300);\n    }\n  }\n}\n@mixin chip-dark-overrides {\n  go-chip {\n    // colors 'primary' | 'secondary' | 'success' | 'critical' | 'neutral'\n    &[variant='primary'] {\n      --go-chip-color-border: var(--go-color-primary-400);\n      --go-chip-color-bg: var(--go-color-primary-400);\n      --go-chip-color-bg-hover: var(--go-color-primary-500);\n    }\n    &[variant='secondary'] {\n      --go-chip-color-border: var(--go-color-secondary-300);\n      --go-chip-color-bg: var(--go-color-secondary-300);\n      --go-chip-color-bg-hover: var(--go-color-secondary-400);\n    }\n    &[variant='success'] {\n      --go-chip-color-border: var(--go-color-success-300);\n      --go-chip-color-bg: var(--go-color-success-300);\n      --go-chip-color-bg-hover: var(--go-color-success-400);\n    }\n    &[variant='critical'] {\n      --go-chip-color-border: var(--go-color-critical-300);\n      --go-chip-color-bg: var(--go-color-critical-300);\n      --go-chip-color-bg-hover: var(--go-color-critical-400);\n    }\n    &[variant='neutral'] {\n      --go-chip-color-border: var(--go-color-neutral-300);\n      --go-chip-color-bg: var(--go-color-neutral-300);\n      --go-chip-color-bg-hover: var(--go-color-neutral-400);\n    }\n  }\n}\n\n@include prefer-light {\n  @include chip-light-overrides;\n}\n@include prefer-dark {\n  @include chip-dark-overrides;\n}\n@include theme-light {\n  @include chip-light-overrides;\n}\n@include theme-dark {\n  @include chip-dark-overrides;\n}\n","import { Component, Host, h, Element, Prop, Event, EventEmitter } from '@stencil/core';\nimport { ChipVariants } from '../../interfaces/variants';\nimport { hasSlot } from '../../utils/helper';\n\n@Component({\n  tag: 'go-chip',\n  styleUrl: 'go-chip.scss',\n  shadow: false,\n})\nexport class GoChip {\n  @Element() el: HTMLElement;\n\n  /**\n   * Colour variant of the chip\n   */\n  @Prop({ reflect: true }) variant: ChipVariants = 'neutral';\n\n  /**\n   * If `outline` is true, the button will have a border based on selected variant\n   * @see `variant` property\n   */\n  @Prop({ reflect: true }) outline?: boolean = false;\n\n  /**\n   * Make chip clickable, `chipClick` event will be emitted on click\n   */\n  @Prop() clickable?: boolean = false;\n\n  /**\n   * Make chip dismissible, close button will be shown and `chipDismiss` event will be emitted when close button is clicked\n   */\n  @Prop() dismissible?: boolean = false;\n\n  /**\n   * Emitted on chip click, only if `clickable` is true\n   */\n  @Event() chipClick: EventEmitter;\n\n  /**\n   * Emitted on chip dismiss, only if `dismissible` is true\n   */\n  @Event() chipDismissed: EventEmitter;\n\n  onChipClickHandler() {\n    this.chipClick.emit();\n  }\n\n  onChipDismissedHandler() {\n    this.chipDismissed.emit();\n  }\n\n  private hasPrefix = false;\n\n  private hasSuffix = false;\n\n  componentWillLoad() {\n    this.hasPrefix = hasSlot(this.el, 'prefix');\n    this.hasSuffix = hasSlot(this.el, 'suffix');\n  }\n\n  render() {\n    const { hasPrefix, hasSuffix, clickable, dismissible } = this;\n    const Tag = clickable ? 'button' : 'div';\n    return (\n      <Host\n        class={{\n          dismissible,\n          clickable,\n        }}>\n        <Tag type={clickable ? 'button' : null} class=\"chip-main\" onClick={clickable ? () => this.onChipClickHandler() : undefined}>\n          {hasPrefix ? (\n            <span class=\"prefix\">\n              <slot name=\"prefix\"></slot>\n            </span>\n          ) : null}\n          <span class=\"label\">\n            <slot></slot>\n          </span>\n          {hasSuffix ? (\n            <span class=\"suffix\">\n              <slot name=\"suffix\"></slot>\n            </span>\n          ) : null}\n        </Tag>\n        {dismissible ? (\n          <button class=\"dismiss-btn\" onClick={() => this.onChipDismissedHandler()}>\n            <span class=\"visually-hidden\">Dismiss</span>\n            <svg\n              aria-hidden=\"true\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              viewBox=\"0 0 24 24\">\n              <path d=\"M18 6 6 18M6 6l12 12\" />\n            </svg>\n          </button>\n        ) : null}\n      </Host>\n    );\n  }\n}\n"],"mappings":"oJAAA,MAAMA,EAAY,s2OAClB,MAAAC,EAAeD,E,MCQFE,EAAM,M,2GA0CTC,KAAAC,UAAY,MAEZD,KAAAE,UAAY,M,aAtC6B,U,aAMJ,M,eAKf,M,iBAKE,K,CAYhC,kBAAAC,GACEH,KAAKI,UAAUC,M,CAGjB,sBAAAC,GACEN,KAAKO,cAAcF,M,CAOrB,iBAAAG,GACER,KAAKC,UAAYQ,EAAQT,KAAKU,GAAI,UAClCV,KAAKE,UAAYO,EAAQT,KAAKU,GAAI,S,CAGpC,MAAAC,GACE,MAAMV,UAAEA,EAASC,UAAEA,EAASU,UAAEA,EAASC,YAAEA,GAAgBb,KACzD,MAAMc,EAAMF,EAAY,SAAW,MACnC,OACEG,EAACC,EAAI,CAAAC,IAAA,2CACHC,MAAO,CACLL,cACAD,cAEFG,EAACD,EAAG,CAAAG,IAAA,2CAACE,KAAMP,EAAY,SAAW,KAAMM,MAAM,YAAYE,QAASR,EAAY,IAAMZ,KAAKG,qBAAuBkB,WAC9GpB,EACCc,EAAA,QAAMG,MAAM,UACVH,EAAA,QAAMO,KAAK,YAEX,KACJP,EAAA,QAAAE,IAAA,2CAAMC,MAAM,SACVH,EAAA,QAAAE,IAAA,8CAEDf,EACCa,EAAA,QAAMG,MAAM,UACVH,EAAA,QAAMO,KAAK,YAEX,MAELT,EACCE,EAAA,UAAQG,MAAM,cAAcE,QAAS,IAAMpB,KAAKM,0BAC9CS,EAAA,QAAMG,MAAM,mBAAiB,WAC7BH,EAAA,qBACc,OACZQ,MAAM,6BACNC,KAAK,OACLC,OAAO,eAAc,eACR,IAAG,iBACD,QAAO,kBACN,QAChBC,QAAQ,aACRX,EAAA,QAAMY,EAAE,2BAGV,K"}