{"version":3,"names":["GoNavItem","parseItemProp","this","parsedItem","parseJsonProp","item","_b","_a","children","length","submenuId","uniqueId","componentWillLoad","hasSubmenuSlot","hasSlot","el","handleSubmenuToggle","isOpen","console","log","renderSubMenu","parent","h","class","block","map","child","render","Tag","hasChildren","isCurrent","attrs","Object","assign","url","onClick","event","navEvent","emit","linkAttrs","Host","key","role","current","controls","renderIcon","icon","label","id","columns","slot","showArrow"],"sources":["src/components/navigation/go-nav-bar/go-nav-item.tsx"],"sourcesContent":["import { INavItem } from '@/interfaces';\nimport { hasSlot, parseJsonProp } from '@/utils';\nimport { Component, Host, Prop, State, h, Event, EventEmitter, Element, Watch } from '@stencil/core';\nimport { renderIcon } from '../nav-helpers';\nimport { uniqueId } from 'lodash-es';\n\n@Component({\n  tag: 'go-nav-item',\n})\nexport class GoNavItem {\n  @Element() el: HTMLElement;\n\n  @Prop() item: INavItem | string;\n\n  submenuId?: string;\n  @Watch('item')\n  parseItemProp() {\n    this.parsedItem = parseJsonProp(this.item);\n    if (this.parsedItem?.children?.length) {\n      this.submenuId = uniqueId('go-nav-item-submenu-');\n    }\n  }\n\n  @State() parsedItem: INavItem;\n\n  @State() hasSubmenuSlot = false;\n\n  componentWillLoad() {\n    this.parseItemProp();\n\n    this.hasSubmenuSlot = hasSlot(this.el, 'submenu');\n  }\n\n  /**\n   * open state of the submenu, only applicable if\n   * - the `item` property has `children` key, or\n   * - go-nav-item has `submenu` slot\n   */\n  @State() isOpen: boolean = false;\n\n  @Event({\n    eventName: 'navigate',\n    cancelable: true,\n    bubbles: true,\n  })\n  navEvent: EventEmitter;\n\n  @Event({\n    eventName: 'submenutoggle',\n    cancelable: true,\n    bubbles: true,\n  })\n  subMenuToggleEvent: EventEmitter;\n\n  handleSubmenuToggle(isOpen: boolean) {\n    console.log('event triggered', isOpen);\n    this.isOpen = !!isOpen;\n  }\n\n  renderSubMenu(parent: INavItem) {\n    if (!parent) {\n      return;\n    }\n    // if submenu item has children, render the current item and its children\n    if (parent.children?.length > 0) {\n      return (\n        <div class=\"submenu-list-container\">\n          <div class=\"submenu-header\">\n            <go-nav-link block item={parent}></go-nav-link>\n          </div>\n          <ul class=\"submenu-list\">\n            {parent.children.map((child) => (\n              <li>\n                <go-nav-link block item={child}></go-nav-link>\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n    return (\n      <div class=\"nav-item\">\n        <go-nav-link block item={parent}></go-nav-link>\n      </div>\n    );\n  }\n\n  render() {\n    const { parsedItem: item, submenuId } = this;\n    let Tag = 'a';\n\n    const hasChildren = item?.children?.length > 0 || this.hasSubmenuSlot;\n    if (item?.isCurrent) {\n      Tag = 'span';\n    }\n    let attrs = null;\n\n    if (Tag === 'a') {\n      attrs = {\n        url: item?.url,\n        onClick: (event) => {\n          this.navEvent.emit({ event, item });\n        },\n        ...item?.linkAttrs,\n      };\n    }\n    return (\n      <Host role=\"listitem\" class={{ 'nav-item': true, 'current': item?.isCurrent }}>\n        <slot>\n          {hasChildren ? (\n            [\n              <go-nav-submenu-trigger controls={submenuId}>\n                <span class=\"nav-item-label\">\n                  {renderIcon(item?.icon)}\n                  <span>{item?.label}</span>\n                </span>\n              </go-nav-submenu-trigger>,\n              <go-nav-submenu id={submenuId} columns={item?.columns}>\n                <go-nav-link slot=\"submenu-header\" block item={item} showArrow></go-nav-link>\n                {item.children.map((child) => this.renderSubMenu(child))}\n              </go-nav-submenu>,\n            ]\n          ) : (\n            <Tag class=\"nav-item-inner\" {...attrs}>\n              <span class=\"nav-item-label\">\n                {renderIcon(item?.icon)}\n                <span>{item?.label}</span>\n              </span>\n            </Tag>\n          )}\n        </slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"4MASaA,EAAS,M,gLAgBM,M,YAaC,K,CAtB3B,aAAAC,G,QACEC,KAAKC,WAAaC,EAAcF,KAAKG,MACrC,IAAIC,GAAAC,EAAAL,KAAKC,cAAU,MAAAI,SAAA,SAAAA,EAAEC,YAAQ,MAAAF,SAAA,SAAAA,EAAEG,OAAQ,CACrCP,KAAKQ,UAAYC,EAAS,uB,EAQ9B,iBAAAC,GACEV,KAAKD,gBAELC,KAAKW,eAAiBC,EAAQZ,KAAKa,GAAI,U,CAwBzC,mBAAAC,CAAoBC,GAClBC,QAAQC,IAAI,kBAAmBF,GAC/Bf,KAAKe,SAAWA,C,CAGlB,aAAAG,CAAcC,G,MACZ,IAAKA,EAAQ,CACX,M,CAGF,KAAId,EAAAc,EAAOb,YAAQ,MAAAD,SAAA,SAAAA,EAAEE,QAAS,EAAG,CAC/B,OACEa,EAAA,OAAKC,MAAM,0BACTD,EAAA,OAAKC,MAAM,kBACTD,EAAA,eAAaE,MAAK,KAACnB,KAAMgB,KAE3BC,EAAA,MAAIC,MAAM,gBACPF,EAAOb,SAASiB,KAAKC,GACpBJ,EAAA,UACEA,EAAA,eAAaE,MAAK,KAACnB,KAAMqB,Q,CAOrC,OACEJ,EAAA,OAAKC,MAAM,YACTD,EAAA,eAAaE,MAAK,KAACnB,KAAMgB,I,CAK/B,MAAAM,G,MACE,MAAQxB,WAAYE,EAAIK,UAAEA,GAAcR,KACxC,IAAI0B,EAAM,IAEV,MAAMC,IAActB,EAAAF,IAAI,MAAJA,SAAI,SAAJA,EAAMG,YAAQ,MAAAD,SAAA,SAAAA,EAAEE,QAAS,GAAKP,KAAKW,eACvD,GAAIR,IAAI,MAAJA,SAAI,SAAJA,EAAMyB,UAAW,CACnBF,EAAM,M,CAER,IAAIG,EAAQ,KAEZ,GAAIH,IAAQ,IAAK,CACfG,EAAKC,OAAAC,OAAA,CACHC,IAAK7B,IAAI,MAAJA,SAAI,SAAJA,EAAM6B,IACXC,QAAUC,IACRlC,KAAKmC,SAASC,KAAK,CAAEF,QAAO/B,QAAO,GAElCA,IAAI,MAAJA,SAAI,SAAJA,EAAMkC,U,CAGb,OACEjB,EAACkB,EAAI,CAAAC,IAAA,2CAACC,KAAK,WAAWnB,MAAO,CAAE,WAAY,KAAMoB,QAAWtC,IAAI,MAAJA,SAAI,SAAJA,EAAMyB,YAChER,EAAA,QAAAmB,IAAA,4CACGZ,EAAW,CAERP,EAAA,0BAAwBsB,SAAUlC,GAChCY,EAAA,QAAMC,MAAM,kBACTsB,EAAWxC,IAAI,MAAJA,SAAI,SAAJA,EAAMyC,MAClBxB,EAAA,YAAOjB,IAAI,MAAJA,SAAI,SAAJA,EAAM0C,SAGjBzB,EAAA,kBAAgB0B,GAAItC,EAAWuC,QAAS5C,IAAI,MAAJA,SAAI,SAAJA,EAAM4C,SAC5C3B,EAAA,eAAa4B,KAAK,iBAAiB1B,MAAK,KAACnB,KAAMA,EAAM8C,UAAS,OAC7D9C,EAAKG,SAASiB,KAAKC,GAAUxB,KAAKkB,cAAcM,OAIrDJ,EAACM,EAAGI,OAAAC,OAAA,CAACV,MAAM,kBAAqBQ,GAC9BT,EAAA,QAAMC,MAAM,kBACTsB,EAAWxC,IAAI,MAAJA,SAAI,SAAJA,EAAMyC,MAClBxB,EAAA,YAAOjB,IAAI,MAAJA,SAAI,SAAJA,EAAM0C,U"}