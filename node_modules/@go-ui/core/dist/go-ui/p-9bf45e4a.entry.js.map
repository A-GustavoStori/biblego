{"version":3,"names":["goFieldsetCss","GoFieldsetStyle0","GoFieldset","updateErrorState","this","hasError","error","componentWillLoad","hasHintSlot","hasSlot","el","initIdProps","wrapChildrenInUl","div","ul","document","createElement","classList","add","children","i","length","li","appendChild","parentNode","replaceChild","componentDidLoad","isList","querySelector","render","label","hint","labelId","errorId","hintId","h","Host","key","class","id","name"],"sources":["src/components/form/go-fieldset/go-fieldset.scss?tag=go-fieldset","src/components/form/go-fieldset/go-fieldset.tsx"],"sourcesContent":["@import '../../../global//scss/form/mixins';\n\ngo-fieldset {\n  display: block;\n  fieldset {\n    padding: 0;\n    border: none;\n    legend {\n      @include label-wrapper;\n    }\n    .fieldset-content {\n      display: grid;\n      gap: var(--input-gap-inner);\n      @include unstyled-list;\n    }\n  }\n\n  .go-field {\n    margin-top: 0;\n  }\n}\n","import { Component, Host, h, Element, Prop, State, Watch } from '@stencil/core';\nimport { hasSlot, initIdProps } from '../../../utils';\n\n@Component({\n  tag: 'go-fieldset',\n  styleUrl: 'go-fieldset.scss',\n  shadow: false,\n})\nexport class GoFieldset {\n  /**\n   * Label of the input field\n   */\n  @Prop() label: string;\n  /**\n   * Hint message for the input\n   */\n  @Prop() hint?: string;\n  /**\n   * Error state of input, text provided will be shown as error message\n   */\n  @Prop() error?: boolean | string;\n\n  id: string;\n\n  /**\n   * DOM id for label\n   */\n  @Prop({ mutable: true })\n  labelId?: string;\n\n  /**\n   * DOM id for hint message\n   */\n  @Prop({ mutable: true })\n  hintId?: string;\n\n  /**\n   * DOM id for error\n   */\n  @Prop({ mutable: true })\n  errorId?: string;\n\n  /**\n   * Wrap direct DOM children in an unordered list so they are announced by screen readers, good for checkboxes and radio buttons\n   */\n  @Prop()\n  isList?: boolean = false;\n\n  @Element() el: HTMLElement;\n\n  /**\n   * Allow empty value for `error` attribute and show error state\n   */\n  @State() hasError = false;\n\n  @Watch('error')\n  updateErrorState() {\n    this.hasError = typeof this.error !== 'undefined';\n  }\n\n  hasHintSlot: boolean;\n  componentWillLoad() {\n    this.hasHintSlot = hasSlot(this.el, 'hint');\n    initIdProps(this, this.el, ['label', 'hint', 'error'], 'go-fieldset-');\n    this.updateErrorState();\n  }\n\n  wrapChildrenInUl(div) {\n    // Create a new ul element\n    const ul = document.createElement('ul');\n    ul.classList.add('fieldset-content');\n    // Get the div's direct children\n    // we need to modify html structure, this will change the div.children reference.\n    // so make a new array to iterate against.\n\n    const children = [...div.children];\n    // Iterate over the children\n    for (let i = 0; i < children.length; i++) {\n      // Create a new li element\n      const li = document.createElement('li');\n      // Append the current child to the li element\n      li.appendChild(children[i]);\n      // Append the li element to the ul element\n      ul.appendChild(li);\n    }\n\n    // Replace the div with the ul element\n    div.parentNode.replaceChild(ul, div);\n  }\n\n  componentDidLoad() {\n    if (this.isList) {\n      this.wrapChildrenInUl(this.el.querySelector('.fieldset-content'));\n    }\n  }\n\n  render() {\n    const { label, error, hint, hasError, hasHintSlot, labelId, errorId, hintId } = this;\n    return (\n      <Host>\n        <fieldset\n          class={{\n            'go-field': true,\n            'error': hasError,\n          }}\n          aria-invalid={hasError}>\n          <legend>\n            {/* screen reader announcements */}\n            <span class=\"label\" id={labelId}>\n              {label}\n            </span>\n            {hasHintSlot || hint ? (\n              <span class=\"hint\" id={hintId}>\n                <slot name=\"hint\">{hint}</slot>\n              </span>\n            ) : null}\n            <span class=\"visually-hidden\">{hasError ? <span id={errorId}>Invalid: {error}</span> : null}</span>\n          </legend>\n          <div class=\"fieldset-content\">\n            <slot></slot>\n          </div>\n          {hasError ? (\n            <div class=\"error-msg\" id={errorId}>\n              {error}\n            </div>\n          ) : null}\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"],"mappings":"oJAAA,MAAMA,EAAgB,yXACtB,MAAAC,EAAeD,E,MCOFE,EAAU,M,uKAsCF,M,cAOC,K,CAGpB,gBAAAC,GACEC,KAAKC,gBAAkBD,KAAKE,QAAU,W,CAIxC,iBAAAC,GACEH,KAAKI,YAAcC,EAAQL,KAAKM,GAAI,QACpCC,EAAYP,KAAMA,KAAKM,GAAI,CAAC,QAAS,OAAQ,SAAU,gBACvDN,KAAKD,kB,CAGP,gBAAAS,CAAiBC,GAEf,MAAMC,EAAKC,SAASC,cAAc,MAClCF,EAAGG,UAAUC,IAAI,oBAKjB,MAAMC,EAAW,IAAIN,EAAIM,UAEzB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAAK,CAExC,MAAME,EAAKP,SAASC,cAAc,MAElCM,EAAGC,YAAYJ,EAASC,IAExBN,EAAGS,YAAYD,E,CAIjBT,EAAIW,WAAWC,aAAaX,EAAID,E,CAGlC,gBAAAa,GACE,GAAItB,KAAKuB,OAAQ,CACfvB,KAAKQ,iBAAiBR,KAAKM,GAAGkB,cAAc,qB,EAIhD,MAAAC,GACE,MAAMC,MAAEA,EAAKxB,MAAEA,EAAKyB,KAAEA,EAAI1B,SAAEA,EAAQG,YAAEA,EAAWwB,QAAEA,EAAOC,QAAEA,EAAOC,OAAEA,GAAW9B,KAChF,OACE+B,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,YAAAE,IAAA,2CACEC,MAAO,CACL,WAAY,KACZhC,MAASD,GACV,eACaA,GACd8B,EAAA,UAAAE,IAAA,4CAEEF,EAAA,QAAAE,IAAA,2CAAMC,MAAM,QAAQC,GAAIP,GACrBF,GAEFtB,GAAeuB,EACdI,EAAA,QAAMG,MAAM,OAAOC,GAAIL,GACrBC,EAAA,QAAMK,KAAK,QAAQT,IAEnB,KACJI,EAAA,QAAAE,IAAA,2CAAMC,MAAM,mBAAmBjC,EAAW8B,EAAA,QAAMI,GAAIN,GAAO,YAAY3B,GAAgB,OAEzF6B,EAAA,OAAAE,IAAA,2CAAKC,MAAM,oBACTH,EAAA,QAAAE,IAAA,8CAEDhC,EACC8B,EAAA,OAAKG,MAAM,YAAYC,GAAIN,GACxB3B,GAED,M"}