{"version":3,"names":["goRadioCss","GoRadioStyle0","GoRadio","updateErrorState","this","hasError","error","componentWillLoad","hasHintSlot","hasSlot","el","initIdProps","render","label","value","controlId","hint","hintId","checked","name","disabled","errorId","describedByIds","push","props","id","h","Host","key","class","Object","assign","type","String","join","htmlFor"],"sources":["src/components/form/go-radio/go-radio.scss?tag=go-radio","src/components/form/go-radio/go-radio.tsx"],"sourcesContent":["@import '../../../global/scss/form/mixins';\n\ngo-radio {\n  /**\n    @prop --radio-border-color:\n      Default border color\n      - default: var(--input-border-color)\n  */\n  --radio-border-color: var(--input-border-color);\n\n  /**\n    @prop --radio-border-width:\n      Default border width\n      - default: 2px\n  */\n  --radio-border-width: 2px;\n\n  /**\n    @prop --radio-border:\n      radio default border\n      - default: var(--radio-border-width) solid var(--radio-border-color)\n  */\n  --radio-border: var(--radio-border-width) solid var(--radio-border-color);\n\n  /**\n    @prop --radio-border-color-hover:\n      radio hover state color\n      - default: var(--go-color-neutral-700)\n  */\n  --radio-border-color-hover: var(--go-color-neutral-700);\n\n  /**\n    @prop --radio-size:\n      Size of radio\n      - default: 1.5em\n  */\n  --radio-size: 1.5em;\n\n  /**\n    @prop --radio-dot-size:\n      inside circle size\n      - default: 0.7em\n  */\n  --radio-dot-size: 0.7em;\n\n  /**\n    @prop --radio-checked-bg:\n      radio button background color when checked\n      - default: var(--control-selected-bg-color)\n  */\n  --radio-checked-bg: var(--control-selected-bg-color);\n  /**\n    @prop --radio-checked-fg:\n      radio button foreground color when checked\n      - default: var(--control-selected-fg-color)\n  */\n  --radio-checked-fg: var(--control-selected-fg-color);\n\n  /**\n    @prop --radio-mark-shadow-inner:\n      drop shadow for selected mark\n      - default: var(--shadow-2)\n  */\n  --radio-mark-shadow-inner: var(--shadow-2);\n\n  .control-wrapper {\n    display: flex;\n    align-items: flex-start;\n    gap: var(--input-gap-inner);\n  }\n  input,\n  label {\n    cursor: pointer;\n  }\n  &[error] {\n    @include error-state;\n    --radio-border-color: var(--input-error-color);\n    input {\n      &:checked {\n        ~ .mark {\n          --radio-checked-bg: var(--input-error-color);\n        }\n      }\n    }\n    .error-msg {\n      margin: var(--input-gap-inner) 0;\n    }\n  }\n  &[disabled] {\n    input,\n    label {\n      cursor: not-allowed;\n    }\n    .box {\n      .mark {\n        background: var(--input-bg-disabled-color);\n        border-color: var(--input-text-disabled-color);\n      }\n      input:checked ~ .mark {\n        .dot {\n          background: var(--input-text-disabled-color);\n        }\n      }\n    }\n  }\n  label {\n    @include typography(body);\n    line-height: var(--radio-size);\n    & ~ .hint {\n      margin-top: 4px;\n    }\n  }\n  .box {\n    flex-shrink: 0;\n    flex-grow: 0;\n    position: relative;\n  }\n\n  .mark {\n    display: block;\n    width: var(--radio-size);\n    height: var(--radio-size);\n    border: var(--radio-border);\n    border-radius: 50%;\n    @include transition(background-color);\n\n    .dot {\n      border-radius: 50%;\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      width: var(--radio-dot-size);\n      height: var(--radio-dot-size);\n      @include transition(background-color);\n    }\n  }\n  input {\n    &:checked {\n      ~ .mark {\n        background: var(--radio-checked-bg);\n        border-color: var(--radio-checked-bg);\n        .dot {\n          background: var(--radio-checked-fg);\n          box-shadow: var(--radio-mark-shadow-inner);\n        }\n      }\n    }\n\n    &:not(:disabled) {\n      &:hover {\n        ~ .mark {\n          border-color: var(--radio-border-color-hover);\n        }\n      }\n      &:focus-visible {\n        ~ .mark {\n          @include focus-outline;\n        }\n      }\n      &:active {\n        ~ .mark {\n          box-shadow: var(--input-focus-shadow);\n          outline-offset: 0;\n        }\n      }\n    }\n  }\n  .hint {\n    @include hint;\n  }\n}\n","import { Component, Host, h, Element, Prop, State, Watch } from '@stencil/core';\nimport { hasSlot, initIdProps } from '../../../utils';\n\n@Component({\n  tag: 'go-radio',\n  styleUrl: 'go-radio.scss',\n  shadow: false,\n})\nexport class GoRadio {\n  @Element() el: HTMLElement;\n\n  @Prop({ mutable: true }) checked?: boolean;\n  @Prop() indeterminate?: boolean;\n  @Prop() name: string;\n  @Prop() disabled?: boolean;\n  @Prop() value: any; // initial value\n  @Prop() label: string;\n  @Prop() hint?: string;\n  @Prop({ reflect: true }) error?: string;\n\n  /**\n   * DOM id for native input control, default auto generated unique id\n   */\n  @Prop() controlId?: string;\n\n  /**\n   * DOM id for hint message\n   */\n  @Prop({ mutable: true })\n  hintId?: string;\n\n  /**\n   * DOM id for error\n   */\n  @Prop({ mutable: true })\n  errorId?: string;\n\n  /**\n   * Allow empty value for `error` attribute and show error state\n   */\n  @State() hasError = false;\n\n  @Watch('error')\n  updateErrorState() {\n    this.hasError = typeof this.error !== 'undefined';\n  }\n\n  hasHintSlot: boolean;\n  componentWillLoad() {\n    this.hasHintSlot = hasSlot(this.el, 'hint');\n    initIdProps(this, this.el, ['hint', 'error', 'control'], 'go-radio-');\n\n    this.updateErrorState();\n  }\n\n  render() {\n    const { label, value, error, controlId, hint, hintId, hasHintSlot, checked, name, disabled, hasError, errorId } =\n      this;\n\n    const describedByIds = [];\n    if (hasHintSlot || hint) {\n      describedByIds.push(hintId);\n    }\n    if (hasError) {\n      describedByIds.push(errorId);\n    }\n    const props = {\n      id: controlId,\n      checked,\n      name,\n      disabled,\n      value,\n    };\n\n    return (\n      <Host\n        class={{\n          error: hasError,\n          disabled: !!disabled,\n        }}>\n        <div class=\"control-wrapper\">\n          <div class=\"box\">\n            <input\n              {...props}\n              type=\"radio\"\n              class=\"hidden-control\"\n              aria-invalid={String(hasError)}\n              aria-describedby={describedByIds.join(' ')}\n            />\n            <span class=\"mark\">\n              <span class=\"dot\"></span>\n            </span>\n          </div>\n          <div class=\"text\">\n            <label htmlFor={controlId}>{label}</label>\n            {hasHintSlot || hint ? (\n              <div class=\"hint\" id={hintId}>\n                <slot name=\"hint\">{hint}</slot>\n              </div>\n            ) : null}\n          </div>\n        </div>\n        {hasError ? (\n          <div class=\"error-msg\" id={errorId}>\n            {error}\n          </div>\n        ) : null}\n      </Host>\n    );\n  }\n}\n"],"mappings":"0IAAA,MAAMA,EAAa,mrFACnB,MAAAC,EAAeD,E,MCOFE,EAAO,M,gSAgCE,K,CAGpB,gBAAAC,GACEC,KAAKC,gBAAkBD,KAAKE,QAAU,W,CAIxC,iBAAAC,GACEH,KAAKI,YAAcC,EAAQL,KAAKM,GAAI,QACpCC,EAAYP,KAAMA,KAAKM,GAAI,CAAC,OAAQ,QAAS,WAAY,aAEzDN,KAAKD,kB,CAGP,MAAAS,GACE,MAAMC,MAAEA,EAAKC,MAAEA,EAAKR,MAAEA,EAAKS,UAAEA,EAASC,KAAEA,EAAIC,OAAEA,EAAMT,YAAEA,EAAWU,QAAEA,EAAOC,KAAEA,EAAIC,SAAEA,EAAQf,SAAEA,EAAQgB,QAAEA,GACpGjB,KAEF,MAAMkB,EAAiB,GACvB,GAAId,GAAeQ,EAAM,CACvBM,EAAeC,KAAKN,E,CAEtB,GAAIZ,EAAU,CACZiB,EAAeC,KAAKF,E,CAEtB,MAAMG,EAAQ,CACZC,GAAIV,EACJG,UACAC,OACAC,WACAN,SAGF,OACEY,EAACC,EAAI,CAAAC,IAAA,2CACHC,MAAO,CACLvB,MAAOD,EACPe,WAAYA,IAEdM,EAAA,OAAAE,IAAA,2CAAKC,MAAM,mBACTH,EAAA,OAAAE,IAAA,2CAAKC,MAAM,OACTH,EAAA,QAAAI,OAAAC,OAAA,CAAAH,IAAA,4CACMJ,EAAK,CACTQ,KAAK,QACLH,MAAM,iBAAgB,eACRI,OAAO5B,GAAS,mBACZiB,EAAeY,KAAK,QAExCR,EAAA,QAAAE,IAAA,2CAAMC,MAAM,QACVH,EAAA,QAAAE,IAAA,2CAAMC,MAAM,UAGhBH,EAAA,OAAAE,IAAA,2CAAKC,MAAM,QACTH,EAAA,SAAAE,IAAA,2CAAOO,QAASpB,GAAYF,GAC3BL,GAAeQ,EACdU,EAAA,OAAKG,MAAM,OAAOJ,GAAIR,GACpBS,EAAA,QAAMP,KAAK,QAAQH,IAEnB,OAGPX,EACCqB,EAAA,OAAKG,MAAM,YAAYJ,GAAIJ,GACxBf,GAED,K"}