{"version":3,"names":["GoInput","this","prefixer","hasNamedSlot","controlId","uniqueId","componentWillLoad","attrs","inheritNonFieldAttrs","loadFieldSlots","el","render","value","fieldProps","loadFieldProps","h","Object","assign","key","fieldSlotNames","map","slotName","slot","name","class","ref","controlEl","id","onInput","e","target"],"sources":["src/components/form/go-input/go-input.tsx"],"sourcesContent":["import { Component, h, Element, Prop, State } from '@stencil/core';\nimport { InputProps } from '../../../interfaces';\nimport { uniqueId } from 'lodash-es';\nimport { loadFieldProps, fieldSlotNames, inheritNonFieldAttrs, loadFieldSlots } from '../../../utils';\n@Component({\n  tag: 'go-input',\n  shadow: false,\n})\nexport class GoInput implements InputProps {\n  @Element() el: HTMLElement;\n\n  /**\n   * DOM id for label\n   */\n  @Prop() labelId?: string;\n\n  /**\n   * DOM id for prefix\n   */\n  @Prop() prefixId?: string;\n\n  /**\n   * DOM id for suffix\n   */\n  @Prop() suffixId?: string;\n  /**\n   * DOM id for hint message\n   */\n  @Prop() hintId?: string;\n\n  /**\n   * DOM id for error\n   */\n  @Prop() errorId?: string;\n\n  /**\n   * Name of the input field\n   */\n  @Prop() name: string;\n\n  /**\n   * Label of the input field\n   */\n  @Prop() label: string;\n\n  /**\n   * If the input is disabled\n   */\n  @Prop() disabled?: boolean;\n  /**\n   * Hint message for the input\n   */\n  @Prop() hint?: string;\n  /**\n   * Error state of input, text provided will be shown as error message\n   */\n  @Prop() error?: boolean | string;\n  /**\n   * If this input is read-only\n   */\n  @Prop() readonly?: boolean;\n\n  /**\n   * Value of the input field\n   */\n  @Prop({ mutable: true }) value?: string;\n\n  /**\n   * keep track of non-field attrs\n   */\n  @State() attrs: any;\n\n  prefixer = 'go-input-';\n  hasNamedSlot: { [key: string]: boolean } = {};\n  controlId = uniqueId(this.prefixer);\n  controlEl: HTMLElement;\n  componentWillLoad() {\n    this.attrs = inheritNonFieldAttrs(this);\n    this.hasNamedSlot = loadFieldSlots(this.el);\n  }\n\n  render() {\n    const { controlId, value, attrs } = this;\n    const fieldProps = loadFieldProps(this);\n    return (\n      <go-field {...fieldProps}>\n        {fieldSlotNames.map((slotName) => {\n          if (this.hasNamedSlot[slotName]) {\n            return (\n              <template slot={slotName}>\n                <slot name={slotName}></slot>\n              </template>\n            );\n          }\n        })}\n        <input\n          {...fieldProps}\n          {...attrs}\n          class=\"control\"\n          ref={(el) => (this.controlEl = el)}\n          id={controlId}\n          value={value}\n          onInput={(e) => (this.value = (e.target as HTMLInputElement).value)}\n        />\n      </go-field>\n    );\n  }\n}\n"],"mappings":"wNAQaA,EAAO,M,yBAgElBC,KAAAC,SAAW,YACXD,KAAAE,aAA2C,GAC3CF,KAAAG,UAAYC,EAASJ,KAAKC,U,gSAE1B,iBAAAI,GACEL,KAAKM,MAAQC,EAAqBP,MAClCA,KAAKE,aAAeM,EAAeR,KAAKS,G,CAG1C,MAAAC,GACE,MAAMP,UAAEA,EAASQ,MAAEA,EAAKL,MAAEA,GAAUN,KACpC,MAAMY,EAAaC,EAAeb,MAClC,OACEc,EAAA,WAAAC,OAAAC,OAAA,CAAAC,IAAA,4CAAcL,GACXM,EAAeC,KAAKC,IACnB,GAAIpB,KAAKE,aAAakB,GAAW,CAC/B,OACEN,EAAA,YAAUO,KAAMD,GACdN,EAAA,QAAMQ,KAAMF,I,KAKpBN,EAAA,QAAAC,OAAAC,OAAA,CAAAC,IAAA,4CACML,EACAN,EAAK,CACTiB,MAAM,UACNC,IAAMf,GAAQT,KAAKyB,UAAYhB,EAC/BiB,GAAIvB,EACJQ,MAAOA,EACPgB,QAAUC,GAAO5B,KAAKW,MAASiB,EAAEC,OAA4BlB,S"}