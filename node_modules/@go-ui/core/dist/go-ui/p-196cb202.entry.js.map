{"version":3,"names":["goTextareaCss","GoTextareaStyle0","GoTextarea","this","hasNamedSlot","prefixer","controlId","uniqueId","componentWillLoad","attrs","inheritNonFieldAttrs","loadFieldSlots","el","updateControlHeight","autoGrow","controlEl","style","height","scrollHeight","render","value","id","fieldProps","loadFieldProps","h","Object","assign","key","fieldSlotNames","map","slotName","slot","name","ref","class","rows","onInput","e","target","maxlength","_a","length","role","Number"],"sources":["src/components/form/go-textarea/go-textarea.scss?tag=go-textarea","src/components/form/go-textarea/go-textarea.tsx"],"sourcesContent":["@import '../../../global/scss/form/variables';\n@import '../../../global/scss/form/mixins';\ngo-textarea {\n  display: block;\n\n  textarea {\n    overflow: auto;\n    resize: vertical;\n    &:disabled,\n    &:read-only {\n      resize: none;\n    }\n  }\n  .textarea-count {\n    @include hint;\n    margin-top: var(--input-gap-inner);\n    margin-bottom: 0;\n  }\n}\n","import { Component, h, Element, Prop, Watch, State } from '@stencil/core';\nimport { TextareaProps } from '../../../interfaces';\nimport { uniqueId } from 'lodash-es';\nimport { fieldSlotNames, inheritNonFieldAttrs, loadFieldProps, loadFieldSlots } from '../../../utils';\n@Component({\n  tag: 'go-textarea',\n  styleUrl: 'go-textarea.scss',\n  shadow: false,\n})\nexport class GoTextarea implements TextareaProps {\n  @Element() el: HTMLElement;\n  /**\n   * DOM id for label\n   */\n  @Prop() labelId?: string;\n\n  /**\n   * DOM id for prefix\n   */\n  @Prop() prefixId?: string;\n\n  /**\n   * DOM id for suffix\n   */\n  @Prop() suffixId?: string;\n  /**\n   * DOM id for hint message\n   */\n  @Prop() hintId?: string;\n\n  /**\n   * DOM id for error\n   */\n  @Prop() errorId?: string;\n\n  /**\n   * Name of the input field\n   */\n  @Prop() name: string;\n\n  /**\n   * Label of the input field\n   */\n  @Prop() label: string;\n\n  /**\n   * If the input is disabled\n   */\n  @Prop() disabled?: boolean;\n  /**\n   * Hint message for the input\n   */\n  @Prop() hint?: string;\n  /**\n   * Error state of input, text provided will be shown as error message\n   */\n  @Prop() error?: boolean | string;\n  /**\n   * If this input is read-only\n   */\n  @Prop() readonly?: boolean;\n\n  /**\n   * Value of the input field\n   */\n  @Prop({ mutable: true }) value?: string;\n\n  /**\n   * If set, grow textarea based on its content\n   */\n  @Prop() autoGrow?: boolean = false;\n\n  hasNamedSlot: { [key: string]: boolean } = {};\n  prefixer = 'go-textarea-';\n  controlId = uniqueId(this.prefixer);\n  controlEl: HTMLTextAreaElement;\n  /**\n   * keep track of non-field attrs\n   */\n  @State() attrs: any;\n\n  componentWillLoad() {\n    this.attrs = inheritNonFieldAttrs(this, ['auto-grow']);\n    this.hasNamedSlot = loadFieldSlots(this.el);\n  }\n\n  @Watch('value')\n  updateControlHeight() {\n    if (this.autoGrow && this.controlEl) {\n      this.controlEl.style.height = 'auto';\n      this.controlEl.style.height = this.controlEl.scrollHeight + 'px';\n    }\n  }\n\n  render() {\n    const { value, controlId: id, attrs } = this;\n    const fieldProps = loadFieldProps(this);\n    return (\n      <go-field {...fieldProps}>\n        {fieldSlotNames.map((slotName) => {\n          if (this.hasNamedSlot[slotName]) {\n            return (\n              <template slot={slotName}>\n                <slot name={slotName}></slot>\n              </template>\n            );\n          }\n        })}\n\n        <textarea\n          {...fieldProps}\n          {...attrs}\n          ref={(el) => (this.controlEl = el)}\n          id={id}\n          class=\"control\"\n          rows={5}\n          onInput={(e) => (this.value = (e.target as HTMLTextAreaElement).value)}>\n          {value}\n        </textarea>\n        {attrs.maxlength && attrs.maxlength > 0 ? (\n          <span class=\"textarea-count\">\n            {value?.length ?? 0}/{attrs.maxlength}\n            <span class=\"visually-hidden\" aria-live=\"assertive\" role=\"alert\">\n              {value?.length === Number(attrs.maxlength)\n                ? `Limit reached, you can only enter ${attrs.maxlength} characters in this field.`\n                : ''}\n            </span>\n          </span>\n        ) : null}\n      </go-field>\n    );\n  }\n}\n"],"mappings":"uNAAA,MAAMA,EAAgB,6lDACtB,MAAAC,EAAeD,E,MCQFE,EAAU,M,yBA+DrBC,KAAAC,aAA2C,GAC3CD,KAAAE,SAAW,eACXF,KAAAG,UAAYC,EAASJ,KAAKE,U,yRAJG,M,qBAW7B,iBAAAG,GACEL,KAAKM,MAAQC,EAAqBP,KAAM,CAAC,cACzCA,KAAKC,aAAeO,EAAeR,KAAKS,G,CAI1C,mBAAAC,GACE,GAAIV,KAAKW,UAAYX,KAAKY,UAAW,CACnCZ,KAAKY,UAAUC,MAAMC,OAAS,OAC9Bd,KAAKY,UAAUC,MAAMC,OAASd,KAAKY,UAAUG,aAAe,I,EAIhE,MAAAC,G,MACE,MAAMC,MAAEA,EAAOd,UAAWe,EAAEZ,MAAEA,GAAUN,KACxC,MAAMmB,EAAaC,EAAepB,MAClC,OACEqB,EAAA,WAAAC,OAAAC,OAAA,CAAAC,IAAA,4CAAcL,GACXM,EAAeC,KAAKC,IACnB,GAAI3B,KAAKC,aAAa0B,GAAW,CAC/B,OACEN,EAAA,YAAUO,KAAMD,GACdN,EAAA,QAAMQ,KAAMF,I,KAMpBN,EAAA,WAAAC,OAAAC,OAAA,CAAAC,IAAA,4CACML,EACAb,EAAK,CACTwB,IAAMrB,GAAQT,KAAKY,UAAYH,EAC/BS,GAAIA,EACJa,MAAM,UACNC,KAAM,EACNC,QAAUC,GAAOlC,KAAKiB,MAASiB,EAAEC,OAA+BlB,QAC/DA,GAEFX,EAAM8B,WAAa9B,EAAM8B,UAAY,EACpCf,EAAA,QAAMU,MAAM,mBACTM,EAAApB,IAAK,MAALA,SAAK,SAALA,EAAOqB,UAAM,MAAAD,SAAA,EAAAA,EAAI,EAAC,IAAG/B,EAAM8B,UAC5Bf,EAAA,QAAMU,MAAM,kBAAiB,YAAW,YAAYQ,KAAK,UACtDtB,IAAK,MAALA,SAAK,SAALA,EAAOqB,UAAWE,OAAOlC,EAAM8B,WAC5B,qCAAqC9B,EAAM8B,sCAC3C,KAGN,K"}