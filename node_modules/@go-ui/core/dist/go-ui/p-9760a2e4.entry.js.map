{"version":3,"names":["goButtonCss","GoButtonStyle0","GoButton","this","nativeEl","componentWillLoad","icon","el","hasAttribute","warning","block","handleBlockChange","updateInnerButtonAttributes","inheritedAttributes","Object","assign","$attrs","bind","blockClasses","render","type","disabled","variant","outline","outlineFill","href","loading","loadingAnouncement","Tag","rootClasses","h","Host","key","class","ref","loadingAnnouncement","name","goDarkModeCss","GoDarkModeStyle0","GoDarkMode","theme","getUserPreference","setTheme","window","matchMedia","addEventListener","async","e","matches","userTheme","localStorage","getItem","setItem","changeEvent","emit","document","documentElement","setAttribute","attribute","goSpinnerCss","GoSpinnerStyle0","GoSpinner","isLoading","loadingChanged","value","ringColor","baseColor","size","ringWidth","duration","stacked","styles","style","role","goSwitchCss","GoSwitchStyle0","GoSwitch","attrs","handleChange","checked","target","propNames","keys","attributeNames","map","kebabCase","inheritAttributes","label","stack","fullWidth","showOnOff","showOnOffOutside","activeLabel","inactiveLabel","inputId","id","uniqueId","htmlFor","inputEl","onChange"],"sources":["src/components/go-button/go-button.scss?tag=go-button","src/components/go-button/go-button.tsx","src/components/go-dark-mode/go-dark-mode.scss?tag=go-dark-mode","src/components/go-dark-mode/go-dark-mode.tsx","src/components/go-spinner/go-spinner.scss?tag=go-spinner","src/components/go-spinner/go-spinner.tsx","src/components/form/go-switch/go-switch.scss?tag=go-switch","src/components/form/go-switch/go-switch.tsx"],"sourcesContent":["go-button {\n  // default colours\n\n  /**\n    @prop --go-btn-bg-color:\n      Background colour for the button.\n      - default: var(--go-color-neutral-600)\n  */\n  --go-btn-bg-color: var(--go-color-neutral-600);\n\n  --go-btn-bg-color-hover: var(--go-color-neutral-500);\n  --go-btn-text-color: #fff;\n  --go-btn-text-color-hover: #fff;\n  --go-focus-outline-color: var(--go-btn-bg-color);\n  --go-btn-outline-text-color: #000;\n  --go-btn-outline-text-color-hover: #000;\n  --go-btn-disabled-opacity: 0.5;\n\n  // shadow\n  --go-btn-shadow: var(--shadow-2);\n\n  // default sizing\n  --go-btn-padding-y: 0.5em;\n  --go-btn-padding-x: 1.5em;\n  --go-btn-inner-gap: 0.5rem;\n  --go-btn-radius: var(--radius-2, 0.25rem);\n\n  /**\n    @prop --go-btn-icon-size:\n      Outer size of the icon button.\n      - default: 3rem\n  */\n  --go-btn-icon-size: 3rem;\n\n  /**\n    @prop --go-btn-inline-icon-size:\n      Size of the icon inside the button.\n      - default: calc(var(--go-btn-icon-size) / 2)\n  */\n  --go-btn-inline-icon-size: calc(var(--go-btn-icon-size) / 2);\n\n  // outline fill color\n  --go-btn-outline-fill-color: var(--go-color-bg);\n\n  /**\n    @prop --go-btn-border-width:\n      Width of button border\n      - default: 2px\n  */\n  --go-btn-border-width: 2px;\n\n  display: inline-block;\n\n  &.block-all {\n    display: block;\n    width: 100%;\n  }\n\n  &.block-desktop {\n    display: block;\n    width: 100%;\n    @include min-query(large) {\n      display: inline-block;\n      width: auto;\n    }\n  }\n  &.block-tablet {\n    display: block;\n    width: 100%;\n    @include min-query(desktop) {\n      display: inline-block;\n      width: auto;\n    }\n  }\n  &.block-mobile {\n    display: block;\n    width: 100%;\n    @include min-query(tablet) {\n      display: inline-block;\n      width: auto;\n    }\n  }\n\n  &.outline {\n    .inner-button {\n      background: transparent;\n      border-color: var(--go-btn-bg-color);\n      color: var(--go-btn-outline-text-color);\n      &:hover,\n      &:focus-visible {\n        background: var(--go-btn-bg-color);\n        color: var(--go-btn-outline-text-color-hover);\n      }\n    }\n    &[variant='text'] {\n      --go-btn-bg-color: var(--go-color-neutral-700);\n      .inner-button {\n        border-color: transparent;\n      }\n    }\n  }\n\n  &.outline-fill {\n    .inner-button {\n      background: var(--go-btn-outline-fill-color);\n    }\n  }\n\n  &[flat] {\n    .inner-button {\n      box-shadow: none;\n      &:hover,\n      &:focus-visible {\n        box-shadow: none;\n      }\n    }\n  }\n\n  &[round] {\n    .inner-button {\n      border-radius: var(--radius-round);\n    }\n  }\n\n  &[icon] {\n    .inner-button {\n      width: var(--go-btn-icon-size);\n      height: var(--go-btn-icon-size);\n      padding: 0;\n      text-align: center;\n      line-height: 1;\n    }\n  }\n\n  &[stack] {\n    .inner-button {\n      flex-direction: column;\n    }\n  }\n\n  &[compact] {\n    --go-btn-padding-y: 0.25em;\n    --go-btn-padding-x: 0.5em;\n    --go-btn-inner-gap: 0.125em;\n    --go-btn-icon-size: 2rem;\n    .inner-button {\n      font-size: var(--go-size--1);\n      line-height: 1.5em;\n    }\n  }\n\n  &[disabled] {\n    .inner-button {\n      /* stylelint-disable-next-line plugin/no-unsupported-browser-features */\n      cursor: not-allowed;\n      box-shadow: none;\n      opacity: var(--go-btn-disabled-opacity);\n      &:hover,\n      &:focus {\n        box-shadow: none;\n        outline: none;\n      }\n    }\n  }\n\n  .inner-button {\n    // reset button style\n    @include reset-btn;\n\n    display: inline-flex;\n    vertical-align: middle;\n    align-items: center;\n    justify-content: center;\n    gap: var(--go-btn-inner-gap);\n    width: 100%;\n    text-align: center;\n    line-height: 1.5;\n    background: var(--go-btn-bg-color);\n    color: var(--go-btn-text-color);\n    border: var(--go-btn-border-width) solid transparent;\n    border-radius: var(--go-btn-radius);\n    padding: var(--go-btn-padding-y, 0.5rem) var(--go-btn-padding-x, 1rem);\n    box-shadow: var(--go-btn-shadow);\n    text-underline-offset: 4px; // optimise for browsers that support it\n    font-weight: 400;\n    @include clickable;\n\n    &:hover,\n    &:focus-visible {\n      --go-btn-bg-color: var(--go-btn-bg-color-hover);\n      --go-btn-text-color: var(--go-btn-text-color-hover);\n    }\n\n    svg {\n      width: var(--go-btn-inline-icon-size);\n      height: var(--go-btn-inline-icon-size);\n      margin: 0;\n    }\n  }\n\n  &[variant='text'] {\n    --go-focus-outline-color: var(--go-color-primary-600);\n    --go-btn-bg-color: transparent;\n    --go-btn-bg-color-hover: var(--go-color-neutral-300);\n    --go-btn-text-color: currentColor;\n    --go-btn-text-color-hover: currentColor;\n    .btn-text {\n      text-decoration: underline;\n    }\n    \n    &:hover,\n    &:focus-within {\n      .btn-text {\n        text-decoration: none;\n      }\n    }\n  }\n}\n\n@mixin btn-light-overrides {\n  go-button {\n    // Colour variants\n    --go-btn-bg-color: var(--go-color-neutral-600);\n    --go-btn-bg-color-hover: var(--go-color-neutral-500);\n    &[variant='primary'] {\n      --go-btn-bg-color: var(--go-color-primary-600);\n      --go-btn-bg-color-hover: var(--go-color-primary-500);\n    }\n    &[variant='secondary'] {\n      --go-btn-bg-color: var(--go-color-secondary-600);\n      --go-btn-bg-color-hover: var(--go-color-secondary-500);\n    }\n    &[variant='success'] {\n      --go-btn-bg-color: var(--go-color-success-600);\n      --go-btn-bg-color-hover: var(--go-color-success-500);\n    }\n    &[variant='critical'] {\n      --go-btn-bg-color: var(--go-color-critical-600);\n      --go-btn-bg-color-hover: var(--go-color-critical-500);\n    }\n    &.outline {\n      --go-btn-outline-text-color: var(--go-btn-bg-color);\n      --go-btn-outline-text-color-hover: var(--go-color-lightest);\n    }\n  }\n}\n@mixin btn-dark-overrides {\n  go-button {\n    // Colour variants\n    --go-btn-bg-color: var(--go-color-neutral-400);\n    --go-btn-bg-color-hover: var(--go-color-neutral-500);\n    &[variant='primary'] {\n      --go-btn-bg-color: var(--go-color-primary-600);\n      --go-btn-bg-color-hover: var(--go-color-primary-400);\n    }\n    &[variant='secondary'] {\n      --go-btn-bg-color: var(--go-color-secondary-400);\n      --go-btn-bg-color-hover: var(--go-color-secondary-500);\n    }\n    &[variant='success'] {\n      --go-btn-bg-color: var(--go-color-success-400);\n      --go-btn-bg-color-hover: var(--go-color-success-500);\n    }\n    &[variant='critical'] {\n      --go-btn-bg-color: var(--go-color-critical-400);\n      --go-btn-bg-color-hover: var(--go-color-critical-500);\n    }\n    &.outline {\n      --go-btn-outline-text-color: var(--go-color-darkest);\n      --go-btn-outline-text-color-hover: var(--go-color-darkest);\n    }\n  }\n}\n\n// defualt light\n// mq prefer light\n// mq prefer dark\n// light theme\n// dark theme\n\n@include theme-light {\n  @include btn-light-overrides;\n}\n@include theme-dark {\n  @include btn-dark-overrides;\n}\n","import { Component, h, Prop, Element, Host, Watch, State } from '@stencil/core';\nimport { Breakpoints, ColorVariants } from '../../interfaces';\nimport { $attrs, warning } from '../../utils/helper';\n\n/**\n * @slot default - Button text\n * @slot prefix - Use this slot to prepend content to the button.\n * @slot suffix - Use this slot to append content to the button.\n */\n@Component({\n  tag: 'go-button',\n  styleUrl: 'go-button.scss',\n  shadow: false,\n})\nexport class GoButton {\n  @Element() el: HTMLElement;\n\n  /**\n   * Html type of the button\n   */\n  @Prop() type: 'submit' | 'reset' | 'button' = 'button';\n\n  /**\n   * If this button is disabled\n   */\n  @Prop({ reflect: true }) disabled?: boolean = null;\n\n  /**\n   * Button variants\n   */\n  @Prop({ reflect: true }) variant?: ColorVariants | 'text' = 'neutral';\n\n  /**\n   * If set, the button will take up the full width of its parent\n   * If block=\"{breakpoint}\" is set, the button will take up the full width for the specified breakpoint. e.g. a `block=\"mobile\"` button will display full width on mobile devices.\n   * If block=\"all\", the button will take full width on all devices.\n   */\n  @Prop({ reflect: true }) block?: Breakpoints;\n\n  /**\n   * If `outline` is true, the button will have a border based on selected variant\n   * @see `variant` property\n   */\n  @Prop({ reflect: true }) outline?: boolean = false;\n\n  /**\n   * Outline style with filled background\n   */\n  @Prop({ reflect: true }) outlineFill?: boolean = false;\n\n  /**\n   * If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant\n   */\n  @Prop({ reflect: true }) flat?: boolean = false;\n\n  /**\n   * If button should have pill-shaped corners\n   */\n  @Prop({ reflect: true }) round?: boolean = false;\n\n  /**\n   * Circle shaped icon only button that has min size of 40px for touch devices\n   */\n  @Prop({ reflect: true }) icon?: boolean = false;\n\n  /**\n   * Stack elements inside the button\n   */\n  @Prop({ reflect: true }) stack?: boolean = false;\n\n  /**\n   * Reduce inner gaps and outer paddings\n   */\n  @Prop({ reflect: true }) compact?: boolean = false;\n\n  /**\n   * If the button has an href, it will be rendered as an anchor tag\n   */\n  @Prop() href?: string;\n\n  /**\n   * If the button is loading\n   */\n  @Prop() loading: boolean = false;\n\n  /**\n   * Screen reader announcement for loading state\n   */\n  @Prop() loadingAnouncement?: string = 'Loading';\n\n  @State() blockClasses: string;\n\n  @State() inheritedAttributes = {} as any;\n\n  public nativeEl: HTMLElement = null;\n\n  componentWillLoad() {\n    // a11y check\n    if (this.icon) {\n      if (!this.el.hasAttribute('aria-label') && !this.el.hasAttribute('aria-labelledby')) {\n        warning(`go-button with icon must have either aria-label or aria-labelledby attribute`, this.el);\n      }\n    }\n\n    if (this.block) {\n      this.handleBlockChange(this.block);\n    }\n    this.updateInnerButtonAttributes();\n  }\n  updateInnerButtonAttributes() {\n    this.inheritedAttributes = {\n      ...$attrs.bind(this)(),\n    };\n  }\n\n  @Watch('block')\n  handleBlockChange(block: Breakpoints) {\n    this.blockClasses = typeof block !== 'undefined' ? `block-${block}` : '';\n  }\n\n  render() {\n    const {\n      type,\n      disabled,\n      variant,\n      blockClasses,\n      outline,\n      outlineFill,\n      inheritedAttributes,\n      href,\n      loading,\n      loadingAnouncement,\n    } = this;\n    const Tag = href ? 'a' : 'button';\n    const rootClasses = `${variant} ${blockClasses}`;\n    return (\n      <Host\n        class={{\n          [rootClasses]: true,\n          outline,\n          'outline outline-fill': outlineFill,\n        }}>\n        <Tag\n          ref={(el) => {\n            this.nativeEl = el;\n          }}\n          href={href ? href : null}\n          type={href ? null : type}\n          aria-disabled={disabled ? 'true' : null}\n          disabled={disabled ? 'true' : null}\n          class=\"inner-button\"\n          aria-busy={loading ? 'true' : null}\n          {...inheritedAttributes}>\n          <go-spinner loading={loading} loadingAnnouncement={loadingAnouncement}></go-spinner>\n          <slot name=\"prefix\"></slot>\n          <span class=\"btn-text\">\n            <slot></slot>\n          </span>\n          <slot name=\"suffix\"></slot>\n        </Tag>\n      </Host>\n    );\n  }\n}\n","go-dark-mode {\n display: block;\n}\n","import { Component, Prop, Build, EventEmitter, Event, Method } from '@stencil/core';\n\nexport type Theme = 'light' | 'dark';\n@Component({\n  tag: 'go-dark-mode',\n  styleUrl: 'go-dark-mode.scss',\n  shadow: false,\n})\nexport class GoDarkMode {\n  /**\n   * Attribute name on html element that will be used to store theme\n   */\n  @Prop() attribute: string = 'data-theme';\n\n  async componentWillLoad() {\n    // get user preference\n    const theme = await this.getUserPreference();\n\n    this.setTheme(theme);\n\n    // add event listener\n    if (Build.isBrowser) {\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', async (e) => {\n        await this.setTheme(e.matches ? 'dark' : 'light');\n      });\n    }\n  }\n\n  /**\n   * get preferred theme,\n   * 1. Check user settings:\n   *    - check if localstorage has user-theme key\n   *    - if so, check if value is either light or dark,\n   *    - if so, return value\n   *    - if value is neither light or dark, continue to next step\n   * 2. Check system preference:\n   *    - check if prefers-color-scheme is dark, if so, return dark\n   * 3. default to light\n   */\n  @Method()\n  async getUserPreference(): Promise<Theme> {\n    const userTheme = localStorage.getItem('user-theme');\n    if (userTheme === 'light' || userTheme === 'dark') {\n      return userTheme;\n    }\n\n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n\n    // Default to light\n    return 'light';\n  }\n\n  @Event({\n    eventName: 'themechange',\n  })\n  changeEvent: EventEmitter<{ theme: Theme }>;\n\n  /**\n   * set the current theme and change the html attribute\n   * @param theme theme to set\n   */\n  @Method()\n  async setTheme(theme: Theme): Promise<void> {\n    localStorage.setItem('user-theme', theme);\n    this.changeEvent.emit({ theme });\n    document.documentElement.setAttribute(this.attribute, theme);\n  }\n}\n","go-spinner {\n  --spinner-ring-color: var(--go-color-primary-800);\n  --spinner-base-color: var(--go-color-neutral-300);\n  --spinner-size: 1.5rem;\n  --spinner-ring-width: calc(var(--spinner-size) / 10);\n  --spinner-duration: 500ms;\n  --spinner-gap: 0.5rem;\n\n  display: inline-flex;\n  gap: var(--spinner-gap);\n  align-items: center;\n  &.stacked {\n    flex-direction: column;\n  }\n  .spinner {\n    border: var(--spinner-ring-width) solid var(--spinner-base-color);\n    border-radius: 50%;\n    border-top-color: var(--spinner-ring-color);\n    width: var(--spinner-size);\n    height: var(--spinner-size);\n    animation: spin var(--spinner-duration) linear infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n}\n","import { Component, Host, h, Element, Prop, Watch, State } from '@stencil/core';\n\n@Component({\n  tag: 'go-spinner',\n  styleUrl: 'go-spinner.scss',\n  shadow: false,\n})\nexport class GoSpinner {\n  @Element() el: HTMLElement;\n\n  /**\n   * Set the ring color of the spinner.\n   */\n  @Prop() ringColor?: string;\n\n  /**\n   * Set the base color of the spinner.\n   */\n  @Prop() baseColor?: string;\n\n  /**\n   * Set the width and height of the spinner.\n   */\n  @Prop() size?: string;\n\n  /**\n   * Set the width of the spinner ring\n   */\n  @Prop() ringWidth?: string;\n\n  /**\n   * Set how long it should take to complete one full rotation in milliseconds.\n   */\n  @Prop() duration?: number;\n\n  /**\n   * If true, spinner and label will be stacked.\n   */\n  @Prop() stacked?: boolean = false;\n\n  /**\n   * set the loading state\n   */\n  @Prop({ reflect: true }) loading: boolean = true;\n\n  /**\n   * screen reader announcement when loading\n   */\n  @Prop() loadingAnnouncement: string = 'Loading';\n\n  @State() isLoading: boolean;\n\n  componentWillLoad() {\n    this.isLoading = this.loading;\n  }\n\n  @Watch('loading')\n  loadingChanged(value: boolean) {\n    this.isLoading = value;\n  }\n\n  render() {\n    const { ringColor, baseColor, size, ringWidth, duration, stacked, isLoading, loadingAnnouncement } = this;\n    let styles = {};\n    if (ringColor) {\n      styles['--spinner-ring-color'] = ringColor;\n    }\n    if (baseColor) {\n      styles['--spinner-base-color'] = baseColor;\n    }\n    if (size) {\n      styles['--spinner-size'] = size;\n    }\n    if (ringWidth) {\n      styles['--spinner-ring-width'] = ringWidth;\n    }\n    if (duration) {\n      styles['--spinner-duration'] = duration;\n    }\n    return (\n      <Host style={styles} role=\"status\" class={{ stacked, 'visually-hidden': !isLoading }}>\n        {isLoading\n          ? [\n              <div aria-hidden=\"true\" class=\"spinner\"></div>,\n              <slot>\n                <span class=\"visually-hidden\">{loadingAnnouncement}</span>\n              </slot>,\n            ]\n          : null}\n      </Host>\n    );\n  }\n}\n","go-switch {\n  /**\n    @prop --switch-width:\n      width of switch control\n      - default: 4rem\n  */\n  --switch-width: 4rem;\n\n  /**\n    @prop --switch-height:\n      height of switch control\n      - default: 2rem\n  */\n  --switch-height: 2rem;\n\n  /**\n    @prop --switch-bg-color:\n      default background color of switch control\n      - default: var(--go-color-neutral-500)\n  */\n  --switch-bg-color: var(--go-color-neutral-500);\n\n  /**\n    @prop --switch-bg-color-checked:\n      background color of switch control when checked\n      - default: var(--go-color-primary-600)\n  */\n  --switch-bg-color-checked: var(--go-color-primary-600);\n\n  /**\n    @prop --switch-label-gap:\n      gap between label and switch control\n      - default: 1rem\n  */\n  --switch-label-gap: 1rem;\n\n  /**\n    @prop --switch-radius:\n      border radius of switch control\n      - default: var(--radius-round)\n  */\n  --switch-radius: var(--radius-round);\n\n  /**\n    @prop --switch-handle-color:\n      color of the switch handle\n      - default: #fff\n  */\n  --switch-handle-color: #fff;\n\n  /**\n    @prop --switch-handle-gap:\n      gap between handle circle and the edge of the switch\n      - default: 4px\n  */\n  --switch-handle-gap: 4px;\n\n  /**\n    @prop --switch-handle-shadow:\n      box shadow for the handle circle\n      - default: var(--shadow-2)\n  */\n  --switch-handle-shadow: var(--shadow-2);\n\n  /**\n    @prop --switch-shadow:\n      shadow on the switch track\n      - default: var(--inner-shadow-1)\n  */\n  --switch-shadow: var(--inner-shadow-1);\n\n  /**\n    @prop --switch-text-color:\n      Text color for on off label\n      - default: #fff\n  */\n  --switch-text-color: #fff;\n  --switch-handle-size: calc(min(var(--switch-width), var(--switch-height)) - 2 * var(--switch-handle-gap));\n\n  /**\n    @prop --switch-text-size:\n      Inner text size of switch\n      - default: max(calc(var(--switch-handle-size) / 2), 14px)\n  */\n  --switch-text-size: max(calc(var(--switch-handle-size) / 2), 14px);\n\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n  gap: var(--switch-label-gap);\n  &.stack {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: var(--form-label-gap);\n  }\n  &.full-width {\n    display: flex;\n    justify-content: space-between;\n    label {\n      flex-grow: 1;\n    }\n  }\n  label {\n    cursor: pointer;\n    font-weight: 700;\n  }\n\n  .switch-container {\n    position: relative;\n  }\n  .switch-group {\n    display: flex;\n    align-items: center;\n    gap: calc(var(--switch-label-gap) / 2);\n  }\n  .switch-track {\n    @include transition(background-color, outline-offset var(--go-duration-fast));\n\n    display: block;\n    position: relative;\n    padding-inline: var(--switch-handle-gap);\n    width: var(--switch-width);\n    height: var(--switch-height);\n    background: var(--switch-bg-color);\n    border-radius: var(--switch-radius);\n    box-shadow: var(--switch-shadow);\n\n    .switch-text {\n      position: absolute;\n      top: 50%;\n      left: auto;\n      right: 20%;\n      transform: translateY(-50%);\n      color: var(--switch-text-color);\n      font-size: var(--switch-text-size);\n      line-height: 1;\n      font-weight: 500;\n    }\n  }\n\n  .switch-handle {\n    display: block;\n    position: absolute;\n    top: var(--switch-handle-gap);\n    left: var(--switch-handle-gap);\n    bottom: var(--switch-handle-gap);\n    z-index: 1;\n    background: var(--switch-handle-color);\n    width: var(--switch-handle-size);\n    height: var(--switch-handle-size);\n    border-radius: var(--switch-radius);\n    box-shadow: var(--switch-handle-shadow);\n    @include transition(transform var(--go-duration-fast));\n  }\n\n  input {\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 2;\n    outline: none;\n    cursor: pointer;\n    &:checked {\n      ~ .switch-group {\n        .switch-track {\n          --switch-bg-color: var(--switch-bg-color-checked);\n          .switch-handle {\n            transform: translateX(calc(var(--switch-width) - var(--switch-handle-size) - 2 * var(--switch-handle-gap)));\n          }\n          .switch-text {\n            left: 20%;\n            right: auto;\n          }\n        }\n      }\n    }\n\n    &:focus-visible {\n      &:active {\n        ~ .switch-group {\n          .switch-track {\n            outline-offset: 0;\n          }\n        }\n      }\n      ~ .switch-group {\n        .switch-track {\n          outline: var(--go-focus-outline-width) solid var(--switch-bg-color);\n          outline-offset: var(--go-focus-outline-offset);\n        }\n      }\n    }\n  }\n}\n","import { Component, Host, h, Element, Prop } from '@stencil/core';\nimport { inheritAttributes } from '../../../utils/helper';\nimport { uniqueId, kebabCase } from 'lodash-es';\nimport { CheckboxProps } from '../../../interfaces/form';\n\n@Component({\n  tag: 'go-switch',\n  styleUrl: 'go-switch.scss',\n  shadow: false,\n})\nexport class GoSwitch implements CheckboxProps {\n  @Prop({ mutable: true })\n  checked?: boolean;\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  label: string;\n\n  @Prop()\n  disabled?: boolean;\n\n  @Prop()\n  value: any;\n\n  @Element() el: HTMLElement;\n\n  /**\n   * Display label on top of switch\n   */\n  @Prop() stack = false;\n\n  /**\n   * make this field full width\n   */\n  @Prop() fullWidth = false;\n\n  /**\n   * show on/off text in switch toggle\n   */\n  @Prop() showOnOff = false;\n\n  /**\n   * show on/off text next to the switch toggle\n   */\n  @Prop() showOnOffOutside = false;\n\n  /**\n   * \"on\" label to show when `showOnOff*` is set to true\n   */\n  @Prop() activeLabel: string = 'On';\n\n  /**\n   * \"off\" label to show when `showOnOff*` is set to true\n   */\n  @Prop() inactiveLabel: string = 'Off';\n\n  inputEl: HTMLInputElement;\n\n  handleChange(e) {\n    this.checked = e.target.checked;\n  }\n\n  // Store attributes inherited from the host element\n  private attrs = {} as any;\n  componentWillLoad() {\n    const propNames = Object.keys(this['__proto__']);\n    const attributeNames = propNames.map((name) => kebabCase(name));\n    this.attrs = inheritAttributes(this.el, ['class', 'style', ...attributeNames]);\n  }\n\n  render() {\n    const {\n      checked,\n      name,\n      label,\n      disabled,\n      value,\n      attrs,\n      stack,\n      fullWidth,\n      showOnOff,\n      showOnOffOutside,\n      activeLabel,\n      inactiveLabel,\n    } = this;\n    const inputId = attrs?.id ? attrs.id : uniqueId('go-switch-');\n    return (\n      <Host class={{ stack, 'full-width': fullWidth }}>\n        <label htmlFor={inputId}>{label}</label>\n        <div class=\"switch-container\">\n          <input\n            ref={(el) => (this.inputEl = el)}\n            type=\"checkbox\"\n            role=\"switch\"\n            id={inputId}\n            name={name}\n            disabled={disabled}\n            checked={checked}\n            value={value}\n            {...attrs}\n            onChange={(e) => this.handleChange(e)}\n          />\n          <div class=\"switch-group\">\n            <span class=\"switch-track\">\n              <span class=\"switch-handle\"></span>\n              {showOnOff ? (\n                <span class=\"switch-text\" aria-hidden=\"true\">\n                  {checked ? activeLabel : inactiveLabel}\n                </span>\n              ) : null}\n            </span>\n            {showOnOffOutside ? (\n              <span class=\"text-size-0\" aria-hidden=\"true\">\n                {checked ? activeLabel : inactiveLabel}\n              </span>\n            ) : null}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}