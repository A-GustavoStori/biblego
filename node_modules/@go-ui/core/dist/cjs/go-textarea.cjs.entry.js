'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
const form = require('./form-6e13a9ec.js');
require('./index-c48c451e.js');
const uniqueId = require('./uniqueId-93e4ecef.js');
require('./helper-c1931cd5.js');
require('./kebabCase-f98d4407.js');

const goTextareaCss = ":root{--input-bg:var(--go-color-lightest);--input-fg:var(--go-color-darkest);--input-gap-inner:0.5rem;--input-padding-y:0.5rem;--input-padding-x:0.5rem;--input-control-padding:var(--input-padding-y) var(--input-padding-x);--input-radius:var(--radius-2);--input-border-color:var(--go-color-neutral-400);--input-border:1px solid var(--input-border-color);--input-gap-outer:1rem 0;--input-error-color:var(--go-color-critical-600);--input-focus-shadow:var(--inner-shadow-2);--input-icon-size:1.5rem;--input-text-disabled-color:var(--go-color-neutral-700);--input-bg-disabled-color:rgba(var(--go-token-neutral-200), 0.4);--input-text-readonly-color:var(--go-color-neutral-700);--input-bg-readonly-color:rgba(var(--go-token-neutral-200), 0.3);--input-presuf-bg:var(--go-color-neutral-100);--input-presuf-text-color:var(--go-color-neutral-800);--input-presuf-padding:var(--input-control-padding);--input-hint-color:var(--go-color-neutral-800);--input-hint-font-size:var(--go-size--1);--control-selected-bg-color:var(--go-color-primary-600);--control-selected-fg-color:rgb(var(--go-token-lightest));--input-label-font-size:1rem;--input-label-font-weight:700;--control-focus-duration:0.3s;--field-icon-button-size:2.25rem}go-textarea{display:block}go-textarea textarea{overflow:auto;resize:vertical}go-textarea textarea:-moz-read-only{resize:none}go-textarea textarea:disabled,go-textarea textarea:read-only{resize:none}go-textarea .textarea-count{color:var(--input-hint-color);line-height:1;font-size:var(--input-hint-font-size);margin-top:var(--input-gap-inner);margin-bottom:0}go-textarea .textarea-count:last-child{margin-bottom:0}";
const GoTextareaStyle0 = goTextareaCss;

const GoTextarea = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.hasNamedSlot = {};
        this.prefixer = 'go-textarea-';
        this.controlId = uniqueId.uniqueId(this.prefixer);
        this.labelId = undefined;
        this.prefixId = undefined;
        this.suffixId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.readonly = undefined;
        this.value = undefined;
        this.autoGrow = false;
        this.attrs = undefined;
    }
    componentWillLoad() {
        this.attrs = form.inheritNonFieldAttrs(this, ['auto-grow']);
        this.hasNamedSlot = form.loadFieldSlots(this.el);
    }
    updateControlHeight() {
        if (this.autoGrow && this.controlEl) {
            this.controlEl.style.height = 'auto';
            this.controlEl.style.height = this.controlEl.scrollHeight + 'px';
        }
    }
    render() {
        var _a;
        const { value, controlId: id, attrs } = this;
        const fieldProps = form.loadFieldProps(this);
        return (index.h("go-field", Object.assign({ key: 'a04ebbeccfa9eb07b5dc7f13d98de6ecc9e9d38e' }, fieldProps), form.fieldSlotNames.map((slotName) => {
            if (this.hasNamedSlot[slotName]) {
                return (index.h("template", { slot: slotName }, index.h("slot", { name: slotName })));
            }
        }), index.h("textarea", Object.assign({ key: '5a7eac852d6f10bc5f36d1c45126efa5bd1d0c07' }, fieldProps, attrs, { ref: (el) => (this.controlEl = el), id: id, class: "control", rows: 5, onInput: (e) => (this.value = e.target.value) }), value), attrs.maxlength && attrs.maxlength > 0 ? (index.h("span", { class: "textarea-count" }, (_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0, "/", attrs.maxlength, index.h("span", { class: "visually-hidden", "aria-live": "assertive", role: "alert" }, (value === null || value === void 0 ? void 0 : value.length) === Number(attrs.maxlength)
            ? `Limit reached, you can only enter ${attrs.maxlength} characters in this field.`
            : ''))) : null));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "value": ["updateControlHeight"]
    }; }
};
GoTextarea.style = GoTextareaStyle0;

exports.go_textarea = GoTextarea;

//# sourceMappingURL=go-textarea.cjs.entry.js.map