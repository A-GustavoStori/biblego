'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
const helper = require('./helper-c1931cd5.js');
const uniqueId = require('./uniqueId-93e4ecef.js');
require('./index-c48c451e.js');

const goHeroCss = "go-hero{--hero-padding-top:0;--hero-padding-bottom:0;--hero-breadcrumb-gap:2rem;--hero-pre-heading-gap:0;--hero-bg-color:var(--go-color-primary-100);--hero-fg-color:var(--go-color-darkest);--hero-text-flex-basis:60%;--hero-image-flex-basis:40%;--hero-container-gap:2rem;--hero-text-bg-blur-on-img:0.625rem;--hero-text-box-padding:2rem;--hero-img-aspect-ratio:4/3;--hero-img-fit:cover;--hero-img-position:center;--hero-full-width-bg-padding:4rem 0;--hero-bg-opacity-on-img:0.5;display:block;background-color:var(--hero-bg-color);color:var(--hero-fg-color);position:relative;overflow:hidden}go-hero .full-width-bg{position:absolute;z-index:0;width:100%;top:50%;transform:translateY(-50%)}go-hero .full-width-bg>img{object-fit:cover;width:100%;height:100%;object-fit:cover}go-hero.has-full-width-bg .hero-container{padding:var(--hero-full-width-bg-padding)}go-hero.has-full-width-bg .hero-text{position:relative;-webkit-backdrop-filter:blur(var(--hero-text-bg-blur-on-img));backdrop-filter:blur(var(--hero-text-bg-blur-on-img))}go-hero.has-full-width-bg .hero-text-bg{position:absolute;top:0;left:0;width:100%;height:100%;z-index:-1;background-color:var(--hero-bg-color);opacity:var(--hero-bg-opacity-on-img)}go-hero.hide-img-on-mobile .hero-image{display:none}@media (min-width: 1024px){go-hero.hide-img-on-mobile .hero-image{display:block}}go-hero .hero-container{position:relative;z-index:1;display:flex;flex-direction:column;padding-top:var(--hero-padding-top);padding-bottom:var(--hero-padding-bottom);gap:var(--hero-container-gap)}@media (min-width: 1024px){go-hero .hero-container{flex-direction:row}}go-hero .hero-text{padding:var(--hero-text-box-padding)}go-hero .hero-text go-breadcrumbs{margin-bottom:var(--hero-breadcrumb-gap)}go-hero .hero-text .pre-heading{margin-bottom:var(--hero-pre-heading-gap)}@media (min-width: 1024px){go-hero .hero-text{flex:0 1 var(--hero-text-flex-basis)}}@media (min-width: 1024px){go-hero .hero-image{flex:0 1 var(--hero-image-flex-basis)}}go-hero .hero-image .featured-img{width:100%;height:100%;object-fit:var(--hero-img-fit);object-position:var(--hero-img-position);aspect-ratio:var(--hero-img-aspect-ratio)}";
const GoHeroStyle0 = goHeroCss;

const GoHero = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.hasFullWidthBg = false;
        this.heading = undefined;
        this.preHeading = undefined;
        this.breadcrumbs = undefined;
        this.imgSrc = undefined;
        this.imgAlt = undefined;
        this.hideImgOnMobile = false;
    }
    watchImgSrc(value) {
        if (value && !this.imgAlt) {
            helper.warning('img-alt attribute is required when img-src is present');
        }
    }
    watchImgAlt(value) {
        if (value && !this.imgSrc) {
            helper.warning('img-src attribute is not present, did you forget to add it?');
        }
    }
    componentWillLoad() {
        this.hasFullWidthBg = helper.hasSlot(this.el, 'full-width-bg');
    }
    render() {
        const { heading, preHeading, breadcrumbs, imgAlt, imgSrc, hasFullWidthBg, hideImgOnMobile } = this;
        return (index.h(index.Host, { key: 'df0c63d107f0e47d46d706aff84d6fef7b869ca5', class: {
                'has-full-width-bg': hasFullWidthBg,
                'hide-img-on-mobile': !!hideImgOnMobile,
            } }, index.h("div", { key: '6073db59c9f5f89f7452df8daa562942eb198110' }, hasFullWidthBg ? (index.h("div", { class: "full-width-bg" }, index.h("slot", { name: "full-width-bg" }))) : null, index.h("div", { key: '37cbac69b69a21dde06f445524ee55e54abdf242', class: "container" }, index.h("div", { key: '94f3a65f89050bcb9c256c268c350607535154e0', class: "hero-container" }, index.h("div", { key: '40d0542bbc423131fcea8265f845d626aeb56c30', class: "hero-text" }, hasFullWidthBg ? index.h("div", { class: "hero-text-bg" }) : null, breadcrumbs ? index.h("go-breadcrumbs", { items: breadcrumbs }) : null, index.h("div", { key: 'aafef086a6555ec3c3936d853e4b4ce7ac61cade', class: "pre-heading text-size-2" }, preHeading), index.h("h1", { key: '014c347f22abf2f5c878e02df625c1b4b563002c', class: "text-display-2" }, heading), index.h("slot", { key: 'db3091ebbea24d61a01107d022d6a013a8a7ce8c' })), imgSrc && imgAlt ? (index.h("div", { class: "hero-image" }, index.h("img", { src: imgSrc, alt: imgAlt, class: "featured-img" }))) : null)))));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "imgSrc": ["watchImgSrc"],
        "imgAlt": ["watchImgAlt"]
    }; }
};
GoHero.style = GoHeroStyle0;

const goTocCss = "go-toc{--toc-border-width:0.25rem;--toc-border-color:var(--go-color-primary-900);--toc-border-gap:2rem;--toc-padding:1.5rem 0;display:block}go-toc .go-toc{padding:var(--toc-padding)}go-toc .go-toc nav{position:relative}go-toc .go-toc-line{position:absolute;top:0;left:0;width:var(--toc-border-width);background:var(--toc-border-color);border-radius:var(--radius-round);height:100%}go-toc .go-toc-title{padding-left:var(--toc-border-gap);margin-bottom:1rem}go-toc .go-toc-list{padding-left:var(--toc-border-gap);list-style:none;margin:0}go-toc .go-toc-list go-link{--nav-link-current-bar-width:0}";
const GoTocStyle0 = goTocCss;

const GoToc = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.labelId = uniqueId.uniqueId('go-toc-heading-');
        this.label = 'On this page';
        this.selector = 'h2';
        this.labelClass = '';
        this.tocItems = undefined;
    }
    componentWillLoad() {
        this.init();
    }
    /**
     * Query the DOM and generate TOC
     * If content in scope is dynamically loaded, it may not be available when this toc component loads.
     * call this `init` method and have the toc regenerate the links
     * @returns void
     */
    async init() {
        const items = document.querySelectorAll(this.selector);
        if (!items.length) {
            // warning('TOC selector (' + this.selector + ') yield no result.');
            return;
        }
        this.setupItems(items);
    }
    /**
     * Initialise the TOC items from the given list of elements
     * If the element doesn't have a `id` attribute, generate an unique id and set it to the element
     * Finally set the tocItems state with url and label
     */
    setupItems(items) {
        const tocItems = [];
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (!item.id) {
                item.id = `toc-item-${i}`;
            }
            item.setAttribute('tabindex', '-1');
            tocItems.push({
                url: `#${item.id}`,
                label: item.textContent,
            });
        }
        this.tocItems = tocItems;
    }
    render() {
        const { labelId, labelClass } = this;
        return (index.h(index.Host, { key: 'ea4b815b9d480027efae49951404a086690e3865' }, this.tocItems && this.tocItems.length ? (index.h("div", { class: "go-toc" }, index.h("nav", { "aria-labelledby": labelId }, index.h("div", { class: "go-toc-line", "aria-hidden": "true" }), index.h("div", { id: labelId }, index.h("slot", { name: "label" }, index.h("span", { class: `go-toc-title h5 ${labelClass}` }, this.label))), index.h("ul", { class: "go-toc-list" }, this.tocItems.map(({ label, url }) => (index.h("li", { class: "go-toc-item" }, index.h("go-nav-link", { item: { label, url } })))))))) : null));
    }
    get el() { return index.getElement(this); }
};
GoToc.style = GoTocStyle0;

exports.go_hero = GoHero;
exports.go_toc = GoToc;

//# sourceMappingURL=go-hero_2.cjs.entry.js.map