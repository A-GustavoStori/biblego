'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
const dom = require('./dom-7cff1398.js');
const helper = require('./helper-c1931cd5.js');
require('./index-c48c451e.js');
require('./uniqueId-93e4ecef.js');

const goCardRowCss = "go-card-row{--card-row-gap:1rem;align-items:stretch;--go-col-gap:var(--card-row-gap)}go-card-row.no-stretch{align-items:flex-start}go-card-row go-card{opacity:0;max-height:12.5rem}go-card-row go-card.loaded{opacity:1;max-height:inherit}go-card-row .stagger go-card.loaded{opacity:0}go-card-row .card-col{margin-bottom:var(--card-row-gap)}";
const GoCardRowStyle0 = goCardRowCss;

const GoCardRow = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * class list for each card
         */
        this.cardClasses = ['card-col'];
        this.noStretch = false;
        this.cols = 1;
        this.colsTablet = 2;
        this.colsDesktop = 3;
        this.colsLarge = 4;
        this.stagger = undefined;
        this.heading = undefined;
        this.headingTag = 'h2';
        this.moreLinkHref = undefined;
        this.moreLinkText = undefined;
    }
    componentWillLoad() {
        // check if heading slot is used
        this.hasHeadingSlot = helper.hasSlot(this.el, 'heading');
        // initialise intersection observer
        if (this.stagger) {
            this.inViewObserver = new IntersectionObserver((entries) => {
                entries.forEach((entry, i) => {
                    if (!entry.isIntersecting) {
                        return;
                    }
                    const card = entry.target;
                    // add stagger fade in effect
                    card.classList.add('stagger-fade-in');
                    card.style.cssText = `--stagger-delay: ${i * this.stagger}ms`;
                    // stop observing
                    this.inViewObserver.unobserve(card);
                });
            }, {
                threshold: 0.2, // >= 1/5th of card is in view
            });
        }
    }
    async componentDidLoad() {
        const { cols, colsTablet, colsDesktop, colsLarge } = this;
        // mobile cols
        this.cardClasses.push(`col-${Math.ceil(12 / cols)}`);
        this.cardClasses.push(`col-tablet-${Math.ceil(12 / colsTablet)}`);
        this.cardClasses.push(`col-desktop-${Math.ceil(12 / colsDesktop)}`);
        this.cardClasses.push(`col-large-${Math.ceil(12 / colsLarge)}`);
        this.loadCards();
    }
    loadCards() {
        const newCards = this.el.querySelectorAll('go-card:not(.loaded)');
        newCards.forEach((card) => {
            this.prepareCard(card, this.cardClasses);
        });
    }
    prepareCard(card, colClasses) {
        // create wrapper container
        const wrapper = document.createElement('div');
        wrapper.classList.add(...colClasses);
        // insert wrapper before el in the DOM tree
        // card.parentNode.insertBefore(wrapper, card);
        // move el into wrapper
        dom.moveEl(card, wrapper);
        card.classList.add('loaded');
        // move card into correct element
        dom.moveEl(wrapper, this.rowEl);
        if (this.stagger) {
            this.inViewObserver.observe(card);
        }
    }
    render() {
        const { noStretch, stagger, heading, moreLinkHref, moreLinkText, hasHeadingSlot, headingTag } = this;
        const headingRowProps = {
            heading,
            moreLinkHref,
            moreLinkText,
            headingTag,
        };
        return (index.h("section", { key: 'c461ee7c9d696beaf18b5d3dfd35933dd1ea3fa4' }, index.h("go-heading-row", Object.assign({ key: '753d97a14498115f302f49ebc3f1bef675144bf4' }, headingRowProps), hasHeadingSlot ? index.h("slot", { name: "heading" }) : null), index.h("div", { key: '8832c2812498f1ee4117a1ab103a64d3d7e20e80', class: {
                'card-row row': true,
                'no-stretch': noStretch,
                'stagger': !!stagger,
            }, ref: (el) => (this.rowEl = el) }, index.h("slot", { key: '825773ad5c0a4a0e79ea05358988041956f65c0e' }))));
    }
    get el() { return index.getElement(this); }
};
GoCardRow.style = GoCardRowStyle0;

exports.go_card_row = GoCardRow;

//# sourceMappingURL=go-card-row.cjs.entry.js.map