'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
const helper = require('./helper-c1931cd5.js');
const navHelpers = require('./nav-helpers-2e8197cd.js');
const uniqueId = require('./uniqueId-93e4ecef.js');
require('./index-c48c451e.js');

const GoNavItem = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.navEvent = index.createEvent(this, "navigate", 7);
        this.subMenuToggleEvent = index.createEvent(this, "submenutoggle", 7);
        this.item = undefined;
        this.parsedItem = undefined;
        this.hasSubmenuSlot = false;
        this.isOpen = false;
    }
    parseItemProp() {
        var _a, _b;
        this.parsedItem = helper.parseJsonProp(this.item);
        if ((_b = (_a = this.parsedItem) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.length) {
            this.submenuId = uniqueId.uniqueId('go-nav-item-submenu-');
        }
    }
    componentWillLoad() {
        this.parseItemProp();
        this.hasSubmenuSlot = helper.hasSlot(this.el, 'submenu');
    }
    handleSubmenuToggle(isOpen) {
        console.log('event triggered', isOpen);
        this.isOpen = !!isOpen;
    }
    renderSubMenu(parent) {
        var _a;
        if (!parent) {
            return;
        }
        // if submenu item has children, render the current item and its children
        if (((_a = parent.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            return (index.h("div", { class: "submenu-list-container" }, index.h("div", { class: "submenu-header" }, index.h("go-nav-link", { block: true, item: parent })), index.h("ul", { class: "submenu-list" }, parent.children.map((child) => (index.h("li", null, index.h("go-nav-link", { block: true, item: child })))))));
        }
        return (index.h("div", { class: "nav-item" }, index.h("go-nav-link", { block: true, item: parent })));
    }
    render() {
        var _a;
        const { parsedItem: item, submenuId } = this;
        let Tag = 'a';
        const hasChildren = ((_a = item === null || item === void 0 ? void 0 : item.children) === null || _a === void 0 ? void 0 : _a.length) > 0 || this.hasSubmenuSlot;
        if (item === null || item === void 0 ? void 0 : item.isCurrent) {
            Tag = 'span';
        }
        let attrs = null;
        if (Tag === 'a') {
            attrs = Object.assign({ url: item === null || item === void 0 ? void 0 : item.url, onClick: (event) => {
                    this.navEvent.emit({ event, item });
                } }, item === null || item === void 0 ? void 0 : item.linkAttrs);
        }
        return (index.h(index.Host, { key: '3e6d846e2c3a73d24ca290cdc1a7dc6192b34cc9', role: "listitem", class: { 'nav-item': true, 'current': item === null || item === void 0 ? void 0 : item.isCurrent } }, index.h("slot", { key: 'f4f0d6596c6fe1b3a77661aeba8c33c3060b2985' }, hasChildren ? ([
            index.h("go-nav-submenu-trigger", { controls: submenuId }, index.h("span", { class: "nav-item-label" }, navHelpers.renderIcon(item === null || item === void 0 ? void 0 : item.icon), index.h("span", null, item === null || item === void 0 ? void 0 : item.label))),
            index.h("go-nav-submenu", { id: submenuId, columns: item === null || item === void 0 ? void 0 : item.columns }, index.h("go-nav-link", { slot: "submenu-header", block: true, item: item, showArrow: true }), item.children.map((child) => this.renderSubMenu(child))),
        ]) : (index.h(Tag, Object.assign({ class: "nav-item-inner" }, attrs), index.h("span", { class: "nav-item-label" }, navHelpers.renderIcon(item === null || item === void 0 ? void 0 : item.icon), index.h("span", null, item === null || item === void 0 ? void 0 : item.label)))))));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "item": ["parseItemProp"]
    }; }
};

exports.go_nav_item = GoNavItem;

//# sourceMappingURL=go-nav-item.cjs.entry.js.map