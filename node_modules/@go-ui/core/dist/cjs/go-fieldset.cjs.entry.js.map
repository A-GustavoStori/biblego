{"file":"go-fieldset.entry.cjs.js","mappings":";;;;;;;;;AAAA,MAAM,aAAa,GAAG,wXAAwX,CAAC;AAC/Y,yBAAe,aAAa;;MCOf,UAAU;;;;;;;;;sBAsCF,KAAK;wBAOJ,KAAK;;IAGzB,gBAAgB;QACd,IAAI,CAAC,QAAQ,GAAG,OAAO,IAAI,CAAC,KAAK,KAAK,WAAW,CAAC;KACnD;IAGD,iBAAiB;QACf,IAAI,CAAC,WAAW,GAAGA,cAAO,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC5CC,kBAAW,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,cAAc,CAAC,CAAC;QACvE,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;IAED,gBAAgB,CAAC,GAAG;;QAElB,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACxC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;;;;QAKrC,MAAM,QAAQ,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC;;QAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;YAExC,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;;YAExC,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;YAE5B,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;SACpB;;QAGD,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;KACtC;IAED,gBAAgB;QACd,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC;SACnE;KACF;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QACrF,QACEC,QAACC,UAAI,uDACHD,uEACE,KAAK,EAAE;gBACL,UAAU,EAAE,IAAI;gBAChB,OAAO,EAAE,QAAQ;aAClB,kBACa,QAAQ,IACtBA,uEAEEA,mEAAM,KAAK,EAAC,OAAO,EAAC,EAAE,EAAE,OAAO,IAC5B,KAAK,CACD,EACN,WAAW,IAAI,IAAI,IAClBA,kBAAM,KAAK,EAAC,MAAM,EAAC,EAAE,EAAE,MAAM,IAC3BA,kBAAM,IAAI,EAAC,MAAM,IAAE,IAAI,CAAQ,CAC1B,IACL,IAAI,EACRA,mEAAM,KAAK,EAAC,iBAAiB,IAAE,QAAQ,GAAGA,kBAAM,EAAE,EAAE,OAAO,iBAAY,KAAK,CAAQ,GAAG,IAAI,CAAQ,CAC5F,EACTA,kEAAK,KAAK,EAAC,kBAAkB,IAC3BA,oEAAa,CACT,EACL,QAAQ,IACPA,iBAAK,KAAK,EAAC,WAAW,EAAC,EAAE,EAAE,OAAO,IAC/B,KAAK,CACF,IACJ,IAAI,CACC,CACN,EACP;KACH;;;;;;;;;;","names":["hasSlot","initIdProps","h","Host"],"sources":["src/components/form/go-fieldset/go-fieldset.scss?tag=go-fieldset","src/components/form/go-fieldset/go-fieldset.tsx"],"sourcesContent":["@import '../../../global//scss/form/mixins';\n\ngo-fieldset {\n  display: block;\n  fieldset {\n    padding: 0;\n    border: none;\n    legend {\n      @include label-wrapper;\n    }\n    .fieldset-content {\n      display: grid;\n      gap: var(--input-gap-inner);\n      @include unstyled-list;\n    }\n  }\n\n  .go-field {\n    margin-top: 0;\n  }\n}\n","import { Component, Host, h, Element, Prop, State, Watch } from '@stencil/core';\nimport { hasSlot, initIdProps } from '../../../utils';\n\n@Component({\n  tag: 'go-fieldset',\n  styleUrl: 'go-fieldset.scss',\n  shadow: false,\n})\nexport class GoFieldset {\n  /**\n   * Label of the input field\n   */\n  @Prop() label: string;\n  /**\n   * Hint message for the input\n   */\n  @Prop() hint?: string;\n  /**\n   * Error state of input, text provided will be shown as error message\n   */\n  @Prop() error?: boolean | string;\n\n  id: string;\n\n  /**\n   * DOM id for label\n   */\n  @Prop({ mutable: true })\n  labelId?: string;\n\n  /**\n   * DOM id for hint message\n   */\n  @Prop({ mutable: true })\n  hintId?: string;\n\n  /**\n   * DOM id for error\n   */\n  @Prop({ mutable: true })\n  errorId?: string;\n\n  /**\n   * Wrap direct DOM children in an unordered list so they are announced by screen readers, good for checkboxes and radio buttons\n   */\n  @Prop()\n  isList?: boolean = false;\n\n  @Element() el: HTMLElement;\n\n  /**\n   * Allow empty value for `error` attribute and show error state\n   */\n  @State() hasError = false;\n\n  @Watch('error')\n  updateErrorState() {\n    this.hasError = typeof this.error !== 'undefined';\n  }\n\n  hasHintSlot: boolean;\n  componentWillLoad() {\n    this.hasHintSlot = hasSlot(this.el, 'hint');\n    initIdProps(this, this.el, ['label', 'hint', 'error'], 'go-fieldset-');\n    this.updateErrorState();\n  }\n\n  wrapChildrenInUl(div) {\n    // Create a new ul element\n    const ul = document.createElement('ul');\n    ul.classList.add('fieldset-content');\n    // Get the div's direct children\n    // we need to modify html structure, this will change the div.children reference.\n    // so make a new array to iterate against.\n\n    const children = [...div.children];\n    // Iterate over the children\n    for (let i = 0; i < children.length; i++) {\n      // Create a new li element\n      const li = document.createElement('li');\n      // Append the current child to the li element\n      li.appendChild(children[i]);\n      // Append the li element to the ul element\n      ul.appendChild(li);\n    }\n\n    // Replace the div with the ul element\n    div.parentNode.replaceChild(ul, div);\n  }\n\n  componentDidLoad() {\n    if (this.isList) {\n      this.wrapChildrenInUl(this.el.querySelector('.fieldset-content'));\n    }\n  }\n\n  render() {\n    const { label, error, hint, hasError, hasHintSlot, labelId, errorId, hintId } = this;\n    return (\n      <Host>\n        <fieldset\n          class={{\n            'go-field': true,\n            'error': hasError,\n          }}\n          aria-invalid={hasError}>\n          <legend>\n            {/* screen reader announcements */}\n            <span class=\"label\" id={labelId}>\n              {label}\n            </span>\n            {hasHintSlot || hint ? (\n              <span class=\"hint\" id={hintId}>\n                <slot name=\"hint\">{hint}</slot>\n              </span>\n            ) : null}\n            <span class=\"visually-hidden\">{hasError ? <span id={errorId}>Invalid: {error}</span> : null}</span>\n          </legend>\n          <div class=\"fieldset-content\">\n            <slot></slot>\n          </div>\n          {hasError ? (\n            <div class=\"error-msg\" id={errorId}>\n              {error}\n            </div>\n          ) : null}\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"],"version":3}