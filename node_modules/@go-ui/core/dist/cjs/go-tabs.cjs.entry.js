'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
require('./index-c48c451e.js');
const dom = require('./dom-7cff1398.js');
const uniqueId = require('./uniqueId-93e4ecef.js');

const goTabsCss = "go-tabs{--tab-padding:0.75rem 1.25rem;--tab-bg-color:transparent;--tab-hover-bg-color:var(--go-color-neutral-200);--tab-text-color:var(--go-color-neutral-700);--tab-focus-color:var(--go-color-primary-600);--tab-active-color:var(--go-color-primary-800);--tab-active-bg-color:transparent;--tab-border-width:0.2em;--tab-active-indicator-color:var(--tab-active-color);--tabs-active-indicator-width:0;--tabs-active-indicator-height:0.2em;--tabs-active-indicator-color:var(--tab-active-color);--tabs-vertical-tablist-max-width:25%;--tabs-tablist-gap:1rem}go-tabs.vertical{display:grid;grid-template-columns:minmax(-webkit-min-content, var(--tabs-vertical-tablist-max-width)) 1fr;grid-template-columns:minmax(min-content, var(--tabs-vertical-tablist-max-width)) 1fr;gap:var(--tabs-tablist-gap)}go-tabs.vertical [role=tablist] .tabs-active-indicator-track{width:auto;top:0;left:auto}go-tabs.vertical [role=tablist] .tabs-active-indicator-track .tabs-active-indicator{--tabs-active-indicator-width:0.25rem;transform:translateY(var(--tabs-active-indicator-top))}go-tabs.vertical [role=tab]{text-align:start;white-space:normal}go-tabs.vertical [role=tab]:focus-visible{border-top-color:transparent;border-left-color:var(--tab-focus-color)}";
const GoTabsStyle0 = goTabsCss;

const GoTabs = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.tabActivated = index.createEvent(this, "tabactivated", 7);
        this.activeIndex = -1;
        this.tabs = [];
        this.panels = [];
        this.tabGroupLabel = undefined;
        this.vertical = false;
        this.auto = false;
        this.justify = 'normal';
        this.fill = false;
        this.tabChildren = [];
        this.activeTabRect = undefined;
    }
    componentWillLoad() {
        this.initialiseTabChildren();
    }
    initIconSlot(goTab, slotName) {
        const iconEl = goTab.querySelector(`[slot="${slotName}"]`);
        if (!iconEl) {
            return;
        }
        let iconSlot = null;
        iconSlot = document.createElement('span');
        iconSlot.setAttribute('aria-hidden', 'true'); // icons are decorative only
        iconSlot.classList.add(`go-tab-${slotName}`);
        iconEl.removeAttribute('slot');
        dom.moveEl(iconEl, iconSlot);
        return iconSlot;
    }
    initialiseTabChildren() {
        const children = Array.from(this.el.querySelectorAll('go-tab'));
        if (children.length === 0) {
            return;
        }
        this.tabChildren = children.map((goTab) => {
            if (!goTab.tabId) {
                const tId = uniqueId.uniqueId('tab-');
                goTab.tabId = tId;
            }
            if (!goTab.panelId) {
                const pId = goTab.tabId + '-panel';
                goTab.panelId = pId;
            }
            const iconSlot = this.initIconSlot(goTab, 'icon');
            const iconActiveSlot = this.initIconSlot(goTab, 'icon-active');
            const { tabId, panelId, label, active, iconPosition, iconOnly } = goTab;
            return {
                tabId,
                panelId,
                label,
                active,
                iconPosition,
                iconOnly,
                iconSlot,
                iconActiveSlot,
            };
        });
        this.panels = children;
        // if no active tab set, activate first tab
        const activeIndex = this.tabChildren.findIndex((tab) => tab.active);
        if (activeIndex === -1) {
            this.tabChildren = this.tabChildren.map((tab, i) => (Object.assign(Object.assign({}, tab), { active: i === 0 })));
            this.panels[0].active = true;
        }
    }
    activateTab(event) {
        var _a;
        const { index, tabEl } = event.detail;
        this.panels.forEach((panel, i) => {
            if (i === index) {
                panel.setActive(true);
            }
            else {
                panel.setActive(false);
            }
        });
        this.tabActivated.emit({
            index,
            tabEl,
            panelEl: (_a = this.panels[index]) !== null && _a !== void 0 ? _a : null,
        });
    }
    render() {
        const { tabChildren, tabGroupLabel, vertical, auto, fill, justify } = this;
        return (index.h(index.Host, { key: 'e69e67af320678701b952e4a3f6cd35205ee650c', class: { vertical } }, index.h("go-tablist", { key: '0d0562c981057a2d43a3cad45642e99bb0c082d2', items: tabChildren, label: tabGroupLabel, auto: auto, fill: fill, vertical: vertical, justify: justify, onActivated: (e) => this.activateTab(e) }), index.h("slot", { key: '2d2d6814888e37a4686429d3404447b43b33b890' })));
    }
    get el() { return index.getElement(this); }
};
GoTabs.style = GoTabsStyle0;

exports.go_tabs = GoTabs;

//# sourceMappingURL=go-tabs.cjs.entry.js.map