{"file":"go-select.entry.cjs.js","mappings":"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","names":["parseJsonProp","uniqueId","inheritNonFieldAttrs","loadFieldSlots","loadFieldProps","h","fieldSlotNames"],"sources":["src/components/form/go-select/utils.ts","src/components/form/go-select/go-select.scss?tag=go-select","src/components/form/go-select/go-select.tsx"],"sourcesContent":["/**\n * This file is based on the good work of @smhigley:\n * https://github.com/microsoft/sonder-ui/blob/master/src/components/select/select.tsx\n */\n\nimport { SelectOption } from '@/interfaces';\nimport { parseJsonProp } from '@/utils';\n\nexport enum Keys {\n  Backspace = 'Backspace',\n  Clear = 'Clear',\n  Down = 'ArrowDown',\n  End = 'End',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Home = 'Home',\n  Left = 'ArrowLeft',\n  PageDown = 'PageDown',\n  PageUp = 'PageUp',\n  Right = 'ArrowRight',\n  Space = ' ',\n  Tab = 'Tab',\n  Up = 'ArrowUp',\n}\n\nexport enum MenuActions {\n  Close,\n  CloseSelect,\n  First,\n  Last,\n  Next,\n  Open,\n  PageDown,\n  PageUp,\n  Previous,\n  Select,\n  Space,\n  Type,\n}\n\nexport enum TreeActions {\n  Close,\n  First,\n  Last,\n  Next,\n  Open,\n  Previous,\n  Select,\n  UpLevel,\n}\n\n// filter an array of options against an input string\n// returns an array of options that begin with the filter string, case-independent\nexport function filterOptions(\n  options: SelectOption[] = [],\n  filter: string,\n  exclude: SelectOption[] = [],\n): SelectOption[] {\n  let filterString = filter.toLowerCase().trim();\n  return options.filter((option) => {\n    const matches = option.label.toLowerCase().indexOf(filterString) === 0;\n    return matches && exclude.indexOf(option) < 0;\n  });\n}\n\n// return an array of exact option name matches from a comma-separated string\nexport function findMatches(options: SelectOption[], search: string): SelectOption[] {\n  const labels = search.split(',');\n  return labels\n    .map((label) => {\n      const match = options.filter((option) => label.trim().toLowerCase() === option.label.toLowerCase());\n      return match.length > 0 ? match[0] : null;\n    })\n    .filter((option) => option !== null);\n}\n\n// return combobox action from key press\nexport function getActionFromKey(event: KeyboardEvent, menuOpen: boolean): MenuActions {\n  const { key, altKey, ctrlKey, metaKey } = event;\n  const openKeys = ['ArrowDown', 'ArrowUp', 'Enter', ' ', 'Home', 'End']; // all keys that will open the combo\n\n  // handle opening when closed\n  if (!menuOpen && openKeys.includes(key)) {\n    return MenuActions.Open;\n  }\n\n  // handle typing characters when open or closed\n  if (\n    key === Keys.Backspace ||\n    key === Keys.Clear ||\n    (key.length === 1 && key !== ' ' && !altKey && !ctrlKey && !metaKey)\n  ) {\n    return MenuActions.Type;\n  }\n\n  // handle keys when open\n  if (menuOpen) {\n    if ((key === Keys.Down && !altKey) || key === Keys.Right) {\n      return MenuActions.Next;\n    } else if (key === Keys.Up && altKey) {\n      return MenuActions.CloseSelect;\n    } else if (key === Keys.Up || key === Keys.Left) {\n      return MenuActions.Previous;\n    } else if (key === Keys.Home) {\n      return MenuActions.First;\n    } else if (key === Keys.End) {\n      return MenuActions.Last;\n    } else if (key === Keys.PageUp) {\n      return MenuActions.PageUp;\n    } else if (key === Keys.PageDown) {\n      return MenuActions.PageDown;\n    } else if (key === Keys.Escape) {\n      return MenuActions.Close;\n    } else if (key === Keys.Enter) {\n      return MenuActions.CloseSelect;\n    } else if (key === Keys.Space) {\n      return MenuActions.Space;\n    }\n  }\n}\n\n// return the index of an option from an array of options, based on a search string\n// if the filter is multiple iterations of the same letter (e.g \"aaa\"), then cycle through first-letter matches\nexport function getIndexByLetter(options: SelectOption[], filter: string, startIndex = 0): number {\n  const orderedOptions = [...options.slice(startIndex), ...options.slice(0, startIndex)];\n  const firstMatch = filterOptions(orderedOptions, filter)[0];\n  const allSameLetter = (array) => array.every((letter) => letter === array[0]);\n\n  // first check if there is an exact match for the typed string\n  if (firstMatch) {\n    return options.indexOf(firstMatch);\n  }\n\n  // if the same letter is being repeated, cycle through first-letter matches\n  else if (allSameLetter(filter.split(''))) {\n    const matches = filterOptions(orderedOptions, filter[0]);\n    return options.indexOf(matches[0]);\n  }\n\n  // if no matches, return -1\n  else {\n    return -1;\n  }\n}\n\n// get updated option index\nexport function getUpdatedIndex(current: number, max: number, action: MenuActions): number {\n  switch (action) {\n    case MenuActions.First:\n      return 0;\n    case MenuActions.Last:\n      return max;\n    case MenuActions.Previous:\n      return Math.max(0, current - 1);\n    case MenuActions.Next:\n      return Math.min(max, current + 1);\n    default:\n      return current;\n  }\n}\n\n// check if an element is currently scrollable\nexport function isScrollable(element: HTMLElement): boolean {\n  return element && element.clientHeight < element.scrollHeight;\n}\n\n// ensure given child element is within the parent's visible scroll area\nexport function maintainScrollVisibility(activeElement: HTMLElement, scrollParent: HTMLElement) {\n  const { offsetHeight, offsetTop } = activeElement;\n  const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent;\n\n  const isAbove = offsetTop < scrollTop;\n  const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n  if (isAbove) {\n    scrollParent.scrollTo(0, offsetTop);\n  } else if (isBelow) {\n    scrollParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n  }\n}\n\n/**\n * parse multiple formats of options prop into SelectOption[]\n */\nexport const parseSelectOptions = (options: string | string[] | SelectOption[]): SelectOption[] | null => {\n  try {\n    // vue passes array of strings into prop as the result of Array.toString()\n    console.log('parseSelectOptions', { options });\n    if (typeof options === 'string' && !options.startsWith('[')) {\n      options = options.split(',');\n    }\n\n    const parsedOptions = parseJsonProp<SelectOption[] | string[]>(options);\n    if (parsedOptions) {\n      // format parsed options into SelectOption[]\n      return parsedOptions.map((option) =>\n        typeof option === 'string'\n          ? {\n              value: option,\n              label: option,\n            }\n          : option,\n      );\n    }\n  } catch (e) {\n    console.error(`Couldn't parse options: `, options, { e });\n  }\n};\n","@import '../../../global/scss/dropdown/mixins';\n\ngo-select {\n  @include dropdown-item-vars;\n  --dropdown-width: 100%;\n\n  .combo {\n    width: 100%;\n    position: relative;\n  }\n  .control-icon {\n    z-index: 1;\n  }\n  .control {\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    .arrow {\n      height: 1.5em;\n      @include transition(transform);\n      &.open {\n        transform: rotate(180deg);\n      }\n    }\n  }\n\n  go-dropdown {\n    max-height: 20rem;\n    overflow: auto;\n    z-index: 9;\n  }\n\n  .combo-option {\n    @include dropdown-item;\n\n    &[aria-selected] {\n      @include item-selected-state;\n    }\n  }\n\n  &[disabled] {\n    .combo-option {\n      @include item-disabled-state;\n    }\n  }\n}\n","import { Component, h, Element, Prop, State, Event, EventEmitter, Watch } from '@stencil/core';\nimport { FieldValue, GoChangeEventDetail, SelectOption, SelectProps } from '@/interfaces';\nimport { fieldSlotNames, inheritNonFieldAttrs, loadFieldSlots, loadFieldProps } from '@/utils';\nimport {\n  getActionFromKey,\n  getIndexByLetter,\n  getUpdatedIndex,\n  isScrollable,\n  maintainScrollVisibility,\n  MenuActions,\n  parseSelectOptions,\n} from './utils';\nimport { uniqueId } from 'lodash-es';\n\n@Component({\n  tag: 'go-select',\n  styleUrl: 'go-select.scss',\n  shadow: false,\n})\nexport class GoSelect implements SelectProps {\n  @Element() el: HTMLElement;\n\n  @Prop() name: string;\n  @Prop() label: string;\n  @Prop() labelId?: string;\n  @Prop() suffixId?: string;\n  @Prop() hintId?: string;\n  @Prop() errorId?: string;\n  @Prop() disabled?: boolean;\n  @Prop() hint?: string;\n  @Prop() error?: string | boolean;\n  @Prop() readonly?: boolean;\n  @Prop({ mutable: true }) value?: FieldValue;\n\n  /**\n   * Array of options.\n   * Note:\n   * Sometimes frameworks may incorrectly pass the result of Array.toString() into this prop,\n   * `go-select` tries to obsorb this issue by trying to do a `split(',')` on the options prop\n   * if a string is passed in.\n   * This means the accepted formats include:\n   * 1. array of objects of type `{label: string, value: string}`\n   * 2. array of strings (e.g. ['Apple', 'Orange', 'Banana'])\n   * 3. string, toString() result of format 2 (i.e. 'Apple,Orange,Banana')\n   * 4. string, option 1 or 2 passed in as string that can be parsed by [JSON5](https://json5.org/)\n   */\n  @Prop() options: SelectOption[] | string[] | string;\n\n  /**\n   * parsed options array\n   */\n  @State() parsedOptions: SelectOption[] = [];\n\n  /**\n   * common form control properties\n   */\n  @State() attrs: any;\n\n  hasNamedSlot: { [key: string]: boolean } = {};\n  prefixer = 'go-select-';\n  controlId = uniqueId(this.prefixer);\n  controlEl: HTMLElement;\n\n  async componentWillLoad() {\n    this.loadOptions();\n    this.attrs = inheritNonFieldAttrs(this, ['options']);\n    this.hasNamedSlot = loadFieldSlots(this.el);\n    if (this.value) {\n      this.loadValue();\n    }\n  }\n\n  @Watch('options')\n  loadOptions() {\n    this.parsedOptions = parseSelectOptions(this.options);\n  }\n\n  @Watch('value')\n  loadValue() {\n    this.activeIndex = this.parsedOptions.findIndex((option) => option.value === this.value);\n    this.selectOption(this.activeIndex);\n  }\n\n  /**\n   * Emit custom event with selected value\n   */\n  @Event({\n    eventName: 'gochange',\n  })\n  goChange: EventEmitter<GoChangeEventDetail<string>>;\n\n  // Active option index\n  @State() activeIndex = -1;\n\n  // Menu state\n  @State() open = false;\n\n  // Current accumulated search string\n  @State() searchString: string;\n\n  // Timeout after each typed character\n  @State() searchTimeout: number | null;\n\n  // Selected option index\n  @State() selectedIndex: number;\n\n  // input value\n  @State() selectedLabel = '';\n\n  @State() dropdownWidth = 'auto';\n\n  // save reference to active option\n  private activeOptionRef: HTMLElement;\n\n  // Prevent menu closing before click completed\n  private ignoreBlur = false;\n\n  // save reference to combobox element\n  private inputRef: HTMLElement;\n\n  // save reference to listbox\n  private listboxRef: HTMLGoDropdownElement;\n\n  @Watch('open')\n  handleDomOnOpen(isOpen) {\n    if (isOpen) {\n      this.listboxRef.open();\n      // adjust dropdown size\n      // - we use fixed positioning strategy to make dropdown \"break out\" of the clipping containers, now we need to calculate dropdown width up opening\n      // see https://floating-ui.com/docs/computePosition#strategy\n      if (this.inputRef) {\n        this.dropdownWidth = `${this.inputRef.offsetWidth}px`;\n      }\n      if (isScrollable(this.listboxRef) && this.activeOptionRef) {\n        maintainScrollVisibility(this.activeOptionRef, this.listboxRef);\n      }\n    } else {\n      this.listboxRef.close();\n    }\n  }\n\n  render() {\n    const {\n      parsedOptions,\n      activeIndex,\n      controlId: id,\n      open = false,\n      dropdownWidth,\n      value,\n      readonly,\n      disabled,\n      name,\n      attrs,\n    } = this;\n\n    const fieldProps = loadFieldProps(this);\n\n    const activeId = open ? `${id}-${activeIndex}` : '';\n\n    const controlAttrs = {\n      id,\n      name,\n      value,\n      ...attrs,\n    };\n    return [\n      <input type=\"hidden\" name={name} value={value} />,\n      <go-field {...fieldProps}>\n        {fieldSlotNames.map((slotName) => {\n          if (this.hasNamedSlot[slotName]) {\n            return (\n              <template slot={slotName}>\n                <slot name={slotName}></slot>\n              </template>\n            );\n          }\n        })}\n        <div class=\"combo\">\n          <div\n            {...controlAttrs}\n            role=\"combobox\"\n            aria-activedescendant={activeId}\n            aria-autocomplete=\"none\"\n            aria-haspopup=\"listbox\"\n            aria-expanded={`${open}`}\n            aria-labelledby={`${id} ${id}-value`}\n            aria-controls={`${id}-listbox`}\n            aria-disabled={disabled ? 'true' : undefined}\n            aria-readonly={readonly ? 'true' : undefined}\n            class=\"control\"\n            id={`${id}-value`}\n            ref={(el) => (this.inputRef = el)}\n            tabindex=\"0\"\n            onBlur={this.onComboBlur.bind(this)}\n            onKeyDown={this.onComboKeyDown.bind(this)}>\n            <span>{parsedOptions && parsedOptions[activeIndex]?.label ? parsedOptions[activeIndex].label : ''}</span>\n            <svg\n              class={{ arrow: true, open }}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              aria-hidden=\"true\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              viewBox=\"0 0 24 24\">\n              <path d=\"m6 9 6 6 6-6\" />\n            </svg>\n          </div>\n          <go-dropdown\n            disabled={readonly || disabled}\n            trigger-selector={`#${id}-value`}\n            width={dropdownWidth}\n            onOpened={() => {\n              this.updateMenuState(true);\n            }}\n            onClosed={() => {\n              this.updateMenuState(false);\n            }}\n            role=\"listbox\"\n            ref={(el) => (this.listboxRef = el)}\n            id={`${id}-listbox`}>\n            {parsedOptions &&\n              parsedOptions.map((option, i) => {\n                return (\n                  <div\n                    class={{ 'current': this.activeIndex === i, 'combo-option': true }}\n                    id={`${id}-${i}`}\n                    aria-selected={this.activeIndex === i ? 'true' : undefined}\n                    ref={(el) => {\n                      if (this.activeIndex === i) {\n                        this.activeOptionRef = el;\n                      }\n                    }}\n                    role=\"option\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      this.onOptionClick(i);\n                    }}\n                    onMouseDown={this.onOptionMouseDown.bind(this)}>\n                    {option.label}\n                  </div>\n                );\n              })}\n          </go-dropdown>\n        </div>\n      </go-field>,\n    ];\n  }\n\n  private getSearchString(char: string) {\n    // reset typing timeout and start new timeout\n    // this allows us to make multiple-letter matches, like a native select\n    if (typeof this.searchTimeout === 'number') {\n      window.clearTimeout(this.searchTimeout);\n    }\n\n    this.searchTimeout = window.setTimeout(() => {\n      this.searchString = '';\n    }, 500);\n\n    // add most recent letter to saved search string\n    this.searchString += char;\n    return this.searchString;\n  }\n\n  private onComboKeyDown(event: KeyboardEvent) {\n    if (!this.parsedOptions) {\n      return;\n    }\n    const { key } = event;\n    const max = this.parsedOptions.length - 1;\n\n    const action = getActionFromKey(event, this.open);\n\n    switch (action) {\n      case MenuActions.Next:\n      case MenuActions.Last:\n      case MenuActions.First:\n      case MenuActions.Previous:\n        event.preventDefault();\n        return this.onOptionChange(getUpdatedIndex(this.activeIndex, max, action));\n      case MenuActions.CloseSelect:\n      case MenuActions.Space:\n        event.preventDefault();\n        this.selectOption(this.activeIndex);\n      case MenuActions.Close:\n        event.preventDefault();\n        return this.updateMenuState(false);\n      case MenuActions.Type:\n        // this.activeIndex = Math.max(0, getIndexByLetter(this.options, key));\n        this.onComboType(key);\n      case MenuActions.Open:\n        event.preventDefault();\n        return this.updateMenuState(true);\n    }\n  }\n\n  private onComboBlur() {\n    if (this.ignoreBlur) {\n      this.ignoreBlur = false;\n      return;\n    }\n\n    if (this.open) {\n      this.selectOption(this.activeIndex);\n      this.updateMenuState(false, false);\n    }\n  }\n\n  private onComboType(letter: string) {\n    // open the listbox if it is closed\n    this.updateMenuState(true);\n\n    // find the index of the first matching option\n    const searchString = this.getSearchString(letter);\n    const searchIndex = getIndexByLetter(this.parsedOptions, searchString, this.activeIndex + 1);\n\n    // if a match was found, go to it\n    if (searchIndex >= 0) {\n      this.onOptionChange(searchIndex);\n    }\n  }\n\n  private onOptionChange(index: number) {\n    this.activeIndex = index;\n  }\n\n  private onOptionClick(index: number) {\n    this.onOptionChange(index);\n    this.selectOption(index);\n    this.updateMenuState(false);\n  }\n\n  private onOptionMouseDown() {\n    this.ignoreBlur = true;\n  }\n\n  private selectOption(index: number) {\n    if (index < 0) {\n      return;\n    }\n    const selected = this.parsedOptions[index];\n    this.selectedLabel = selected.label;\n    this.selectedIndex = index;\n    this.value = selected.value;\n\n    this.goChange.emit({ value: selected.value });\n  }\n\n  private updateMenuState(open: boolean, callFocus = true) {\n    if (open && (this.readonly || this.disabled)) {\n      return;\n    }\n    this.open = open;\n    if (callFocus) {\n      this.inputRef.focus();\n    }\n  }\n}\n"],"version":3}