'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
const form = require('./form-6e13a9ec.js');
require('./index-c48c451e.js');
const uniqueId = require('./uniqueId-93e4ecef.js');
require('./helper-c1931cd5.js');
require('./kebabCase-f98d4407.js');

const GoInput = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.prefixer = 'go-input-';
        this.hasNamedSlot = {};
        this.controlId = uniqueId.uniqueId(this.prefixer);
        this.labelId = undefined;
        this.prefixId = undefined;
        this.suffixId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.readonly = undefined;
        this.value = undefined;
        this.attrs = undefined;
    }
    componentWillLoad() {
        this.attrs = form.inheritNonFieldAttrs(this);
        this.hasNamedSlot = form.loadFieldSlots(this.el);
    }
    render() {
        const { controlId, value, attrs } = this;
        const fieldProps = form.loadFieldProps(this);
        return (index.h("go-field", Object.assign({ key: 'f241607f6611a1b569cd8db660f5ea5822b99439' }, fieldProps), form.fieldSlotNames.map((slotName) => {
            if (this.hasNamedSlot[slotName]) {
                return (index.h("template", { slot: slotName }, index.h("slot", { name: slotName })));
            }
        }), index.h("input", Object.assign({ key: 'a1e98dc2f7d16dd83437185dfb94225621d58ba3' }, fieldProps, attrs, { class: "control", ref: (el) => (this.controlEl = el), id: controlId, value: value, onInput: (e) => (this.value = e.target.value) }))));
    }
    get el() { return index.getElement(this); }
};

exports.go_input = GoInput;

//# sourceMappingURL=go-input.cjs.entry.js.map