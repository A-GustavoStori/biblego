'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
const helper = require('./helper-c1931cd5.js');
require('./index-c48c451e.js');
require('./uniqueId-93e4ecef.js');

const goFieldCss = "go-field{display:block}";
const GoFieldStyle0 = goFieldCss;

const GoField = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.idPrefix = undefined;
        this.controlId = undefined;
        this.labelId = undefined;
        this.prefixId = undefined;
        this.suffixId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.readonly = undefined;
        this.hasError = false;
        this.hiddenInputName = undefined;
        this.hiddenInputValue = undefined;
        this.controlElSelector = '.control';
    }
    updateErrorState() {
        this.hasError = !!this.error;
    }
    componentWillLoad() {
        this.hasIconBefore = helper.hasSlot(this.el, 'icon-before');
        this.hasIconAfter = helper.hasSlot(this.el, 'icon-after');
        this.hasPrefix = helper.hasSlot(this.el, 'prefix');
        this.hasSuffix = helper.hasSlot(this.el, 'suffix');
        this.hasHintSlot = helper.hasSlot(this.el, 'hint');
        this.hasLabelSlot = helper.hasSlot(this.el, 'label');
        helper.initIdProps(this, this.el, ['label', 'prefix', 'suffix', 'hint', 'error'], this.idPrefix);
        this.updateErrorState();
    }
    componentDidLoad() {
        this.updateAttributes();
    }
    componentDidUpdate() {
        this.updateAttributes();
    }
    updateAttributes() {
        if (!this.controlEl) {
            this.controlEl = this.el.querySelector(this.controlElSelector);
            if (!this.controlEl) {
                helper.warning(`Cannot find field control based on selector ${this.controlElSelector}. Make sure the element exists in the DOM`);
                return;
            }
        }
        const { hasPrefix, hasSuffix, prefixId, suffixId, labelId, hasHintSlot, hint, hintId, hasError, errorId } = this;
        const labelledByIds = [];
        if (hasPrefix) {
            labelledByIds.push(prefixId);
        }
        labelledByIds.push(labelId);
        if (hasSuffix) {
            labelledByIds.push(suffixId);
        }
        const describedByIds = [];
        if (hasHintSlot || hint) {
            describedByIds.push(hintId);
        }
        if (hasError) {
            describedByIds.push(errorId);
        }
        if (this.disabled) {
            this.controlEl.setAttribute('disabled', 'true');
            this.controlEl.setAttribute('aria-disabled', 'true');
        }
        else {
            this.controlEl.removeAttribute('disabled');
            this.controlEl.removeAttribute('aria-disabled');
        }
        this.controlEl.setAttribute('aria-labelledby', labelledByIds.join(' '));
        this.controlEl.setAttribute('aria-describedby', describedByIds.join(' '));
    }
    render() {
        const { controlId, label, hasLabelSlot, hint, disabled, hasError, error, readonly, hasIconAfter, hasIconBefore, hasPrefix, hasSuffix, hasHintSlot, labelId, hintId, prefixId, suffixId, errorId, hiddenInputName, hiddenInputValue, } = this;
        const showLabel = hasLabelSlot || label;
        const showHint = hasHintSlot || hint;
        const showLabelWrapper = showLabel || showHint;
        return (index.h(index.Host, { key: '829a119b4fdb8ffbd019bd7d2f552abffda51511', class: {
                'go-field': true,
                'error': hasError,
                'readonly': !!readonly,
                'disabled': !!disabled,
                'has-prefix': hasPrefix,
                'has-suffix': hasSuffix,
                'has-icon-before': hasIconBefore,
                'has-icon-after': hasIconAfter,
            } }, showLabelWrapper ? (index.h("div", { class: "label-wrapper" }, showLabel ? (index.h("label", { class: "label", htmlFor: controlId, id: labelId }, label)) : null, showHint ? (index.h("div", { class: "hint", id: hintId }, index.h("slot", { name: "hint" }, hint))) : null)) : null, index.h("div", { key: '9317a3a4286142d0bcb0fc2101ecbef271aeed88', class: "control-wrapper" }, hasPrefix ? (index.h("span", { class: "prefix presuf", "aria-hidden": "true", id: prefixId }, index.h("slot", { name: "prefix" }))) : null, hasIconBefore ? (index.h("span", { class: "control-icon icon-before" }, index.h("slot", { name: "icon-before" }))) : null, index.h("slot", { key: 'eb0c667cae9fed3096a0fcb3df858de274b7081a' }), hasSuffix ? (index.h("span", { class: "suffix presuf", "aria-hidden": "true", id: suffixId }, index.h("slot", { name: "suffix" }))) : null, readonly || hasIconAfter ? (index.h("span", { class: "control-icon icon-after" }, readonly ? (
        // prettier-ignore
        index.h("svg", { class: "lock-icon", "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24" }, index.h("g", { fill: "none" }, index.h("path", { d: "M0 0h24v24H0V0z" }), index.h("path", { d: "M0 0h24v24H0V0z", opacity: ".87" })), index.h("path", { d: "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z" }))) : (index.h("slot", { name: "icon-after" })))) : null), hasError ? (index.h("div", { id: errorId, class: "error-msg" }, error)) : null, hiddenInputName ? index.h("input", { type: "hidden", name: hiddenInputName, value: hiddenInputValue }) : null));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "error": ["updateErrorState"]
    }; }
};
GoField.style = GoFieldStyle0;

exports.go_field = GoField;

//# sourceMappingURL=go-field.cjs.entry.js.map