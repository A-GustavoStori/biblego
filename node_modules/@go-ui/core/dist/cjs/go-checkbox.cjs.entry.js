'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
const helper = require('./helper-c1931cd5.js');
require('./index-c48c451e.js');
require('./uniqueId-93e4ecef.js');

const goCheckboxCss = "go-checkbox{--cb-border-color:var(--input-border-color);--cb-border-width:0.125rem;--cb-border:var(--cb-border-width) solid var(--cb-border-color);--cb-border-color-hover:var(--go-color-neutral-700);--cb-size:1.5rem;--cb-radius:var(--input-radius);--cb-checked-bg:var(--control-selected-bg-color);--cb-checked-text:var(--control-selected-fg-color);--cb-mark-shadow-inner:0.0625rem 0.0625rem 0.125rem rgba(0, 0, 0, 0.4)}go-checkbox .control-wrapper{display:flex;align-items:flex-start;gap:var(--input-gap-inner)}go-checkbox input,go-checkbox label{cursor:pointer}go-checkbox[error]{color:var(--input-error-color);--input-hint-color:var(--input-error-color);--cb-border-color:var(--input-error-color)}go-checkbox[error] .control{--input-border-color:var(--input-error-color);border-color:var(--input-error-color)}go-checkbox[error] input:checked~.mark{--cb-checked-bg:var(--input-error-color)}go-checkbox[error] .error-msg{margin:var(--input-gap-inner) 0}go-checkbox[disabled] input,go-checkbox[disabled] label{cursor:not-allowed}go-checkbox[disabled] .box .mark{background:var(--input-bg-disabled-color);stroke:var(--input-text-disabled-color);border-color:var(--input-text-disabled-color)}go-checkbox label{margin:0;font-size:var(--go-size-0);font-weight:400;line-height:1.5;line-height:var(--cb-size)}go-checkbox label~.hint{margin-top:0.25rem}go-checkbox :where(.box){flex-shrink:0;flex-grow:0;position:relative;width:var(--cb-size);height:var(--cb-size)}go-checkbox :where(.box) .mark{display:block;stroke:var(--cb-checked-text);border:var(--cb-border);border-radius:var(--cb-radius);stroke-dasharray:24;stroke-dashoffset:-24;transition:background-color var(--go-duration-fast) ease var(--go-duration-fast), stroke-dashoffset var(--go-duration-fast) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-checkbox :where(.box) .mark{transition-duration:0s}}go-checkbox :where(.box) input~.mark.minus{display:none}go-checkbox :where(.box) input:checked~.mark{transition:background-color var(--go-duration-fast) var(--go-timing-function), stroke-dashoffset var(--go-duration-fast) ease var(--go-duration-fast);stroke-dashoffset:0;background:var(--cb-checked-bg);border-color:var(--cb-checked-bg)}@media (prefers-reduced-motion: reduce){go-checkbox :where(.box) input:checked~.mark{transition-duration:0s}}go-checkbox :where(.box) input:checked~.mark path{filter:drop-shadow(var(--cb-mark-shadow-inner))}go-checkbox :where(.box) input:checked~.mark.minus{display:none}go-checkbox :where(.box) input:checked~.mark.tick{display:block}go-checkbox :where(.box) input:indeterminate~.mark{background:var(--cb-checked-bg);border-color:var(--cb-checked-bg);stroke-dashoffset:0}go-checkbox :where(.box) input:indeterminate~.mark path{filter:drop-shadow(var(--cb-mark-shadow-inner))}go-checkbox :where(.box) input:indeterminate~.mark.minus{display:block}go-checkbox :where(.box) input:indeterminate~.mark.tick{display:none}go-checkbox :where(.box) input:not(:disabled):hover:not(:checked)~.mark{border-color:var(--cb-border-color-hover)}go-checkbox :where(.box) input:not(:disabled):hover:checked~.mark,go-checkbox :where(.box) input:not(:disabled):focus-visible~.mark{outline:var(--go-focus-outline-width, 2px) solid var(--go-focus-outline-color, #000);outline-offset:var(--go-focus-outline-offset)}go-checkbox :where(.box) input:not(:disabled):active~.mark{box-shadow:var(--input-focus-shadow);outline-offset:0}go-checkbox .hint{color:var(--input-hint-color);line-height:1;font-size:var(--input-hint-font-size)}go-checkbox .hint:last-child{margin-bottom:0}";
const GoCheckboxStyle0 = goCheckboxCss;

const GoCheckbox = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.checked = undefined;
        this.indeterminate = undefined;
        this.name = undefined;
        this.disabled = undefined;
        this.value = undefined;
        this.label = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.hasError = false;
    }
    updateErrorState() {
        this.hasError = typeof this.error !== 'undefined';
    }
    handleChange(e) {
        this.checked = e.target.checked;
    }
    componentWillLoad() {
        this.hasHintSlot = helper.hasSlot(this.el, 'hint');
        helper.initIdProps(this, this.el, ['hint', 'error', 'control'], 'go-checkbox-');
        this.updateErrorState();
    }
    render() {
        const { label, error, controlId, hint, hintId, hasHintSlot, checked, indeterminate, name, disabled, value, hasError, errorId, } = this;
        const describedByIds = [];
        if (hasHintSlot || hint) {
            describedByIds.push(hintId);
        }
        if (hasError) {
            describedByIds.push(errorId);
        }
        const props = {
            id: controlId,
            checked,
            indeterminate,
            name,
            disabled,
            value,
        };
        return (index.h(index.Host, { key: 'b87c6c435899a9f87eaefa9609a5abd29acf1dd9', class: {
                error: hasError,
                disabled: !!disabled,
                indeterminate: !!indeterminate,
            } }, index.h("div", { key: 'a41ce882a414b675265b8aee482eab553c840622', class: "control-wrapper" }, index.h("div", { key: '3618ffcd6af422a222b07cd5d276b726c2f001bd', class: "box" }, index.h("input", Object.assign({ key: '8ea710ee7957ce8112416e0e4308edd0b611c573', class: "hidden-control", type: "checkbox" }, props, { "aria-invalid": String(hasError), "aria-describedby": describedByIds.join(' '), onChange: (e) => this.handleChange(e) })), index.h("svg", { key: 'd20b9aec0cdc299e07b5b7cc0d9ceca1e261e960', xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", viewBox: "0 0 24 24", class: "mark minus" }, index.h("path", { key: '62bd58c79683e2e4175c60f5f28606f3abd79e7e', d: "M5 12h14" })), index.h("svg", { key: '23549e1bb92c58f6d10dd7d6bc3d40e6e3896b79', xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", viewBox: "0 0 24 24", class: "mark tick" }, index.h("path", { key: 'fbba4f96c0f81fd921932fd81a0b47f99abac9fb', d: "M20 6 9 17l-5-5" }))), index.h("div", { key: '1c92e97e04d7429b8d5f1d0cfc5be7c62b14221d', class: "text" }, index.h("label", { key: 'ad1d64906487108c02211c0776bf3fc10fe68f23', htmlFor: controlId }, label), hasHintSlot || hint ? (index.h("div", { class: "hint", id: hintId }, index.h("slot", { name: "hint" }, hint))) : null)), hasError ? (index.h("div", { class: "error-msg", id: errorId }, error)) : null));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "error": ["updateErrorState"]
    }; }
};
GoCheckbox.style = GoCheckboxStyle0;

exports.go_checkbox = GoCheckbox;

//# sourceMappingURL=go-checkbox.cjs.entry.js.map