{"file":"go-textarea.entry.cjs.js","mappings":";;;;;;;;;;;AAAA,MAAM,aAAa,GAAG,4lDAA4lD,CAAC;AACnnD,yBAAe,aAAa;;MCQf,UAAU;;;QA+DrB,iBAAY,GAA+B,EAAE,CAAC;QAC9C,aAAQ,GAAG,cAAc,CAAC;QAC1B,cAAS,GAAGA,iBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;;;wBAJP,KAAK;;;IAWlC,iBAAiB;QACf,IAAI,CAAC,KAAK,GAAGC,yBAAoB,CAAC,IAAI,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;QACvD,IAAI,CAAC,YAAY,GAAGC,mBAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC7C;IAGD,mBAAmB;QACjB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACnC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YACrC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC;SAClE;KACF;IAED,MAAM;;QACJ,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAC7C,MAAM,UAAU,GAAGC,mBAAc,CAAC,IAAI,CAAC,CAAC;QACxC,QACEC,uFAAc,UAAU,GACrBC,mBAAc,CAAC,GAAG,CAAC,CAAC,QAAQ;YAC3B,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;gBAC/B,QACED,sBAAU,IAAI,EAAE,QAAQ,IACtBA,kBAAM,IAAI,EAAE,QAAQ,GAAS,CACpB,EACX;aACH;SACF,CAAC,EAEFA,uFACM,UAAU,EACV,KAAK,IACT,GAAG,EAAE,CAAC,EAAE,MAAM,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,EAClC,EAAE,EAAE,EAAE,EACN,KAAK,EAAC,SAAS,EACf,IAAI,EAAE,CAAC,EACP,OAAO,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,KAAK,GAAI,CAAC,CAAC,MAA8B,CAAC,KAAK,CAAC,KACrE,KAAK,CACG,EACV,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC,IACrCA,kBAAM,KAAK,EAAC,gBAAgB,IACzB,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,mCAAI,CAAC,OAAG,KAAK,CAAC,SAAS,EACrCA,kBAAM,KAAK,EAAC,iBAAiB,eAAW,WAAW,EAAC,IAAI,EAAC,OAAO,IAC7D,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,MAAK,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;cACtC,qCAAqC,KAAK,CAAC,SAAS,4BAA4B;cAChF,EAAE,CACD,CACF,IACL,IAAI,CACC,EACX;KACH;;;;;;;;;;","names":["uniqueId","inheritNonFieldAttrs","loadFieldSlots","loadFieldProps","h","fieldSlotNames"],"sources":["src/components/form/go-textarea/go-textarea.scss?tag=go-textarea","src/components/form/go-textarea/go-textarea.tsx"],"sourcesContent":["@import '../../../global/scss/form/variables';\n@import '../../../global/scss/form/mixins';\ngo-textarea {\n  display: block;\n\n  textarea {\n    overflow: auto;\n    resize: vertical;\n    &:disabled,\n    &:read-only {\n      resize: none;\n    }\n  }\n  .textarea-count {\n    @include hint;\n    margin-top: var(--input-gap-inner);\n    margin-bottom: 0;\n  }\n}\n","import { Component, h, Element, Prop, Watch, State } from '@stencil/core';\nimport { TextareaProps } from '../../../interfaces';\nimport { uniqueId } from 'lodash-es';\nimport { fieldSlotNames, inheritNonFieldAttrs, loadFieldProps, loadFieldSlots } from '../../../utils';\n@Component({\n  tag: 'go-textarea',\n  styleUrl: 'go-textarea.scss',\n  shadow: false,\n})\nexport class GoTextarea implements TextareaProps {\n  @Element() el: HTMLElement;\n  /**\n   * DOM id for label\n   */\n  @Prop() labelId?: string;\n\n  /**\n   * DOM id for prefix\n   */\n  @Prop() prefixId?: string;\n\n  /**\n   * DOM id for suffix\n   */\n  @Prop() suffixId?: string;\n  /**\n   * DOM id for hint message\n   */\n  @Prop() hintId?: string;\n\n  /**\n   * DOM id for error\n   */\n  @Prop() errorId?: string;\n\n  /**\n   * Name of the input field\n   */\n  @Prop() name: string;\n\n  /**\n   * Label of the input field\n   */\n  @Prop() label: string;\n\n  /**\n   * If the input is disabled\n   */\n  @Prop() disabled?: boolean;\n  /**\n   * Hint message for the input\n   */\n  @Prop() hint?: string;\n  /**\n   * Error state of input, text provided will be shown as error message\n   */\n  @Prop() error?: boolean | string;\n  /**\n   * If this input is read-only\n   */\n  @Prop() readonly?: boolean;\n\n  /**\n   * Value of the input field\n   */\n  @Prop({ mutable: true }) value?: string;\n\n  /**\n   * If set, grow textarea based on its content\n   */\n  @Prop() autoGrow?: boolean = false;\n\n  hasNamedSlot: { [key: string]: boolean } = {};\n  prefixer = 'go-textarea-';\n  controlId = uniqueId(this.prefixer);\n  controlEl: HTMLTextAreaElement;\n  /**\n   * keep track of non-field attrs\n   */\n  @State() attrs: any;\n\n  componentWillLoad() {\n    this.attrs = inheritNonFieldAttrs(this, ['auto-grow']);\n    this.hasNamedSlot = loadFieldSlots(this.el);\n  }\n\n  @Watch('value')\n  updateControlHeight() {\n    if (this.autoGrow && this.controlEl) {\n      this.controlEl.style.height = 'auto';\n      this.controlEl.style.height = this.controlEl.scrollHeight + 'px';\n    }\n  }\n\n  render() {\n    const { value, controlId: id, attrs } = this;\n    const fieldProps = loadFieldProps(this);\n    return (\n      <go-field {...fieldProps}>\n        {fieldSlotNames.map((slotName) => {\n          if (this.hasNamedSlot[slotName]) {\n            return (\n              <template slot={slotName}>\n                <slot name={slotName}></slot>\n              </template>\n            );\n          }\n        })}\n\n        <textarea\n          {...fieldProps}\n          {...attrs}\n          ref={(el) => (this.controlEl = el)}\n          id={id}\n          class=\"control\"\n          rows={5}\n          onInput={(e) => (this.value = (e.target as HTMLTextAreaElement).value)}>\n          {value}\n        </textarea>\n        {attrs.maxlength && attrs.maxlength > 0 ? (\n          <span class=\"textarea-count\">\n            {value?.length ?? 0}/{attrs.maxlength}\n            <span class=\"visually-hidden\" aria-live=\"assertive\" role=\"alert\">\n              {value?.length === Number(attrs.maxlength)\n                ? `Limit reached, you can only enter ${attrs.maxlength} characters in this field.`\n                : ''}\n            </span>\n          </span>\n        ) : null}\n      </go-field>\n    );\n  }\n}\n"],"version":3}