'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-348d3f4f.js');
const helper = require('./helper-c1931cd5.js');
require('./index-c48c451e.js');
require('./uniqueId-93e4ecef.js');

const goContentLayoutCss = "go-content-layout{--content-container-padding:2rem 0;display:block}go-content-layout .content-container{position:relative;padding:var(--content-container-padding)}@media (min-width: 1024px){go-content-layout .content-container>.row{align-items:flex-start}go-content-layout .content-container .sticky{position:sticky;top:0;bottom:0}}";
const GoContentLayoutStyle0 = goContentLayoutCss;

const GoContentLayout = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.hasSidebar = false;
        this.pageHeading = undefined;
        this.preHeading = undefined;
        this.intro = undefined;
        this.breadcrumbs = undefined;
        this.heroImgSrc = undefined;
        this.heroImgAlt = undefined;
        this.noHero = false;
        this.toc = undefined;
        this.tocProps = undefined;
        this.sidebarMobilePosition = 'start';
        this.sidebarDesktopPosition = 'start';
        this.sidebarSticky = false;
        this.computedSidebarPosition = null;
    }
    async initToc() {
        if (this.tocEl) {
            await this.tocEl.init();
        }
    }
    async componentWillLoad() {
        this.hasSidebar = helper.hasSlot(this.el, 'sidebar');
        // add resize observer to toggle between mobile and desktop
        helper.watchDevice((device) => {
            const { sidebarMobilePosition, sidebarDesktopPosition } = this;
            const deviceSidebarPosition = {
                mobile: sidebarMobilePosition,
                tablet: sidebarMobilePosition,
                desktop: sidebarDesktopPosition,
                large: sidebarDesktopPosition,
            };
            this.computedSidebarPosition = deviceSidebarPosition[device];
        });
    }
    adjustSidebarPosition(pos) {
        var _a;
        if (!this.hasSidebar || !this.sidebarTemplate) {
            return;
        }
        const tempSidebar = this.sidebarTemplate;
        tempSidebar.style.display = 'block';
        tempSidebar.setAttribute('aria-hidden', 'false');
        if (pos === 'start') {
            this.sidebarContainerStart.appendChild(tempSidebar);
        }
        else {
            (_a = this.sidebarContainerEnd) === null || _a === void 0 ? void 0 : _a.appendChild(tempSidebar);
        }
    }
    componentDidLoad() {
        this.initToc();
    }
    render() {
        const { pageHeading, intro, preHeading, breadcrumbs, toc, tocProps, hasSidebar, computedSidebarPosition, sidebarSticky: sticky, noHero } = this;
        const classes = {
            start: computedSidebarPosition === 'start'
                ? {
                    'content-sidebar col-12 col-desktop-3': true,
                    sticky,
                }
                : null,
            end: computedSidebarPosition === 'end'
                ? {
                    'content-sidebar col-12 col-desktop-3 offset-desktop-1': true,
                    sticky,
                }
                : null,
        };
        return (index.h(index.Host, { key: '0688967fd783071d4a6fbf02263310904c7583b5' }, index.h("div", { key: '13d3bae3121425bb14fe10e84d30f653c3c1786c', ref: (el) => (this.sidebarTemplate = el), id: "sidebar-template", "aria-hidden": true, style: { display: 'none' } }, index.h("div", { key: '829f913334f4d69ea0737940640a49e869a173e5', class: { 'content-sidebar': true, sticky } }, toc && index.h("go-toc", Object.assign({}, tocProps, { ref: (el) => (this.tocEl = el) })), index.h("slot", { key: '531b9967e4f62ca4ceeafbf636ce47c486130683', name: "sidebar" }))), !noHero && (index.h("go-hero", { breadcrumbs: breadcrumbs, preHeading: preHeading, heading: pageHeading }, index.h("slot", { name: "full-width-bg" }), index.h("slot", { name: "intro" }, index.h("p", null, intro)))), index.h("div", { key: 'c4af2ec74840aecafaef818a8b56b486e83bdfeb', class: "container content-container" }, index.h("div", { key: '00f16676c7431e611e78461a8277770978c35fd5', class: "row" }, hasSidebar && index.h("aside", { ref: (el) => (this.sidebarContainerStart = el), class: classes.start }), index.h("main", { key: '5ca38737fcc9dbd354eedab4bbdc184e56932951', class: {
                'col-12 col-desktop-8 content-main': true,
                'offset-desktop-1': hasSidebar && computedSidebarPosition === 'start',
            } }, !hasSidebar && toc && index.h("go-toc", Object.assign({}, tocProps, { ref: (el) => (this.tocEl = el) })), index.h("slot", { key: '63183f5095c67abbde34e7f0958e2d7bacede424' })), hasSidebar && index.h("aside", { ref: (el) => (this.sidebarContainerEnd = el), class: classes.end })))));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "computedSidebarPosition": ["adjustSidebarPosition"]
    }; }
};
GoContentLayout.style = GoContentLayoutStyle0;

exports.go_content_layout = GoContentLayout;

//# sourceMappingURL=go-content-layout.cjs.entry.js.map