'use strict';

const AUTO_FOCUS_TIMEOUT = 50;
/**
 * handle click outside of element
 * @param el target element
 * @param callback handler
 * @returns clean up function, call to remove event listener
 */
function onClickOutside(el, callback) {
    const handler = (e) => {
        if (el.contains(e.target))
            return;
        callback(e);
    };
    document.addEventListener('click', handler);
    return () => document.removeEventListener('click', handler);
}
/**
 * Add one time animationend event listener to given element, and remove it after fired once
 */
function onAnimationEnd(el, callback) {
    el.addEventListener('animationend', callback, { once: true });
}
/**
 * Fade out and remove element
 * @param el target element
 */
function fadeOutRemove(el, callback) {
    // fade out DOM element then remove
    el.classList.add('animate-fade-out');
    onAnimationEnd(el, () => {
        el.remove();
        if (callback)
            callback();
    });
}
/**
 * Move an element into another parent
 * @param el Element to be moved
 * @param to Parent element to move el into
 */
function moveEl(el, to) {
    to.appendChild(el);
}
const tabIndexes = {
    disabled: '-1',
    tabbable: '0',
};
/**
 * Get all focusable elements inside a given element
 * @param parent container element
 * @returns
 */
function getFocusableChildren(parent) {
    const selectors = ['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex="-1"])'];
    return Array.from(parent.querySelectorAll(selectors.join(',')));
}
/**
 * Get the first focusable element in a given element
 * @param parent container element
 * @returns
 */
function getFirstFocusableChild(parent) {
    return getFocusableChildren(parent)[0];
}
/**
 * Get the last focusable element in a given element
 * @param parent container element
 * @returns
 */
function getLastFocusableChild(parent) {
    const list = getFocusableChildren(parent);
    return list[list.length - 1];
}
/**
 * Trap focus
 * @param parent parent element that we trap focus within
 * @param focusOnFirst if true, automatically focus on first focusable element (default = true)
 *
 * @returns list of focusable child elements
 */
function trapFocus(parent, focusOnFirst = true) {
    const focusableChildren = getFocusableChildren(parent);
    const firstFocusableEl = focusableChildren[0];
    const lastFocusableEl = focusableChildren[focusableChildren.length - 1];
    lastFocusableEl === null || lastFocusableEl === void 0 ? void 0 : lastFocusableEl.addEventListener('keydown', (e) => {
        if (e.code === 'Tab' && !e.shiftKey) {
            e.preventDefault();
            firstFocusableEl === null || firstFocusableEl === void 0 ? void 0 : firstFocusableEl.focus();
        }
    });
    firstFocusableEl === null || firstFocusableEl === void 0 ? void 0 : firstFocusableEl.addEventListener('keydown', (e) => {
        if (e.code === 'Tab' && e.shiftKey) {
            e.preventDefault();
            lastFocusableEl === null || lastFocusableEl === void 0 ? void 0 : lastFocusableEl.focus();
        }
    });
    // focus on first focusable element automatically
    if (focusOnFirst) {
        setTimeout(() => firstFocusableEl === null || firstFocusableEl === void 0 ? void 0 : firstFocusableEl.focus(), AUTO_FOCUS_TIMEOUT);
    }
    return focusableChildren;
}
function focusFirstWithin(parent) {
    const focusableChildren = getFocusableChildren(parent);
    const firstFocusableEl = focusableChildren[0];
    if (firstFocusableEl) {
        setTimeout(() => {
            firstFocusableEl.focus();
        }, AUTO_FOCUS_TIMEOUT);
    }
}
function focusLastWithin(parent) {
    const lastFocusableChild = getLastFocusableChild(parent);
    if (lastFocusableChild) {
        setTimeout(() => {
            lastFocusableChild.focus();
        }, AUTO_FOCUS_TIMEOUT);
    }
}
/**
 *
 * Add event listener on escape key press
 * @param el the element to add event listener to
 */
function onEscape(el, callback) {
    const handler = (e) => {
        if (e.code === 'Escape') {
            callback(e);
        }
    };
    el.addEventListener('keydown', handler);
    return () => el.removeEventListener('click', handler);
}

exports.AUTO_FOCUS_TIMEOUT = AUTO_FOCUS_TIMEOUT;
exports.fadeOutRemove = fadeOutRemove;
exports.focusFirstWithin = focusFirstWithin;
exports.focusLastWithin = focusLastWithin;
exports.getFirstFocusableChild = getFirstFocusableChild;
exports.getFocusableChildren = getFocusableChildren;
exports.getLastFocusableChild = getLastFocusableChild;
exports.moveEl = moveEl;
exports.onAnimationEnd = onAnimationEnd;
exports.onClickOutside = onClickOutside;
exports.onEscape = onEscape;
exports.tabIndexes = tabIndexes;
exports.trapFocus = trapFocus;

//# sourceMappingURL=dom-7cff1398.js.map