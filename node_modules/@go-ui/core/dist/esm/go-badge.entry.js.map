{"file":"go-badge.entry.js","mappings":";;AAAA,MAAM,UAAU,GAAG,qxBAAqxB,CAAC;AACzyB,sBAAe,UAAU;;MCMZ,OAAO;;;;mBAUI,CAAC;mBAKD,EAAE;;uBAUL,KAAK;;IAExB,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QACjD,IAAI,YAAY,GAAW,GAAG,KAAK,EAAE,CAAC;QACtC,IAAI,KAAK,GAAG,GAAG,EAAE;YACf,OAAO,eAAa,CAAC;SACtB;QACD,IAAI,KAAK,GAAG,GAAG,EAAE;YACf,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC;SAC1B;QAED,QACE,EAAC,IAAI,QACH,eAAa,EACb,WAAK,KAAK,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,IACrD,KAAK,GAAG,YAAM,KAAK,EAAC,iBAAiB,IAAE,KAAK,CAAQ,GAAG,IAAI,EAC3D,KAAK,IAAI,CAAC,OAAO,GAAG,2BAAkB,MAAM,IAAE,YAAY,CAAQ,GAAG,IAAI,CACtE,CACD,EACP;KACH;;;;;;;","names":[],"sources":["src/components/go-badge/go-badge.scss?tag=go-badge","src/components/go-badge/go-badge.tsx"],"sourcesContent":["go-badge {\n  --badge-font-size: var(--go-size--1);\n  --badge-size: 2em;\n  --badge-bg-color: var(--go-color-critical-600);\n  --badge-fg-color: var(--go-color-lightest);\n  --badge-dot-size: 0.75rem;\n\n  position: relative;\n  display: inline-block;\n  .badge-count {\n    position: absolute;\n    top: 0;\n    right: 0;\n    transform: translate(50%, -50%);\n    font-size: var(--badge-font-size);\n    font-variant-numeric: tabular-nums;\n    text-align: center;\n    min-width: var(--badge-size);\n    min-height: var(--badge-size);\n    padding: 0 0.5rem;\n    height: var(--badge-size);\n    border-radius: var(--radius-round);\n    color: var(--badge-fg-color);\n    background-color: var(--badge-bg-color);\n    font-weight: 700;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    line-height: 1;\n    &.dot-only {\n      min-width: var(--badge-dot-size);\n      min-height: var(--badge-dot-size);\n      font-size: 0;\n      padding: 0;\n    }\n  }\n}\n","import { Component, Host, h, Element, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'go-badge',\n  styleUrl: 'go-badge.scss',\n  shadow: false,\n})\nexport class GoBadge {\n  @Element() el: HTMLElement;\n  /**\n   * Number to be displayed on the badge\n   */\n  @Prop() count: number;\n\n  /**\n   * minimum number displayable on the badge, if count is less than min, the badge will not be displayed\n   */\n  @Prop() min: number = 0;\n\n  /**\n   * maximum number displayable on the badge, if count is greater than max, `{max}+` is displayed\n   */\n  @Prop() max: number = 99;\n\n  /**\n   * Provide a meaningful label for the badge\n   */\n  @Prop() label?: string;\n\n  /**\n   * If true, the badge will be displayed only as a dot, no number will be shown\n   */\n  @Prop() dotOnly? = false;\n\n  render() {\n    const { count, min, max, label, dotOnly } = this;\n    let displayCount: string = `${count}`;\n    if (count < min) {\n      return <slot></slot>;\n    }\n    if (count > max) {\n      displayCount = `${max}+`;\n    }\n\n    return (\n      <Host>\n        <slot></slot>\n        <div class={{ 'badge-count': true, 'dot-only': dotOnly }}>\n          {label ? <span class=\"visually-hidden\">{label}</span> : null}\n          {count && !dotOnly ? <span aria-hidden=\"true\">{displayCount}</span> : null}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}