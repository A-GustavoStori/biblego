import { r as registerInstance, c as createEvent, h, g as getElement } from './index-a73e6b51.js';
import { p as parseJsonProp, i as inheritAttributes } from './helper-bc7b4586.js';
import { d as trapFocus } from './dom-0d82aeaf.js';
import { r as renderIcon } from './nav-helpers-3201fddc.js';
import './index-30633753.js';
import './uniqueId-0b35bc55.js';

const goNavDrawerCss = ".nav-drawer{--drawer-bg-color:var(--go-color-lightest);--drawer-max-width:24rem;--nav-item-text-color:var(--go-color-darkest);--nav-item-bg-color:var(--go-color-lightest);--nav-item-hover-bg-color:var(--go-color-neutral-200);--nav-item-padding:var(--go-size--1) var(--go-size-0);--nav-header-padding:var(--go-size--1) var(--go-size-0);--nav-header-border-color:var(--go-color-neutral-200);--nav-item-icon-gap:var(--go-size-0);--nav-item-current-bar-width:0.25rem;--nav-item-current-bar-color:var(--go-color-primary-500);--submenu-parent-link-border-bottom:0.0625rem solid var(--go-color-neutral-200);display:block;width:100%;height:100%;position:fixed;top:0;left:0;z-index:var(--layer-important);background:var(--drawer-bg-color);transform:translateX(-100%);transition:transform var(--go-duration-normal) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){.nav-drawer{transition-duration:0s}}@media (prefers-reduced-motion: reduce){.nav-drawer{transition-duration:0s}}@media (min-width: 600px){.nav-drawer{width:var(--drawer-max-width)}}.nav-drawer.right{left:auto;right:0;transform:translateX(100%)}.nav-drawer.open{transform:translateX(0)}.nav-drawer .nav-container{overflow:hidden;width:100%;height:100%;position:absolute}.nav-drawer .nav-menu{transition:transform var(--go-duration-normal) var(--go-timing-function), visibility var(--go-duration-normal) var(--go-timing-function);visibility:visible;transform:translateX(0);padding:0;position:absolute;top:0;right:0;z-index:1;background:var(--drawer-bg-color);display:flex;flex-direction:column;width:100%;height:100%}@media (prefers-reduced-motion: reduce){.nav-drawer .nav-menu{transition-duration:0s}}@media (prefers-reduced-motion: reduce){.nav-drawer .nav-menu{transition-duration:0s}}.nav-drawer .nav-menu .nav-drawer-header .header-row{display:flex;align-items:center;justify-content:space-between;padding:var(--nav-header-padding)}.nav-drawer .nav-menu .nav-drawer-header .header-row .back-btn{margin-right:auto}.nav-drawer .nav-menu .nav-drawer-header .header-row .close-btn{margin-left:auto;flex:0 0 auto}.nav-drawer .nav-menu .nav-drawer-header .header-row .title{font-weight:bold;font-size:var(--go-size-0);flex:1}.nav-drawer .nav-menu.is-sub-nav .nav-drawer-header .title{margin-left:1rem}.nav-drawer .nav-menu nav{border-top:0.125rem solid var(--nav-header-border-color);height:100%;padding:1rem 0;flex:1;overflow:auto}.nav-drawer .nav-menu .nav-menu{box-shadow:var(--shadow-4);visibility:hidden;transform:translateX(100%)}.nav-drawer ul{list-style:none;margin:0;padding:0}.nav-drawer .nav-item-inner{background:none;border:none;text-decoration:none;cursor:pointer;display:flex;align-items:center;justify-content:space-between;width:100%;padding:var(--nav-item-padding);color:var(--nav-item-text-color);text-decoration:none;background:var(--nav-item-bg-color);border-left:var(--nav-item-current-bar-width) solid transparent}.nav-drawer .nav-item-inner:hover,.nav-drawer .nav-item-inner:focus{background:var(--nav-item-hover-bg-color)}.nav-drawer .nav-item-label{display:flex;align-items:center;gap:var(--nav-item-icon-gap)}.nav-drawer .children-indicator{width:1.5em;height:1.5em}.nav-drawer li{padding:0;line-height:1.5}.nav-drawer li.active>.nav-menu{visibility:visible;transform:translateX(0);z-index:2}.nav-drawer li.current>.nav-item-inner{border-left-color:var(--nav-item-current-bar-color)}.nav-drawer .parent-link{border-bottom:var(--submenu-parent-link-border-bottom)}.nav-drawer .parent-link a{display:flex;align-items:center;justify-content:flex-start;width:100%;padding:var(--nav-item-padding);color:var(--nav-item-text-color);text-decoration:none;background:var(--nav-item-bg-color);font-weight:bold;border-left:var(--nav-item-current-bar-width) solid transparent}.nav-drawer .parent-link a svg{transition:transform var(--go-duration-normal) var(--go-timing-function);margin-left:0.5rem;width:1.25em;height:1.25em;transform:translateX(0)}@media (prefers-reduced-motion: reduce){.nav-drawer .parent-link a svg{transition-duration:0s}}.nav-drawer .parent-link a:hover,.nav-drawer .parent-link a:focus{background:var(--nav-item-hover-bg-color)}.nav-drawer .parent-link a:hover svg,.nav-drawer .parent-link a:focus svg{transform:translateX(0.3125rem)}";
const GoNavDrawerStyle0 = goNavDrawerCss;

const GoNavDrawer = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.openEvent = createEvent(this, "open", 7);
        this.closeEvent = createEvent(this, "close", 7);
        this.navItemClickEvent = createEvent(this, "navItemClick", 7);
        // Store attributes inherited from the host element
        this.inheritedAttrs = {};
        this.subMenus = null;
        this.position = 'left';
        this.items = undefined;
        this.navItems = null;
        this.active = false;
        this.label = 'Drawer';
        this.autoClose = false;
        this.currentSubMenus = [];
    }
    /**
     * Initialise the menu
     * @param items {INavItem[]} menu items to be rendered
     */
    async init(newItems) {
        this.navItems = parseJsonProp(newItems);
    }
    async open() {
        this.active = true;
        this.openEvent.emit();
    }
    async close() {
        while (this.currentSubMenus.length > 0) {
            await this.closeCurrentSubMenu();
        }
        this.active = false;
        this.closeEvent.emit();
    }
    async toggle() {
        if (this.active) {
            this.close();
        }
        else {
            this.open();
        }
    }
    componentWillLoad() {
        this.inheritedAttrs = inheritAttributes(this.el, ['class', 'style', 'items', 'active', 'position'], false);
        try {
            this.navItems = parseJsonProp(this.items);
        }
        catch (e) {
            console.warn('Could not parse nav items.', e);
        }
    }
    async closeCurrentSubMenu() {
        if (this.currentSubMenus.length === 0) {
            return;
        }
        const lastSubMenu = this.currentSubMenus.slice(-1)[0];
        lastSubMenu.classList.remove('active');
        lastSubMenu.querySelector('.nav-item-inner').setAttribute('aria-expanded', 'false');
        this.currentSubMenus = this.currentSubMenus.slice(0, -1);
    }
    openSubMenu(e) {
        const triggerBtn = e.target;
        const menuItem = triggerBtn.closest('li');
        menuItem.classList.add('active');
        triggerBtn.setAttribute('aria-expanded', 'true');
        trapFocus(menuItem.querySelector('.nav-menu'));
        this.currentSubMenus = [...this.currentSubMenus, menuItem];
    }
    handleNavItemClick(e, item) {
        var _a;
        if ((_a = item.linkAttrs) === null || _a === void 0 ? void 0 : _a.onClick) {
            item.linkAttrs.onClick(e);
        }
        if (this.autoClose) {
            this.close();
        }
        this.navItemClickEvent.emit(item);
    }
    renderNavItems(items, parentItem) {
        const isSubNav = !!parentItem;
        return (h("div", { class: { 'nav-menu': true, 'is-sub-nav': isSubNav } }, h("div", { class: "nav-drawer-header" }, h("div", { class: "header-row" }, parentItem ? (h("go-button", { class: "back-btn", flat: true, stack: true, variant: "text", compact: true, onClick: () => this.closeCurrentSubMenu() }, h("svg", { slot: "prefix", "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M19 12H5M12 19l-7-7 7-7" })), h("span", null, "Back"))) : (h("span", null)), !isSubNav && h("div", { class: "title" }, this.label), h("go-button", { class: "close-btn", flat: true, stack: true, variant: "text", compact: true, onClick: () => this.close() }, h("svg", { "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M18 6 6 18M6 6l12 12" })), h("span", null, "Close")))), (items === null || items === void 0 ? void 0 : items.length) > 0 ? (h("nav", { "aria-label": isSubNav ? parentItem.label : this.label }, isSubNav && parentItem.url ? (h("div", { class: "parent-link" }, h("go-link", Object.assign({ href: parentItem.url }, parentItem.linkAttrs, { onClick: (e) => this.handleNavItemClick(e, parentItem) }), h("span", { class: "nav-item-label" }, renderIcon(parentItem.icon), h("span", null, parentItem.label)), h("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "M5 12h14M12 5l7 7-7 7" }))))) : null, h("ul", null, items.map((item) => this.renderNavItem(item))))) : null));
    }
    renderNavItem(item) {
        var _a;
        let Tag = 'a';
        const hasChildren = ((_a = item === null || item === void 0 ? void 0 : item.children) === null || _a === void 0 ? void 0 : _a.length) > 0;
        if (item.isCurrent) {
            Tag = 'span';
        }
        if (hasChildren) {
            Tag = 'button';
        }
        let attrs = null;
        if (Tag === 'a') {
            attrs = Object.assign(Object.assign({ href: item.url }, item.linkAttrs), { onClick: (e) => this.handleNavItemClick(e, item) });
        }
        if (Tag === 'button') {
            attrs = {
                'type': 'button',
                'aria-haspopup': 'true',
                'aria-expanded': 'false',
                'onClick': (e) => this.openSubMenu(e),
            };
        }
        return (h("li", { class: { 'nav-item': true, 'has-children': hasChildren, 'current': item.isCurrent } }, h(Tag, Object.assign({ class: "nav-item-inner" }, attrs), h("span", { class: "nav-item-label" }, renderIcon(item.icon), h("span", null, item.label)), hasChildren ? (h("svg", { class: "children-indicator", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "m9 18 6-6-6-6" }))) : null), item.children ? this.renderNavItems(item.children, item) : null));
    }
    render() {
        let { navItems, active, position, inheritedAttrs } = this;
        return (h("go-overlay", Object.assign({ key: '6af4802f093470ef5170198571a1fb1c0c873f86', active: active }, inheritedAttrs, { onOverlayClose: () => this.close() }), h("div", { key: '0444ca13a9d55c0d823b76569b68f3d904899b2c', class: { 'nav-drawer': true, 'open': active, [position]: !!position } }, navItems ? h("div", { class: "nav-container" }, this.renderNavItems(navItems)) : h("slot", null))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "items": ["init"]
    }; }
};
GoNavDrawer.style = GoNavDrawerStyle0;

export { GoNavDrawer as go_nav_drawer };

//# sourceMappingURL=go-nav-drawer.entry.js.map