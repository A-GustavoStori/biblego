import { r as registerInstance, h, H as Host, g as getElement } from './index-a73e6b51.js';
import { b as hasSlot, d as initIdProps } from './helper-bc7b4586.js';
import './index-30633753.js';
import './uniqueId-0b35bc55.js';

const goRadioCss = "go-radio{--radio-border-color:var(--input-border-color);--radio-border-width:0.125rem;--radio-border:var(--radio-border-width) solid var(--radio-border-color);--radio-border-color-hover:var(--go-color-neutral-700);--radio-size:1.5em;--radio-dot-size:0.7em;--radio-checked-bg:var(--control-selected-bg-color);--radio-checked-fg:var(--control-selected-fg-color);--radio-mark-shadow-inner:var(--shadow-2)}go-radio .control-wrapper{display:flex;align-items:flex-start;gap:var(--input-gap-inner)}go-radio input,go-radio label{cursor:pointer}go-radio[error]{color:var(--input-error-color);--input-hint-color:var(--input-error-color);--radio-border-color:var(--input-error-color)}go-radio[error] .control{--input-border-color:var(--input-error-color);border-color:var(--input-error-color)}go-radio[error] input:checked~.mark{--radio-checked-bg:var(--input-error-color)}go-radio[error] .error-msg{margin:var(--input-gap-inner) 0}go-radio[disabled] input,go-radio[disabled] label{cursor:not-allowed}go-radio[disabled] .box .mark{background:var(--input-bg-disabled-color);border-color:var(--input-text-disabled-color)}go-radio[disabled] .box input:checked~.mark .dot{background:var(--input-text-disabled-color)}go-radio label{margin:0;font-size:var(--go-size-0);font-weight:400;line-height:1.5;line-height:var(--radio-size)}go-radio label~.hint{margin-top:0.25rem}go-radio .box{flex-shrink:0;flex-grow:0;position:relative}go-radio .mark{display:block;width:var(--radio-size);height:var(--radio-size);border:var(--radio-border);border-radius:50%;transition:background-color var(--go-duration-normal) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-radio .mark{transition-duration:0s}}go-radio .mark .dot{border-radius:50%;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);width:var(--radio-dot-size);height:var(--radio-dot-size);transition:background-color var(--go-duration-normal) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-radio .mark .dot{transition-duration:0s}}go-radio input:checked~.mark{background:var(--radio-checked-bg);border-color:var(--radio-checked-bg)}go-radio input:checked~.mark .dot{background:var(--radio-checked-fg);box-shadow:var(--radio-mark-shadow-inner)}go-radio input:not(:disabled):hover~.mark{border-color:var(--radio-border-color-hover)}go-radio input:not(:disabled):focus-visible~.mark{outline:var(--go-focus-outline-width, 2px) solid var(--go-focus-outline-color, #000);outline-offset:var(--go-focus-outline-offset)}go-radio input:not(:disabled):active~.mark{box-shadow:var(--input-focus-shadow);outline-offset:0}go-radio .hint{color:var(--input-hint-color);line-height:1;font-size:var(--input-hint-font-size)}go-radio .hint:last-child{margin-bottom:0}";
const GoRadioStyle0 = goRadioCss;

const GoRadio = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.checked = undefined;
        this.indeterminate = undefined;
        this.name = undefined;
        this.disabled = undefined;
        this.value = undefined;
        this.label = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.controlId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.hasError = false;
    }
    updateErrorState() {
        this.hasError = typeof this.error !== 'undefined';
    }
    componentWillLoad() {
        this.hasHintSlot = hasSlot(this.el, 'hint');
        initIdProps(this, this.el, ['hint', 'error', 'control'], 'go-radio-');
        this.updateErrorState();
    }
    render() {
        const { label, value, error, controlId, hint, hintId, hasHintSlot, checked, name, disabled, hasError, errorId } = this;
        const describedByIds = [];
        if (hasHintSlot || hint) {
            describedByIds.push(hintId);
        }
        if (hasError) {
            describedByIds.push(errorId);
        }
        const props = {
            id: controlId,
            checked,
            name,
            disabled,
            value,
        };
        return (h(Host, { key: '75cc6e73b7ac137ad89b18f0f624dbd7bc8f3c9a', class: {
                error: hasError,
                disabled: !!disabled,
            } }, h("div", { key: '67e3411f8b8ddbf514890f9b040cb329514a659b', class: "control-wrapper" }, h("div", { key: 'b7af3fbc16559ac6be09e3ea7f9b44a7e54cc929', class: "box" }, h("input", Object.assign({ key: 'f02218a33fc42a56e0298b7536da0b948c3b21e2' }, props, { type: "radio", class: "hidden-control", "aria-invalid": String(hasError), "aria-describedby": describedByIds.join(' ') })), h("span", { key: '8cc88f51d17e12a9fd2d15a64d5bc8653f78af05', class: "mark" }, h("span", { key: '363ab04516f45bfb5919f8b59c06d301189a974f', class: "dot" }))), h("div", { key: '1e57ffaf81431d0070850b63b19a65bdd3b188a3', class: "text" }, h("label", { key: '816ba31489793c5382cd7fbe73fe8ac6d25750d5', htmlFor: controlId }, label), hasHintSlot || hint ? (h("div", { class: "hint", id: hintId }, h("slot", { name: "hint" }, hint))) : null)), hasError ? (h("div", { class: "error-msg", id: errorId }, error)) : null));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "error": ["updateErrorState"]
    }; }
};
GoRadio.style = GoRadioStyle0;

export { GoRadio as go_radio };

//# sourceMappingURL=go-radio.entry.js.map