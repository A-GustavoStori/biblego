import { r as registerInstance, h, H as Host, g as getElement } from './index-a73e6b51.js';
import { p as parseJsonProp } from './helper-bc7b4586.js';
import './index-30633753.js';
import './uniqueId-0b35bc55.js';

const goBreadcrumbsCss = "go-breadcrumbs{--breadcrumb-item-gap:0.5rem;display:block}go-breadcrumbs go-link{--nav-link-current-bar-width:0}go-breadcrumbs ol{padding:0;margin:0;list-style:none}go-breadcrumbs ol li{align-items:center;vertical-align:middle;display:none}@media (min-width: 600px){go-breadcrumbs ol li{display:inline-flex}}go-breadcrumbs ol li:last-child{display:inline-flex;margin-right:0}go-breadcrumbs ol li:nth-last-child(2){display:inline-flex}go-breadcrumbs ol li .breadcrumb-separator{margin-left:var(--breadcrumb-item-gap);margin-right:var(--breadcrumb-item-gap);width:1rem;height:1rem;vertical-align:middle}";
const GoBreadcrumbsStyle0 = goBreadcrumbsCss;

const GoBreadcrumb = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.label = 'Breadcrumbs';
        this.items = undefined;
        this.hideCurrent = false;
        this.navItems = [];
    }
    async watchItems(newItems) {
        this.navItems = this.getItems(newItems);
    }
    componentWillLoad() {
        this.navItems = this.getItems(this.items);
    }
    getItems(items) {
        const navItems = parseJsonProp(items);
        if (!this.hideCurrent) {
            return navItems;
        }
        return navItems.filter((item, i) => item.url || i !== navItems.length - 1);
    }
    render() {
        const { label, navItems, hideCurrent } = this;
        if (!(navItems === null || navItems === void 0 ? void 0 : navItems.length)) {
            return null;
        }
        return (h(Host, null, h("nav", { "aria-label": label }, h("ol", null, navItems.map((item, i) => {
            const isLast = i === navItems.length - 1;
            const isCurrentPageALink = isLast && item.url && !hideCurrent;
            return (h("li", null, h("go-nav-link", { item: item, "aria-current": isCurrentPageALink ? 'page' : null }), i < navItems.length - 1 ? (h("svg", { class: "breadcrumb-separator", xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { d: "m9 18 6-6-6-6" }))) : null));
        })))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "items": ["watchItems"]
    }; }
};
GoBreadcrumb.style = GoBreadcrumbsStyle0;

export { GoBreadcrumb as go_breadcrumbs };

//# sourceMappingURL=go-breadcrumbs.entry.js.map