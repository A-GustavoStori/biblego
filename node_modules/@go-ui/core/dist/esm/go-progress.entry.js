import { r as registerInstance, h, H as Host, g as getElement } from './index-a73e6b51.js';

const goProgressCss = "go-progress{--go-progress-color:var(--go-color-primary-600);--go-progress-bar-height:0.25rem;--go-progress-padding:var(--go-progress-bar-height) 0;--go-progress-radius:var(--radius-round);--go-progress-track-color:var(--go-color-neutral-200);display:flex;align-items:center;gap:0.5rem;padding:var(--go-progress-padding)}go-progress .track{flex:1;position:relative;height:var(--go-progress-bar-height);background-color:var(--go-progress-track-color);border-radius:var(--go-progress-radius);overflow:hidden}go-progress .track .bar{position:absolute;top:0;left:0;bottom:0;right:0;background-color:var(--go-progress-color);border-radius:var(--go-progress-radius);transform:translateX(-100%);transition:transform var(--go-duration-normal) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-progress .track .bar{transition-duration:0s}}go-progress .track.indeterminate .bar{border-radius:var(--go-progress-radius);transform-origin:left center;animation:indeterminate-progress 1.5s linear infinite}@media (prefers-reduced-motion: reduce){go-progress .track.indeterminate .bar{transform:translateX(0%) scaleX(30%);animation:indeterminate-progress-rm 3s steps(6, jump-none) infinite alternate}}@keyframes indeterminate-progress{0%{transform:translateX(-10%) scaleX(0)}50%{transform:translateX(0%) scaleX(70%)}100%{transform:translateX(110%) scaleX(0)}}@keyframes indeterminate-progress-rm{0%{transform-origin:left}100%{transform-origin:right}}";
const GoProgressStyle0 = goProgressCss;

const GoProgress = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.min = 0;
        this.max = 100;
        this.value = undefined;
        this.label = undefined;
        this.labelledby = undefined;
        this.indeterminate = false;
        this.showPercentage = false;
        this.percentage = undefined;
    }
    updatePercentage(newValue) {
        if (typeof newValue !== 'number' || !this.max) {
            this.percentage = 0;
            this.indeterminate = true;
        }
        const total = this.max - this.min;
        this.percentage = Math.round((newValue / total) * 100);
    }
    componentWillLoad() {
        this.updatePercentage(this.value);
    }
    render() {
        const { percentage, indeterminate, label, labelledby, value, max, min, showPercentage } = this;
        let ariaAttrs = {
            'aria-valuenow': indeterminate ? null : value,
            'aria-valuemin': indeterminate ? null : min,
            'aria-valuemax': indeterminate ? null : max,
        };
        return (h(Host, { key: '71869d0f9c7c5b089da9aef617a2c548a2e32365' }, h("div", Object.assign({ key: '4fd1f11ddde42997fc3a0d9d69f7b78c58b2fb2a', class: { track: true, indeterminate }, "aria-label": label, "aria-labelledby": labelledby, role: "progressbar" }, ariaAttrs), h("slot", { key: 'bd7c57acd1bc834437b43d822a8663947a7c1285' }), h("span", { key: 'fe1e45107f322aaf96b9e028340c86ced3e72946', class: "bar", style: indeterminate ? null : { transform: `translateX(-${100 - percentage}%` } })), showPercentage ? h("span", { class: "percentage" }, percentage, "%") : null));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "value": ["updatePercentage"]
    }; }
};
GoProgress.style = GoProgressStyle0;

export { GoProgress as go_progress };

//# sourceMappingURL=go-progress.entry.js.map