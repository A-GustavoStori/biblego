import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-a73e6b51.js';
import { p as parseJsonProp, b as hasSlot } from './helper-bc7b4586.js';
import { r as renderIcon } from './nav-helpers-3201fddc.js';
import { u as uniqueId } from './uniqueId-0b35bc55.js';
import './index-30633753.js';

const GoNavItem = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.navEvent = createEvent(this, "navigate", 7);
        this.subMenuToggleEvent = createEvent(this, "submenutoggle", 7);
        this.item = undefined;
        this.parsedItem = undefined;
        this.hasSubmenuSlot = false;
        this.isOpen = false;
    }
    parseItemProp() {
        var _a, _b;
        this.parsedItem = parseJsonProp(this.item);
        if ((_b = (_a = this.parsedItem) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.length) {
            this.submenuId = uniqueId('go-nav-item-submenu-');
        }
    }
    componentWillLoad() {
        this.parseItemProp();
        this.hasSubmenuSlot = hasSlot(this.el, 'submenu');
    }
    handleSubmenuToggle(isOpen) {
        console.log('event triggered', isOpen);
        this.isOpen = !!isOpen;
    }
    renderSubMenu(parent) {
        var _a;
        if (!parent) {
            return;
        }
        // if submenu item has children, render the current item and its children
        if (((_a = parent.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            return (h("div", { class: "submenu-list-container" }, h("div", { class: "submenu-header" }, h("go-nav-link", { block: true, item: parent })), h("ul", { class: "submenu-list" }, parent.children.map((child) => (h("li", null, h("go-nav-link", { block: true, item: child })))))));
        }
        return (h("div", { class: "nav-item" }, h("go-nav-link", { block: true, item: parent })));
    }
    render() {
        var _a;
        const { parsedItem: item, submenuId } = this;
        let Tag = 'a';
        const hasChildren = ((_a = item === null || item === void 0 ? void 0 : item.children) === null || _a === void 0 ? void 0 : _a.length) > 0 || this.hasSubmenuSlot;
        if (item === null || item === void 0 ? void 0 : item.isCurrent) {
            Tag = 'span';
        }
        let attrs = null;
        if (Tag === 'a') {
            attrs = Object.assign({ url: item === null || item === void 0 ? void 0 : item.url, onClick: (event) => {
                    this.navEvent.emit({ event, item });
                } }, item === null || item === void 0 ? void 0 : item.linkAttrs);
        }
        return (h(Host, { key: '3e6d846e2c3a73d24ca290cdc1a7dc6192b34cc9', role: "listitem", class: { 'nav-item': true, 'current': item === null || item === void 0 ? void 0 : item.isCurrent } }, h("slot", { key: 'f4f0d6596c6fe1b3a77661aeba8c33c3060b2985' }, hasChildren ? ([
            h("go-nav-submenu-trigger", { controls: submenuId }, h("span", { class: "nav-item-label" }, renderIcon(item === null || item === void 0 ? void 0 : item.icon), h("span", null, item === null || item === void 0 ? void 0 : item.label))),
            h("go-nav-submenu", { id: submenuId, columns: item === null || item === void 0 ? void 0 : item.columns }, h("go-nav-link", { slot: "submenu-header", block: true, item: item, showArrow: true }), item.children.map((child) => this.renderSubMenu(child))),
        ]) : (h(Tag, Object.assign({ class: "nav-item-inner" }, attrs), h("span", { class: "nav-item-label" }, renderIcon(item === null || item === void 0 ? void 0 : item.icon), h("span", null, item === null || item === void 0 ? void 0 : item.label)))))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "item": ["parseItemProp"]
    }; }
};

export { GoNavItem as go_nav_item };

//# sourceMappingURL=go-nav-item.entry.js.map