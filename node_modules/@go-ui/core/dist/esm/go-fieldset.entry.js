import { r as registerInstance, h, H as Host, g as getElement } from './index-a73e6b51.js';
import { b as hasSlot, d as initIdProps } from './helper-bc7b4586.js';
import './index-30633753.js';
import './uniqueId-0b35bc55.js';

const goFieldsetCss = "go-fieldset{display:block}go-fieldset fieldset{padding:0;border:none}go-fieldset fieldset legend{display:grid;gap:var(--input-gap-inner);margin-bottom:var(--input-gap-inner)}go-fieldset fieldset .fieldset-content{display:grid;gap:var(--input-gap-inner);list-style:none;padding:0;margin:0}go-fieldset fieldset .fieldset-content li{margin:0}go-fieldset .go-field{margin-top:0}";
const GoFieldsetStyle0 = goFieldsetCss;

const GoFieldset = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.label = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.labelId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.isList = false;
        this.hasError = false;
    }
    updateErrorState() {
        this.hasError = typeof this.error !== 'undefined';
    }
    componentWillLoad() {
        this.hasHintSlot = hasSlot(this.el, 'hint');
        initIdProps(this, this.el, ['label', 'hint', 'error'], 'go-fieldset-');
        this.updateErrorState();
    }
    wrapChildrenInUl(div) {
        // Create a new ul element
        const ul = document.createElement('ul');
        ul.classList.add('fieldset-content');
        // Get the div's direct children
        // we need to modify html structure, this will change the div.children reference.
        // so make a new array to iterate against.
        const children = [...div.children];
        // Iterate over the children
        for (let i = 0; i < children.length; i++) {
            // Create a new li element
            const li = document.createElement('li');
            // Append the current child to the li element
            li.appendChild(children[i]);
            // Append the li element to the ul element
            ul.appendChild(li);
        }
        // Replace the div with the ul element
        div.parentNode.replaceChild(ul, div);
    }
    componentDidLoad() {
        if (this.isList) {
            this.wrapChildrenInUl(this.el.querySelector('.fieldset-content'));
        }
    }
    render() {
        const { label, error, hint, hasError, hasHintSlot, labelId, errorId, hintId } = this;
        return (h(Host, { key: '6fad526b8cd1448c504f73b7714bc9d2fe2737c8' }, h("fieldset", { key: 'b786d5e94ed072c53e70b2b692202f0783dc8222', class: {
                'go-field': true,
                'error': hasError,
            }, "aria-invalid": hasError }, h("legend", { key: 'd77e589b6731aeb4ac2575d5386b079b67916766' }, h("span", { key: '33dd6c354a651edaec9ab0379d7f10b55c02de05', class: "label", id: labelId }, label), hasHintSlot || hint ? (h("span", { class: "hint", id: hintId }, h("slot", { name: "hint" }, hint))) : null, h("span", { key: '22563c875c0374b67d417f4c1ca469571ab95a7e', class: "visually-hidden" }, hasError ? h("span", { id: errorId }, "Invalid: ", error) : null)), h("div", { key: 'b38cd10ecec44d522092cda2470b90a947c87e9a', class: "fieldset-content" }, h("slot", { key: '717988471b6a848400ee3c1920116b1e34ea75ee' })), hasError ? (h("div", { class: "error-msg", id: errorId }, error)) : null)));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "error": ["updateErrorState"]
    }; }
};
GoFieldset.style = GoFieldsetStyle0;

export { GoFieldset as go_fieldset };

//# sourceMappingURL=go-fieldset.entry.js.map