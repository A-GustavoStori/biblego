import { r as registerInstance, h, g as getElement } from './index-a73e6b51.js';
import { i as inheritNonFieldAttrs, b as loadFieldSlots, l as loadFieldProps, f as fieldSlotNames } from './form-7290e89c.js';
import './index-30633753.js';
import { u as uniqueId } from './uniqueId-0b35bc55.js';
import './helper-bc7b4586.js';
import './kebabCase-147fb3bf.js';

const GoInput = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.prefixer = 'go-input-';
        this.hasNamedSlot = {};
        this.controlId = uniqueId(this.prefixer);
        this.labelId = undefined;
        this.prefixId = undefined;
        this.suffixId = undefined;
        this.hintId = undefined;
        this.errorId = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.hint = undefined;
        this.error = undefined;
        this.readonly = undefined;
        this.value = undefined;
        this.attrs = undefined;
    }
    componentWillLoad() {
        this.attrs = inheritNonFieldAttrs(this);
        this.hasNamedSlot = loadFieldSlots(this.el);
    }
    render() {
        const { controlId, value, attrs } = this;
        const fieldProps = loadFieldProps(this);
        return (h("go-field", Object.assign({ key: 'f241607f6611a1b569cd8db660f5ea5822b99439' }, fieldProps), fieldSlotNames.map((slotName) => {
            if (this.hasNamedSlot[slotName]) {
                return (h("template", { slot: slotName }, h("slot", { name: slotName })));
            }
        }), h("input", Object.assign({ key: 'a1e98dc2f7d16dd83437185dfb94225621d58ba3' }, fieldProps, attrs, { class: "control", ref: (el) => (this.controlEl = el), id: controlId, value: value, onInput: (e) => (this.value = e.target.value) }))));
    }
    get el() { return getElement(this); }
};

export { GoInput as go_input };

//# sourceMappingURL=go-input.entry.js.map