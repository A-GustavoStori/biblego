import { r as registerInstance, h, H as Host, g as getElement, c as createEvent } from './index-a73e6b51.js';
import { w as warning, $ as $attrs, i as inheritAttributes } from './helper-bc7b4586.js';
import { k as kebabCase } from './kebabCase-147fb3bf.js';
import { u as uniqueId } from './uniqueId-0b35bc55.js';
import './index-30633753.js';

const goButtonCss = "go-button{--go-btn-bg-color:var(--go-color-neutral-600);--go-btn-bg-color-hover:var(--go-color-neutral-500);--go-btn-text-color:#fff;--go-btn-text-color-hover:#fff;--go-focus-outline-color:var(--go-btn-bg-color);--go-btn-outline-text-color:#000;--go-btn-outline-text-color-hover:#000;--go-btn-disabled-opacity:0.5;--go-btn-shadow:var(--shadow-2);--go-btn-padding-y:0.5em;--go-btn-padding-x:1.5em;--go-btn-inner-gap:0.5rem;--go-btn-radius:var(--radius-2, 0.25rem);--go-btn-icon-size:3rem;--go-btn-inline-icon-size:calc(var(--go-btn-icon-size) / 2);--go-btn-outline-fill-color:var(--go-color-bg);--go-btn-border-width:0.125rem;display:inline-block}go-button.block-all{display:block;width:100%}go-button.block-desktop{display:block;width:100%}@media (min-width: 1440px){go-button.block-desktop{display:inline-block;width:auto}}go-button.block-tablet{display:block;width:100%}@media (min-width: 1024px){go-button.block-tablet{display:inline-block;width:auto}}go-button.block-mobile{display:block;width:100%}@media (min-width: 600px){go-button.block-mobile{display:inline-block;width:auto}}go-button.outline .inner-button{background:transparent;border-color:var(--go-btn-bg-color);color:var(--go-btn-outline-text-color)}go-button.outline .inner-button:hover,go-button.outline .inner-button:focus-visible{background:var(--go-btn-bg-color);color:var(--go-btn-outline-text-color-hover)}go-button.outline[variant=text]{--go-btn-bg-color:var(--go-color-neutral-700)}go-button.outline[variant=text] .inner-button{border-color:transparent}go-button.outline-fill .inner-button{background:var(--go-btn-outline-fill-color)}go-button[flat] .inner-button{box-shadow:none}go-button[flat] .inner-button:hover,go-button[flat] .inner-button:focus-visible{box-shadow:none}go-button[round] .inner-button{border-radius:var(--radius-round)}go-button[icon] .inner-button{width:var(--go-btn-icon-size);height:var(--go-btn-icon-size);padding:0;text-align:center;line-height:1}go-button[stack] .inner-button{flex-direction:column}go-button[compact]{--go-btn-padding-y:0.25em;--go-btn-padding-x:0.5em;--go-btn-inner-gap:0.125em;--go-btn-icon-size:2rem}go-button[compact] .inner-button{font-size:var(--go-size--1);line-height:1.5em}go-button[disabled] .inner-button{cursor:not-allowed;box-shadow:none;opacity:var(--go-btn-disabled-opacity)}go-button[disabled] .inner-button:hover,go-button[disabled] .inner-button:focus{box-shadow:none;outline:none}go-button .inner-button{background:none;border:none;text-decoration:none;cursor:pointer;display:inline-flex;vertical-align:middle;align-items:center;justify-content:center;gap:var(--go-btn-inner-gap);width:100%;text-align:center;line-height:1.5;background:var(--go-btn-bg-color);color:var(--go-btn-text-color);border:var(--go-btn-border-width) solid transparent;border-radius:var(--go-btn-radius);padding:var(--go-btn-padding-y, 0.5rem) var(--go-btn-padding-x, 1rem);box-shadow:var(--go-btn-shadow);text-underline-offset:0.25rem;font-weight:400;cursor:pointer;transition:background-color var(--go-duration-normal) var(--go-timing-function), color var(--go-duration-normal) var(--go-timing-function), outline-offset var(--go-duration-fast) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-button .inner-button{transition-duration:0s}}go-button .inner-button:focus-visible{outline:var(--go-focus-outline-width, 2px) solid var(--go-focus-outline-color, #000);outline-offset:var(--go-focus-outline-offset)}go-button .inner-button:active{--go-focus-outline-offset:0;box-shadow:var(--inner-shadow-3)}go-button .inner-button:hover,go-button .inner-button:focus-visible{--go-btn-bg-color:var(--go-btn-bg-color-hover);--go-btn-text-color:var(--go-btn-text-color-hover)}go-button .inner-button svg{width:var(--go-btn-inline-icon-size);height:var(--go-btn-inline-icon-size);margin:0}go-button[variant=text]{--go-focus-outline-color:var(--go-color-primary-600);--go-btn-bg-color:transparent;--go-btn-bg-color-hover:var(--go-color-neutral-300);--go-btn-text-color:currentColor;--go-btn-text-color-hover:currentColor}go-button[variant=text] .btn-text{text-decoration:underline}go-button[variant=text]:hover .btn-text,go-button[variant=text]:focus-within .btn-text{text-decoration:none}:where([color-scheme=light],[data-theme=light]) go-button{--go-btn-bg-color:var(--go-color-neutral-600);--go-btn-bg-color-hover:var(--go-color-neutral-500)}:where([color-scheme=light],[data-theme=light]) go-button[variant=primary]{--go-btn-bg-color:var(--go-color-primary-600);--go-btn-bg-color-hover:var(--go-color-primary-500)}:where([color-scheme=light],[data-theme=light]) go-button[variant=secondary]{--go-btn-bg-color:var(--go-color-secondary-600);--go-btn-bg-color-hover:var(--go-color-secondary-500)}:where([color-scheme=light],[data-theme=light]) go-button[variant=success]{--go-btn-bg-color:var(--go-color-success-600);--go-btn-bg-color-hover:var(--go-color-success-500)}:where([color-scheme=light],[data-theme=light]) go-button[variant=critical]{--go-btn-bg-color:var(--go-color-critical-600);--go-btn-bg-color-hover:var(--go-color-critical-500)}:where([color-scheme=light],[data-theme=light]) go-button.outline{--go-btn-outline-text-color:var(--go-btn-bg-color);--go-btn-outline-text-color-hover:var(--go-color-lightest)}:where([color-scheme=dark],[data-theme=dark]) go-button{--go-btn-bg-color:var(--go-color-neutral-400);--go-btn-bg-color-hover:var(--go-color-neutral-500)}:where([color-scheme=dark],[data-theme=dark]) go-button[variant=primary]{--go-btn-bg-color:var(--go-color-primary-600);--go-btn-bg-color-hover:var(--go-color-primary-400)}:where([color-scheme=dark],[data-theme=dark]) go-button[variant=secondary]{--go-btn-bg-color:var(--go-color-secondary-400);--go-btn-bg-color-hover:var(--go-color-secondary-500)}:where([color-scheme=dark],[data-theme=dark]) go-button[variant=success]{--go-btn-bg-color:var(--go-color-success-400);--go-btn-bg-color-hover:var(--go-color-success-500)}:where([color-scheme=dark],[data-theme=dark]) go-button[variant=critical]{--go-btn-bg-color:var(--go-color-critical-400);--go-btn-bg-color-hover:var(--go-color-critical-500)}:where([color-scheme=dark],[data-theme=dark]) go-button.outline{--go-btn-outline-text-color:var(--go-color-darkest);--go-btn-outline-text-color-hover:var(--go-color-darkest)}";
const GoButtonStyle0 = goButtonCss;

const GoButton = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.nativeEl = null;
        this.type = 'button';
        this.disabled = null;
        this.variant = 'neutral';
        this.block = undefined;
        this.outline = false;
        this.outlineFill = false;
        this.flat = false;
        this.round = false;
        this.icon = false;
        this.stack = false;
        this.compact = false;
        this.href = undefined;
        this.loading = false;
        this.loadingAnouncement = 'Loading';
        this.blockClasses = undefined;
        this.inheritedAttributes = {};
    }
    componentWillLoad() {
        // a11y check
        if (this.icon) {
            if (!this.el.hasAttribute('aria-label') && !this.el.hasAttribute('aria-labelledby')) {
                warning(`go-button with icon must have either aria-label or aria-labelledby attribute`, this.el);
            }
        }
        if (this.block) {
            this.handleBlockChange(this.block);
        }
        this.updateInnerButtonAttributes();
    }
    updateInnerButtonAttributes() {
        this.inheritedAttributes = Object.assign({}, $attrs.bind(this)());
    }
    handleBlockChange(block) {
        this.blockClasses = typeof block !== 'undefined' ? `block-${block}` : '';
    }
    render() {
        const { type, disabled, variant, blockClasses, outline, outlineFill, inheritedAttributes, href, loading, loadingAnouncement, } = this;
        const Tag = href ? 'a' : 'button';
        const rootClasses = `${variant} ${blockClasses}`;
        return (h(Host, { key: 'd576c9b1b247d00a45ba31398026f58fba47a1c7', class: {
                [rootClasses]: true,
                outline,
                'outline outline-fill': outlineFill,
            } }, h(Tag, Object.assign({ key: '6483cc7a4f95a7d5747e60c2041a40d85276b470', ref: (el) => {
                this.nativeEl = el;
            }, href: href ? href : null, type: href ? null : type, "aria-disabled": disabled ? 'true' : null, disabled: disabled ? 'true' : null, class: "inner-button", "aria-busy": loading ? 'true' : null }, inheritedAttributes), h("go-spinner", { key: 'a42682d6643e9c729bd813d151d00c5e2147c924', loading: loading, loadingAnnouncement: loadingAnouncement }), h("slot", { key: 'd680216f9af9576e5ac1d092249defbbabc1aa79', name: "prefix" }), h("span", { key: '6d2a89fb1c3eb0bc0d4ae8b1ce615435507587f1', class: "btn-text" }, h("slot", { key: 'ccec91661523e0e7eb53ac68cb242cf240e9d7e1' })), h("slot", { key: 'b89c2277b3c99ad9f8d9614ec0ae603ff2411edd', name: "suffix" }))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "block": ["handleBlockChange"]
    }; }
};
GoButton.style = GoButtonStyle0;

const goDarkModeCss = "go-dark-mode{display:block}";
const GoDarkModeStyle0 = goDarkModeCss;

const GoDarkMode = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.changeEvent = createEvent(this, "themechange", 7);
        this.attribute = 'data-theme';
    }
    async componentWillLoad() {
        // get user preference
        const theme = await this.getUserPreference();
        this.setTheme(theme);
        // add event listener
        {
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', async (e) => {
                await this.setTheme(e.matches ? 'dark' : 'light');
            });
        }
    }
    /**
     * get preferred theme,
     * 1. Check user settings:
     *    - check if localstorage has user-theme key
     *    - if so, check if value is either light or dark,
     *    - if so, return value
     *    - if value is neither light or dark, continue to next step
     * 2. Check system preference:
     *    - check if prefers-color-scheme is dark, if so, return dark
     * 3. default to light
     */
    async getUserPreference() {
        const userTheme = localStorage.getItem('user-theme');
        if (userTheme === 'light' || userTheme === 'dark') {
            return userTheme;
        }
        // Check system preference
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
        }
        // Default to light
        return 'light';
    }
    /**
     * set the current theme and change the html attribute
     * @param theme theme to set
     */
    async setTheme(theme) {
        localStorage.setItem('user-theme', theme);
        this.changeEvent.emit({ theme });
        document.documentElement.setAttribute(this.attribute, theme);
    }
};
GoDarkMode.style = GoDarkModeStyle0;

const goSpinnerCss = "go-spinner{--spinner-ring-color:var(--go-color-primary-800);--spinner-base-color:var(--go-color-neutral-300);--spinner-size:1.5rem;--spinner-ring-width:calc(var(--spinner-size) / 10);--spinner-duration:500ms;--spinner-gap:0.5rem;display:inline-flex;gap:var(--spinner-gap);align-items:center}go-spinner.stacked{flex-direction:column}go-spinner .spinner{border:var(--spinner-ring-width) solid var(--spinner-base-color);border-radius:50%;border-top-color:var(--spinner-ring-color);width:var(--spinner-size);height:var(--spinner-size);animation:spin var(--spinner-duration) linear infinite}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}";
const GoSpinnerStyle0 = goSpinnerCss;

const GoSpinner = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.ringColor = undefined;
        this.baseColor = undefined;
        this.size = undefined;
        this.ringWidth = undefined;
        this.duration = undefined;
        this.stacked = false;
        this.loading = true;
        this.loadingAnnouncement = 'Loading';
        this.isLoading = undefined;
    }
    componentWillLoad() {
        this.isLoading = this.loading;
    }
    loadingChanged(value) {
        this.isLoading = value;
    }
    render() {
        const { ringColor, baseColor, size, ringWidth, duration, stacked, isLoading, loadingAnnouncement } = this;
        let styles = {};
        if (ringColor) {
            styles['--spinner-ring-color'] = ringColor;
        }
        if (baseColor) {
            styles['--spinner-base-color'] = baseColor;
        }
        if (size) {
            styles['--spinner-size'] = size;
        }
        if (ringWidth) {
            styles['--spinner-ring-width'] = ringWidth;
        }
        if (duration) {
            styles['--spinner-duration'] = duration;
        }
        return (h(Host, { key: 'b0e25d5a20715c17b5797453c7b90a320866d7b8', style: styles, role: "status", class: { stacked, 'visually-hidden': !isLoading } }, isLoading
            ? [
                h("div", { "aria-hidden": "true", class: "spinner" }),
                h("slot", null, h("span", { class: "visually-hidden" }, loadingAnnouncement)),
            ]
            : null));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "loading": ["loadingChanged"]
    }; }
};
GoSpinner.style = GoSpinnerStyle0;

const goSwitchCss = "go-switch{--switch-width:4rem;--switch-height:2rem;--switch-bg-color:var(--go-color-neutral-500);--switch-bg-color-checked:var(--go-color-primary-600);--switch-label-gap:1rem;--switch-radius:var(--radius-round);--switch-handle-color:#fff;--switch-handle-gap:0.25rem;--switch-handle-shadow:var(--shadow-2);--switch-shadow:var(--inner-shadow-1);--switch-text-color:#fff;--switch-handle-size:calc(min(var(--switch-width), var(--switch-height)) - 2 * var(--switch-handle-gap));--switch-text-size:max(calc(var(--switch-handle-size) / 2), 0.875rem);display:inline-flex;flex-direction:row;align-items:center;gap:var(--switch-label-gap)}go-switch.stack{flex-direction:column;align-items:flex-start;gap:var(--form-label-gap)}go-switch.full-width{display:flex;justify-content:space-between}go-switch.full-width label{flex-grow:1}go-switch label{cursor:pointer;font-weight:700}go-switch .switch-container{position:relative}go-switch .switch-group{display:flex;align-items:center;gap:calc(var(--switch-label-gap) / 2)}go-switch .switch-track{transition:background-color var(--go-duration-normal) var(--go-timing-function), outline-offset var(--go-duration-fast) var(--go-timing-function);display:block;position:relative;padding-inline:var(--switch-handle-gap);width:var(--switch-width);height:var(--switch-height);background:var(--switch-bg-color);border-radius:var(--switch-radius);box-shadow:var(--switch-shadow)}@media (prefers-reduced-motion: reduce){go-switch .switch-track{transition-duration:0s}}go-switch .switch-track .switch-text{position:absolute;top:50%;left:auto;right:20%;transform:translateY(-50%);color:var(--switch-text-color);font-size:var(--switch-text-size);line-height:1;font-weight:500}go-switch .switch-handle{display:block;position:absolute;top:var(--switch-handle-gap);left:var(--switch-handle-gap);bottom:var(--switch-handle-gap);z-index:1;background:var(--switch-handle-color);width:var(--switch-handle-size);height:var(--switch-handle-size);border-radius:var(--switch-radius);box-shadow:var(--switch-handle-shadow);transition:transform var(--go-duration-fast) var(--go-timing-function)}@media (prefers-reduced-motion: reduce){go-switch .switch-handle{transition-duration:0s}}go-switch input{opacity:0;position:absolute;top:0;left:0;right:0;bottom:0;z-index:2;outline:none;cursor:pointer}go-switch input:checked~.switch-group .switch-track{--switch-bg-color:var(--switch-bg-color-checked)}go-switch input:checked~.switch-group .switch-track .switch-handle{transform:translateX(calc(var(--switch-width) - var(--switch-handle-size) - 2 * var(--switch-handle-gap)))}go-switch input:checked~.switch-group .switch-track .switch-text{left:20%;right:auto}go-switch input:focus-visible:active~.switch-group .switch-track{outline-offset:0}go-switch input:focus-visible~.switch-group .switch-track{outline:var(--go-focus-outline-width) solid var(--switch-bg-color);outline-offset:var(--go-focus-outline-offset)}";
const GoSwitchStyle0 = goSwitchCss;

const GoSwitch = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        // Store attributes inherited from the host element
        this.attrs = {};
        this.checked = undefined;
        this.name = undefined;
        this.label = undefined;
        this.disabled = undefined;
        this.value = undefined;
        this.stack = false;
        this.fullWidth = false;
        this.showOnOff = false;
        this.showOnOffOutside = false;
        this.activeLabel = 'On';
        this.inactiveLabel = 'Off';
    }
    handleChange(e) {
        this.checked = e.target.checked;
    }
    componentWillLoad() {
        const propNames = Object.keys(this['__proto__']);
        const attributeNames = propNames.map((name) => kebabCase(name));
        this.attrs = inheritAttributes(this.el, ['class', 'style', ...attributeNames]);
    }
    render() {
        const { checked, name, label, disabled, value, attrs, stack, fullWidth, showOnOff, showOnOffOutside, activeLabel, inactiveLabel, } = this;
        const inputId = (attrs === null || attrs === void 0 ? void 0 : attrs.id) ? attrs.id : uniqueId('go-switch-');
        return (h(Host, { key: '5205c5cc2d8ff827433dfe31289927dcec6cfc01', class: { stack, 'full-width': fullWidth } }, h("label", { key: '312120a1f35c7f4956544995380b85576bab6d07', htmlFor: inputId }, label), h("div", { key: '4877f7f01bb8503af40f52c306c1ddc96b05d78f', class: "switch-container" }, h("input", Object.assign({ key: '652dc70bdfac1a35ecb4a5b94b8ca8cce47e06f0', ref: (el) => (this.inputEl = el), type: "checkbox", role: "switch", id: inputId, name: name, disabled: disabled, checked: checked, value: value }, attrs, { onChange: (e) => this.handleChange(e) })), h("div", { key: '93b6eb2c496a939e359cade903182008c33dc7f8', class: "switch-group" }, h("span", { key: '19e88239b026e86f64218c2f7854a9dc7f9e338f', class: "switch-track" }, h("span", { key: 'c6990120f0da04598ebda7e4217227c2253fd4da', class: "switch-handle" }), showOnOff ? (h("span", { class: "switch-text", "aria-hidden": "true" }, checked ? activeLabel : inactiveLabel)) : null), showOnOffOutside ? (h("span", { class: "text-size-0", "aria-hidden": "true" }, checked ? activeLabel : inactiveLabel)) : null))));
    }
    get el() { return getElement(this); }
};
GoSwitch.style = GoSwitchStyle0;

export { GoButton as go_button, GoDarkMode as go_dark_mode, GoSpinner as go_spinner, GoSwitch as go_switch };

//# sourceMappingURL=go-button_4.entry.js.map