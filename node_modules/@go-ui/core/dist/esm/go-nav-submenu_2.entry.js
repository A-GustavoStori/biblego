import { r as registerInstance, c as createEvent, h, g as getElement } from './index-a73e6b51.js';
import { w as warning, b as hasSlot } from './helper-bc7b4586.js';
import { o as onClickOutside, i as onEscape } from './dom-0d82aeaf.js';
import './index-30633753.js';
import './uniqueId-0b35bc55.js';

const GoNavSubmenu = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.toggleEvent = createEvent(this, "toggle", 7);
        this.clickOutsideCleanUp = null;
        this.escapeCleanUp = null;
        this.hasHeaderSlot = false;
        this.columns = 1;
        this.isOpen = false;
    }
    async open() {
        this.isOpen = true;
        this.toggleEvent.emit({ isOpen: true });
        window.requestAnimationFrame(() => {
            // click outside to close menus
            this.clickOutsideCleanUp = onClickOutside(this.el, () => this.close());
            // esc to close menus
            this.escapeCleanUp = onEscape(document, () => this.close());
        });
    }
    async close() {
        this.isOpen = false;
        this.toggleEvent.emit({ isOpen: false });
        this.clickOutsideCleanUp && this.clickOutsideCleanUp();
        this.escapeCleanUp && this.escapeCleanUp();
    }
    async toggle() {
        if (this.isOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    componentWillLoad() {
        this.parentNavItem = this.el.closest('go-nav-item');
        if (!this.parentNavItem) {
            warning('<go-nav-submenu> must be a child of <go-nav-item>', this.el);
            return;
        }
        this.hasHeaderSlot = hasSlot(this.el, 'submenu-header');
    }
    render() {
        const { columns, isOpen, hasHeaderSlot } = this;
        return (h("div", { key: 'ac5bc09df1a4ebbb7996e60832e3a2899f38bfa1', class: { 'submenu-container': true, 'open': isOpen }, style: { '--submenu-columns': String(columns) } }, hasHeaderSlot ? (h("div", { class: "submenu-header" }, h("slot", { name: "submenu-header" }))) : null, h("div", { key: '196f1c3f4ebc2de3d75de0967655f1b6fd08d95c', class: "submenu-body" }, h("slot", { key: '00194d39b83582368dce9e42e9eb2e22c01d87f7' }))));
    }
    get el() { return getElement(this); }
};

const GoNavSubmenuTrigger = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.controls = undefined;
        this.isOpen = false;
    }
    loadSubmenuEl() {
        if (this.controls) {
            this.submenuEl = document.getElementById(this.controls);
            if (!this.submenuEl) {
                warning('<go-nav-submenu-trigger> is missing <go-nav-submenu> with id: ' + this.controls, this.el);
            }
            this.submenuEl.addEventListener('toggle', (e) => {
                this.isOpen = e.detail.isOpen;
            });
        }
    }
    toggleOpenState() {
        this.submenuEl.toggle();
    }
    componentDidLoad() {
        this.loadSubmenuEl();
    }
    render() {
        const Tag = 'button';
        return (h(Tag, { key: '0afb1549dd2e97a8e0b65ab254720b894be26040', class: "nav-item-inner", onClick: () => this.toggleOpenState(), type: "button", "aria-haspopup": "true", "aria-controls": this.controls ? this.controls : undefined, "aria-expanded": this.isOpen ? 'true' : 'false' }, h("span", { key: '6bbbeafa1cdfccd4b2cf37440863a8f5154e3e4e', class: "nav-item-label" }, h("slot", { key: '685ccffaf7270fee2aa2106aa6c0e2bafe21b5e5' })), h("svg", { key: '9f8b1a268ad2f5a790c13fda3b6839a774e52f8b', xmlns: "http://www.w3.org/2000/svg", fill: "none", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round", viewBox: "0 0 24 24" }, h("path", { key: 'd6be239226be1c3a2fba2ee68dcbacaddb44c4c8', d: "m6 9 6 6 6-6" }))));
    }
    get el() { return getElement(this); }
};

export { GoNavSubmenu as go_nav_submenu, GoNavSubmenuTrigger as go_nav_submenu_trigger };

//# sourceMappingURL=go-nav-submenu_2.entry.js.map