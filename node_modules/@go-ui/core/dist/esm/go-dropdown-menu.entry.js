import { r as registerInstance, h, g as getElement } from './index-a73e6b51.js';
import { u as uniqueId } from './uniqueId-0b35bc55.js';

const goDropdownMenuCss = "go-dropdown-menu{--dd-item-gap:0;--dd-item-padding-y:0.5rem;--dd-item-padding-x:1rem;--dd-item-padding:var(--dd-item-padding-y) var(--dd-item-padding-x);--dd-item-radius:var(--radius-1);--dd-item-bg:var(--dropdown-bg-color);--dd-item-bg-hover:var(--go-color-neutral-200);--dd-item-bg-selected:var(--go-color-neutral-200);--dd-item-fg:var(--go-color-neutral-900);--dd-item-fg-hover:var(--go-color-darkest);--dd-item-fg-selected:var(--go-color-darkest);--dd-item-bg-disabled:transparent;--dd-item-fg-disabled:var(--go-color-neutral-600);--dd-item-width:100%;--dd-item-line-height:1.5em}go-dropdown-menu .dropdown-menu-inner{display:flex;flex-direction:column;gap:var(--dd-item-gap)}go-dropdown-menu [role=menuitem]{background:none;border:none;text-decoration:none;cursor:pointer;display:block;padding:var(--dd-item-padding);border-radius:var(--dd-item-radius);background:var(--dd-item-bg);color:var(--dd-item-fg);width:var(--dd-item-width);line-height:var(--dd-item-line-height);min-height:calc(2 * var(--dd-item-padding-y) + var(--dd-item-line-height));text-align:start}go-dropdown-menu [role=menuitem]:hover{background:var(--dd-item-bg-hover);color:var(--dd-item-fg-hover)}go-dropdown-menu [role=menuitem]:focus-visible{position:relative;z-index:1;outline:var(--go-focus-outline-width, 2px) solid var(--go-focus-outline-color, #000)}go-dropdown-menu go-dropdown-item[disabled] [role=menuitem]{background:var(--dd-item-bg-disabled);color:var(--dd-item-fg-disabled)}";
const GoDropdownMenuStyle0 = goDropdownMenuCss;

const GoDropdownMenu = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.focusedMenuItemIndex = 0;
        this.focusLastOnNextOpen = false;
        this.triggerSelector = undefined;
        this.isActive = false;
        this.width = undefined;
        this.menuId = undefined;
        this.persistent = false;
    }
    /**
     * open menu
     * @param focusFirst if auto focus on first item
     */
    async open() {
        if (!this.dropdownEl.isActive) {
            // open menu and focus on first item
            this.dropdownEl.open();
        }
    }
    async close(focusBackToTrigger = false) {
        this.dropdownEl.close(focusBackToTrigger);
    }
    componentWillLoad() {
        this.triggerEl = document.querySelector(this.triggerSelector);
        if (!this.menuId) {
            this.menuId = uniqueId('go-dropdown-menu-');
        }
        this.setTriggerRoles();
        this.addTriggerEventListeners();
    }
    componentDidLoad() {
        this.addMenuItemEventListeners();
    }
    setTriggerRoles() {
        this.triggerEl.setAttribute('aria-controls', this.menuId);
    }
    addTriggerEventListeners() {
        this.triggerEl.addEventListener('click', () => {
            if (this.isActive) {
                this.close();
            }
            else {
                this.open();
            }
        });
        this.triggerEl.addEventListener('keydown', (e) => {
            if (!this.dropdownEl) {
                return;
            }
            const key = e.key;
            if (key === 'ArrowUp') {
                this.focusLastOnNextOpen = true;
                this.open();
            }
            if (key === 'ArrowDown') {
                this.open();
            }
        });
    }
    addMenuItemEventListeners() {
        if (!this.menuItemEls) {
            this.menuItemEls = Array.from(this.menuEl.querySelectorAll('go-dropdown-item'));
        }
        if (!this.menuItemEls.length) {
            // no `go-dropdown-item` found
            return;
        }
        // up down arrow keys move focus between menu items
        this.menuItemEls.forEach((item) => {
            item.addEventListener('keydown', (e) => {
                if (e.key === 'Tab') {
                    this.close();
                }
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    this.focusedMenuItemIndex += 1;
                    if (this.focusedMenuItemIndex > this.menuItemEls.length - 1) {
                        this.focusedMenuItemIndex = 0;
                    }
                    this.focusMenuItem();
                }
                if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    this.focusedMenuItemIndex -= 1;
                    if (this.focusedMenuItemIndex < 0) {
                        this.focusedMenuItemIndex = this.menuItemEls.length - 1;
                    }
                    this.focusMenuItem();
                }
            });
        });
    }
    focusMenuItem() {
        this.menuItemEls.forEach((dropdownItem, i) => {
            if (i === this.focusedMenuItemIndex) {
                dropdownItem.focusInControl();
            }
            else {
                dropdownItem.focusOutControl();
            }
        });
    }
    handleDropdownOpened() {
        this.isActive = true;
        if (this.focusLastOnNextOpen) {
            this.focusedMenuItemIndex = this.menuItemEls.length - 1;
            this.focusLastOnNextOpen = false;
        }
        else {
            this.focusedMenuItemIndex = 0;
        }
        this.focusMenuItem();
    }
    handleDropdownClosed() {
        this.isActive = false;
    }
    handleItemSelected() {
        if (!this.persistent) {
            this.close();
        }
    }
    render() {
        const { triggerSelector, isActive, width, menuId } = this;
        const dropdownProps = {
            triggerSelector,
            isActive,
            width,
        };
        return (h("go-dropdown", Object.assign({ key: '10c25f5db589edffe3f4b92dfdbf88f41123f761', ref: (el) => {
                this.dropdownEl = el;
            }, noTriggerClickHandler: true, onOpened: () => this.handleDropdownOpened(), onClosed: () => this.handleDropdownClosed() }, dropdownProps), h("slot", { key: '90a88209517d7408e48aa283b666f5a158b508b5', name: "prefix" }), h("div", { key: 'b4ae2290f95f499281f4ec13386f1b34c12560cb', role: "menu", class: "dropdown-menu-inner", id: menuId, ref: (el) => {
                this.menuEl = el;
            } }, h("slot", { key: '2f94ef98bbfc7bed961444f033331525327d2f9a' })), h("slot", { key: 'f6fbf3cb42f70d7c785e8f1f4078eea78444c19a', name: "suffix" })));
    }
    get el() { return getElement(this); }
};
GoDropdownMenu.style = GoDropdownMenuStyle0;

export { GoDropdownMenu as go_dropdown_menu };

//# sourceMappingURL=go-dropdown-menu.entry.js.map