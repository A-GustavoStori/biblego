{"file":"go-skip-link.entry.js","mappings":";;;;;AAAA,MAAM,aAAa,GAAG,+WAA+W,CAAC;AACtY,yBAAe,aAAa;;MCQf,UAAU;;;;;;QAarB,gBAAW,GAAY,KAAK,CAAC;sBAPH,MAAM;;;IAShC,iBAAiB;;;;QAKf,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAgB,CAAC;QAEpE,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,CAAC,yBAAyB,IAAI,CAAC,MAAM,aAAa,CAAC,CAAC;YAC3D,OAAO;SACR;QAED,IAAI,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;YACrC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;QAED,IAAI,QAAQ,CAAC,EAAE,EAAE;YACf,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YACxC,OAAO;SACR;;QAED,MAAM,EAAE,GAAG,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACzC,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;KAChC;IAED,WAAW,CAAC,QAAqB,EAAE,EAAU;QAC3C,IAAI,CAAC,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,QAAQ,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;SACzC;KACF;IAED,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,QACE,EAAC,IAAI,uDACH,0DAAG,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,2BAA2B,IAC9C,8DAAa,CACX,CACC,EACP;KACH;;;;;;;","names":[],"sources":["src/components/go-skip-link/go-skip-link.scss?tag=go-skip-link","src/components/go-skip-link/go-skip-link.tsx"],"sourcesContent":["go-skip-link {\n  /**\n    @prop --skip-link-padding:\n      Padding to apply to the skip link focusable area\n      - default: 1rem 2rem\n  */\n  --skip-link-padding: 1rem 2rem;\n\n  /**\n    @prop --skip-link-bg-color:\n      Background color for the skip link focusable area\n      - default: var(--go-color-secondary-700)\n  */\n  --skip-link-bg-color: var(--go-color-secondary-700);\n\n  /**\n    @prop --skip-link-text-color:\n      Text color for the skip link focusable area\n      - default: var(--go-color-lightest)\n  */\n  --skip-link-text-color: var(--go-color-lightest);\n\n  position: fixed;\n  top: 1rem;\n  left: 1rem;\n\n  a,\n  a:focus-visible {\n    display: block;\n    padding: var(--skip-link-padding);\n    background: var(--skip-link-bg-color);\n    color: var(--skip-link-text-color);\n    box-shadow: var(--shadow-2);\n  }\n}\n","import { Component, Host, h, Element, Prop, State } from '@stencil/core';\nimport { uniqueId } from 'lodash-es';\nimport { warning } from '../../utils/helper';\n\n@Component({\n  tag: 'go-skip-link',\n  styleUrl: 'go-skip-link.scss',\n  shadow: false,\n})\nexport class GoSkipLink {\n  @Element() el: HTMLElement;\n\n  /**\n   * Tell skip link which element to focus (supports any query selector)\n   */\n  @Prop() target?: string = 'main';\n\n  @State() href: string;\n\n  /**\n   * records if original target element has tabindex attribute set, if so, do not touch it\n   */\n  hasTabIndex: boolean = false;\n\n  componentWillLoad() {\n    // get target element\n    // check if id exists\n    // if not, generate random id and set it in the link href\n\n    const targetEl = document.querySelector(this.target) as HTMLElement;\n\n    if (!targetEl) {\n      warning(`[go-skip-link] target ${this.target} not found.`);\n      return;\n    }\n\n    if (targetEl.hasAttribute('tabindex')) {\n      this.hasTabIndex = true;\n    }\n\n    if (targetEl.id) {\n      this.setTabIndex(targetEl, targetEl.id);\n      return;\n    }\n    // generate a random id then set href\n    const id = uniqueId('skip-link-target-');\n    targetEl.id = id;\n    this.setTabIndex(targetEl, id);\n  }\n\n  setTabIndex(targetEl: HTMLElement, id: string): void {\n    this.href = `#${id}`;\n    if (!this.hasTabIndex) {\n      targetEl.setAttribute('tabindex', '-1');\n    }\n  }\n\n  render() {\n    const { href } = this;\n    return (\n      <Host>\n        <a href={href} class=\"visually-hidden-focusable\">\n          <slot></slot>\n        </a>\n      </Host>\n    );\n  }\n}\n"],"version":3}